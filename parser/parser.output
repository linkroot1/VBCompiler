Nonterminals useless in grammar

    single_line_stmt
    if_stmt_single_line


Terminals unused in grammar

    ENDL
    ASSIGN_CONSTRUCT
    ASSIGN_MULT
    ASSIGN_ORD_DIV
    ASSIGN_INT_DIV
    ASSIGN_ADD
    ASSIGN_SUB
    ASSIGN_LSHIFT
    ASSIGN_RSHIFT
    ASSIGN_CONCAT


Rules useless in grammar

   92 stmt: single_line_stmt

   93 single_line_stmt: if_stmt_single_line

   94 if_stmt_single_line: IF expr THEN single_line_stmt
   95                    | IF expr THEN single_line_stmt ELSE single_line_stmt


Grammar

    0 $accept: root $end

    1 root: program_items_list

    2 program_items_list: %empty
    3                   | program_items_list_not_empty

    4 program_items_list_not_empty: program_item
    5                             | program_items_list_not_empty program_item

    6 program_item: module
    7             | IMPORTS IDENTIFIER stmt_ends

    8 module: MODULE IDENTIFIER stmt_ends END MODULE
    9       | MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE

   10 functions_and_sub_list: function_or_sub
   11                       | functions_and_sub_list stmt_ends function_or_sub

   12 function_or_sub: function
   13                | sub_bloc

   14 function: FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION
   15         | FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION
   16         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   17         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION

   18 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   19         | SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

   20 parameterlist_or_empty: %empty
   21                       | parameterlist_with_type
   22                       | parameterlist_without_type

   23 parameterlist_with_type: parameter_with_type
   24                        | parameterlist_with_type ',' parameter_with_type

   25 parameterlist_without_type: parameter_without_type
   26                           | parameterlist_without_type ',' parameter_without_type

   27 parameter_with_type: IDENTIFIER AS basic_literal
   28                    | IDENTIFIER AS basic_literal '(' ')'

   29 parameter_without_type: IDENTIFIER

   30 stmt_list: stmt
   31          | stmt_list stmt

   32 stmt: multi_line_stmt

   33 multi_line_stmt: decl_stmt stmt_ends
   34                | assign_stmt stmt_ends
   35                | while_stmt stmt_ends
   36                | select_stmt stmt_ends
   37                | if_stmt_multi_line stmt_ends

   38 stmt_ends: END_OF_LINE
   39          | stmt_ends END_OF_LINE

   40 decl_stmt: ACCESS SUB var_name stmt END SUB
   41          | CONST var_name AS basic_literal '=' END_OF_LINE expr
   42          | CONST var_name AS basic_literal '=' expr
   43          | DIM var_name AS basic_literal '=' END_OF_LINE expr
   44          | DIM var_name AS basic_literal '=' expr
   45          | DIM var_name AS basic_literal
   46          | DIM var_name '=' END_OF_LINE expr
   47          | DIM var_name '=' expr
   48          | DIM var_name

   49 var_name: IDENTIFIER '(' expr ')'
   50         | IDENTIFIER

   51 assign_stmt: IDENTIFIER '=' expr
   52            | IDENTIFIER '=' IDENTIFIER

   53 while_stmt: WHILE expr stmt_ends stmt END WHILE

   54 if_stmt_multi_line: IF expr THEN stmt_ends stmt ELSE stmt END IF
   55                   | IF expr THEN stmt_ends stmt elseif_list ELSE stmt END IF

   56 elseif_list: ELSEIF expr THEN stmt
   57            | elseif_list ELSEIF expr THEN stmt

   58 select_stmt: SELECT CASE expr stmt_ends case_list END SELECT

   59 case_list: case_stmt
   60          | case_list case_stmt

   61 case_stmt: CASE expr stmt
   62          | CASE IS expr stmt
   63          | CASE expr TO expr stmt
   64          | CASE ELSE stmt

   65 expr: operand
   66     | '-' expr
   67     | '+' expr
   68     | expr '+' expr
   69     | expr '-' expr
   70     | expr '*' expr
   71     | expr '/' expr
   72     | expr INT_DIV expr
   73     | expr '=' expr
   74     | expr '<' expr
   75     | expr '>' expr
   76     | expr '^' expr
   77     | expr NOT_EQUAL expr
   78     | expr LESS_OR_EQUAL expr
   79     | expr MORE_OR_EQUAL expr
   80     | expr '&' expr

   81 operand: basic_literal
   82        | function_literal

   83 basic_literal: INT
   84              | STRING
   85              | BOOLEAN
   86              | DOUBLE

   87 function_literal: IDENTIFIER arguments

   88 arguments: '(' expr_list ')'
   89          | '(' ')'

   90 expr_list: expr
   91          | expr_list ',' expr


Terminals, with rules where they appear

    $end (0) 0
    '&' (38) 80
    '(' (40) 18 19 28 49 88 89
    ')' (41) 18 19 28 49 88 89
    '*' (42) 70
    '+' (43) 67 68
    ',' (44) 24 26 91
    '-' (45) 66 69
    '/' (47) 71
    '<' (60) 74
    '=' (61) 41 42 43 44 46 47 51 52 73
    '>' (62) 75
    '^' (94) 76
    error (256)
    INT <int_val> (258) 83
    DOUBLE <double_val> (259) 86
    STRING <str_val> (260) 84
    BOOLEAN <bool_val> (261) 85
    IDENTIFIER <id_name> (262) 7 8 9 14 15 16 17 18 19 27 28 29 49 50 51 52 87
    ENDL (263)
    ACCESS (264) 40
    SUB (265) 18 19 40
    END (266) 8 9 14 15 16 17 18 19 40 53 54 55 58
    CONST (267) 41 42
    DIM (268) 43 44 45 46 47 48
    AS (269) 27 28 41 42 43 44 45
    WHILE (270) 53
    IF (271) 54 55
    THEN (272) 54 55 56 57
    ELSE (273) 54 55 64
    ELSEIF (274) 56 57
    SELECT (275) 58
    CASE (276) 58 61 62 63 64
    IS (277) 62
    TO (278) 63
    IMPORTS (279) 7
    MODULE (280) 8 9
    FUNCTION (281) 14 15 16 17
    RETURN (282) 15 17
    END_OF_LINE (283) 38 39 41 43 46
    UNARY_MINUS (284)
    UNARY_PLUS (285)
    ASSIGN_CONSTRUCT (286)
    ASSIGN_MULT (287)
    ASSIGN_ORD_DIV (288)
    ASSIGN_INT_DIV (289)
    ASSIGN_ADD (290)
    ASSIGN_SUB (291)
    ASSIGN_LSHIFT (292)
    ASSIGN_RSHIFT (293)
    ASSIGN_CONCAT (294)
    INT_DIV (295) 72
    NOT_EQUAL (296) 77
    LESS_OR_EQUAL (297) 78
    MORE_OR_EQUAL (298) 79


Nonterminals, with rules where they appear

    $accept (56)
        on left: 0
    root (57)
        on left: 1
        on right: 0
    program_items_list (58)
        on left: 2 3
        on right: 1
    program_items_list_not_empty (59)
        on left: 4 5
        on right: 3 5
    program_item (60)
        on left: 6 7
        on right: 4 5
    module (61)
        on left: 8 9
        on right: 6
    functions_and_sub_list (62)
        on left: 10 11
        on right: 9 11
    function_or_sub (63)
        on left: 12 13
        on right: 10 11
    function (64)
        on left: 14 15 16 17
        on right: 12
    sub_bloc (65)
        on left: 18 19
        on right: 13
    parameterlist_or_empty (66)
        on left: 20 21 22
        on right: 18 19
    parameterlist_with_type (67)
        on left: 23 24
        on right: 21 24
    parameterlist_without_type (68)
        on left: 25 26
        on right: 22 26
    parameter_with_type (69)
        on left: 27 28
        on right: 23 24
    parameter_without_type (70)
        on left: 29
        on right: 25 26
    stmt_list (71)
        on left: 30 31
        on right: 16 17 19 31
    stmt (72)
        on left: 32
        on right: 30 31 40 53 54 55 56 57 61 62 63 64
    multi_line_stmt (73)
        on left: 33 34 35 36 37
        on right: 32
    stmt_ends (74)
        on left: 38 39
        on right: 7 8 9 11 14 15 16 17 18 19 33 34 35 36 37 39 53 54 55 58
    decl_stmt (75)
        on left: 40 41 42 43 44 45 46 47 48
        on right: 33
    var_name (76)
        on left: 49 50
        on right: 40 41 42 43 44 45 46 47 48
    assign_stmt (77)
        on left: 51 52
        on right: 34
    while_stmt (78)
        on left: 53
        on right: 35
    if_stmt_multi_line (79)
        on left: 54 55
        on right: 37
    elseif_list (80)
        on left: 56 57
        on right: 55 57
    select_stmt (81)
        on left: 58
        on right: 36
    case_list (82)
        on left: 59 60
        on right: 58 60
    case_stmt (83)
        on left: 61 62 63 64
        on right: 59 60
    expr (84)
        on left: 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80
        on right: 15 17 41 42 43 44 46 47 49 51 53 54 55 56 57 58 61 62 63 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 90 91
    operand (85)
        on left: 81 82
        on right: 65
    basic_literal (86)
        on left: 83 84 85 86
        on right: 27 28 41 42 43 44 45 81
    function_literal (87)
        on left: 87
        on right: 82
    arguments (88)
        on left: 88 89
        on right: 14 15 16 17 87
    expr_list (89)
        on left: 90 91
        on right: 88 91


State 0

    0 $accept: . root $end

    IMPORTS  shift, and go to state 1
    MODULE   shift, and go to state 2

    $default  reduce using rule 2 (program_items_list)

    root                          go to state 3
    program_items_list            go to state 4
    program_items_list_not_empty  go to state 5
    program_item                  go to state 6
    module                        go to state 7


State 1

    7 program_item: IMPORTS . IDENTIFIER stmt_ends

    IDENTIFIER  shift, and go to state 8


State 2

    8 module: MODULE . IDENTIFIER stmt_ends END MODULE
    9       | MODULE . IDENTIFIER stmt_ends functions_and_sub_list END MODULE

    IDENTIFIER  shift, and go to state 9


State 3

    0 $accept: root . $end

    $end  shift, and go to state 10


State 4

    1 root: program_items_list .

    $default  reduce using rule 1 (root)


State 5

    3 program_items_list: program_items_list_not_empty .
    5 program_items_list_not_empty: program_items_list_not_empty . program_item

    IMPORTS  shift, and go to state 1
    MODULE   shift, and go to state 2

    $default  reduce using rule 3 (program_items_list)

    program_item  go to state 11
    module        go to state 7


State 6

    4 program_items_list_not_empty: program_item .

    $default  reduce using rule 4 (program_items_list_not_empty)


State 7

    6 program_item: module .

    $default  reduce using rule 6 (program_item)


State 8

    7 program_item: IMPORTS IDENTIFIER . stmt_ends

    END_OF_LINE  shift, and go to state 12

    stmt_ends  go to state 13


State 9

    8 module: MODULE IDENTIFIER . stmt_ends END MODULE
    9       | MODULE IDENTIFIER . stmt_ends functions_and_sub_list END MODULE

    END_OF_LINE  shift, and go to state 12

    stmt_ends  go to state 14


State 10

    0 $accept: root $end .

    $default  accept


State 11

    5 program_items_list_not_empty: program_items_list_not_empty program_item .

    $default  reduce using rule 5 (program_items_list_not_empty)


State 12

   38 stmt_ends: END_OF_LINE .

    $default  reduce using rule 38 (stmt_ends)


State 13

    7 program_item: IMPORTS IDENTIFIER stmt_ends .
   39 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 15

    $default  reduce using rule 7 (program_item)


State 14

    8 module: MODULE IDENTIFIER stmt_ends . END MODULE
    9       | MODULE IDENTIFIER stmt_ends . functions_and_sub_list END MODULE
   39 stmt_ends: stmt_ends . END_OF_LINE

    SUB          shift, and go to state 16
    END          shift, and go to state 17
    FUNCTION     shift, and go to state 18
    END_OF_LINE  shift, and go to state 15

    functions_and_sub_list  go to state 19
    function_or_sub         go to state 20
    function                go to state 21
    sub_bloc                go to state 22


State 15

   39 stmt_ends: stmt_ends END_OF_LINE .

    $default  reduce using rule 39 (stmt_ends)


State 16

   18 sub_bloc: SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   19         | SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER  shift, and go to state 23


State 17

    8 module: MODULE IDENTIFIER stmt_ends END . MODULE

    MODULE  shift, and go to state 24


State 18

   14 function: FUNCTION . IDENTIFIER arguments stmt_ends END FUNCTION
   15         | FUNCTION . IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION
   16         | FUNCTION . IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   17         | FUNCTION . IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION

    IDENTIFIER  shift, and go to state 25


State 19

    9 module: MODULE IDENTIFIER stmt_ends functions_and_sub_list . END MODULE
   11 functions_and_sub_list: functions_and_sub_list . stmt_ends function_or_sub

    END          shift, and go to state 26
    END_OF_LINE  shift, and go to state 12

    stmt_ends  go to state 27


State 20

   10 functions_and_sub_list: function_or_sub .

    $default  reduce using rule 10 (functions_and_sub_list)


State 21

   12 function_or_sub: function .

    $default  reduce using rule 12 (function_or_sub)


State 22

   13 function_or_sub: sub_bloc .

    $default  reduce using rule 13 (function_or_sub)


State 23

   18 sub_bloc: SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends END SUB
   19         | SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    '('  shift, and go to state 28


State 24

    8 module: MODULE IDENTIFIER stmt_ends END MODULE .

    $default  reduce using rule 8 (module)


State 25

   14 function: FUNCTION IDENTIFIER . arguments stmt_ends END FUNCTION
   15         | FUNCTION IDENTIFIER . arguments stmt_ends RETURN expr END FUNCTION
   16         | FUNCTION IDENTIFIER . arguments stmt_ends stmt_list END FUNCTION
   17         | FUNCTION IDENTIFIER . arguments stmt_ends stmt_list RETURN expr END FUNCTION

    '('  shift, and go to state 29

    arguments  go to state 30


State 26

    9 module: MODULE IDENTIFIER stmt_ends functions_and_sub_list END . MODULE

    MODULE  shift, and go to state 31


State 27

   11 functions_and_sub_list: functions_and_sub_list stmt_ends . function_or_sub
   39 stmt_ends: stmt_ends . END_OF_LINE

    SUB          shift, and go to state 16
    FUNCTION     shift, and go to state 18
    END_OF_LINE  shift, and go to state 15

    function_or_sub  go to state 32
    function         go to state 21
    sub_bloc         go to state 22


State 28

   18 sub_bloc: SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends END SUB
   19         | SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER  shift, and go to state 33

    $default  reduce using rule 20 (parameterlist_or_empty)

    parameterlist_or_empty      go to state 34
    parameterlist_with_type     go to state 35
    parameterlist_without_type  go to state 36
    parameter_with_type         go to state 37
    parameter_without_type      go to state 38


State 29

   88 arguments: '(' . expr_list ')'
   89          | '(' . ')'

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45
    ')'         shift, and go to state 46

    expr              go to state 47
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50
    expr_list         go to state 51


State 30

   14 function: FUNCTION IDENTIFIER arguments . stmt_ends END FUNCTION
   15         | FUNCTION IDENTIFIER arguments . stmt_ends RETURN expr END FUNCTION
   16         | FUNCTION IDENTIFIER arguments . stmt_ends stmt_list END FUNCTION
   17         | FUNCTION IDENTIFIER arguments . stmt_ends stmt_list RETURN expr END FUNCTION

    END_OF_LINE  shift, and go to state 12

    stmt_ends  go to state 52


State 31

    9 module: MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE .

    $default  reduce using rule 9 (module)


State 32

   11 functions_and_sub_list: functions_and_sub_list stmt_ends function_or_sub .

    $default  reduce using rule 11 (functions_and_sub_list)


State 33

   27 parameter_with_type: IDENTIFIER . AS basic_literal
   28                    | IDENTIFIER . AS basic_literal '(' ')'
   29 parameter_without_type: IDENTIFIER .

    AS  shift, and go to state 53

    $default  reduce using rule 29 (parameter_without_type)


State 34

   18 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends END SUB
   19         | SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends stmt_list END SUB

    ')'  shift, and go to state 54


State 35

   21 parameterlist_or_empty: parameterlist_with_type .
   24 parameterlist_with_type: parameterlist_with_type . ',' parameter_with_type

    ','  shift, and go to state 55

    $default  reduce using rule 21 (parameterlist_or_empty)


State 36

   22 parameterlist_or_empty: parameterlist_without_type .
   26 parameterlist_without_type: parameterlist_without_type . ',' parameter_without_type

    ','  shift, and go to state 56

    $default  reduce using rule 22 (parameterlist_or_empty)


State 37

   23 parameterlist_with_type: parameter_with_type .

    $default  reduce using rule 23 (parameterlist_with_type)


State 38

   25 parameterlist_without_type: parameter_without_type .

    $default  reduce using rule 25 (parameterlist_without_type)


State 39

   83 basic_literal: INT .

    $default  reduce using rule 83 (basic_literal)


State 40

   86 basic_literal: DOUBLE .

    $default  reduce using rule 86 (basic_literal)


State 41

   84 basic_literal: STRING .

    $default  reduce using rule 84 (basic_literal)


State 42

   85 basic_literal: BOOLEAN .

    $default  reduce using rule 85 (basic_literal)


State 43

   87 function_literal: IDENTIFIER . arguments

    '('  shift, and go to state 29

    arguments  go to state 57


State 44

   67 expr: '+' . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 58
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 45

   66 expr: '-' . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 59
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 46

   89 arguments: '(' ')' .

    $default  reduce using rule 89 (arguments)


State 47

   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr
   90 expr_list: expr .

    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    $default  reduce using rule 90 (expr_list)


State 48

   65 expr: operand .

    $default  reduce using rule 65 (expr)


State 49

   81 operand: basic_literal .

    $default  reduce using rule 81 (operand)


State 50

   82 operand: function_literal .

    $default  reduce using rule 82 (operand)


State 51

   88 arguments: '(' expr_list . ')'
   91 expr_list: expr_list . ',' expr

    ')'  shift, and go to state 73
    ','  shift, and go to state 74


State 52

   14 function: FUNCTION IDENTIFIER arguments stmt_ends . END FUNCTION
   15         | FUNCTION IDENTIFIER arguments stmt_ends . RETURN expr END FUNCTION
   16         | FUNCTION IDENTIFIER arguments stmt_ends . stmt_list END FUNCTION
   17         | FUNCTION IDENTIFIER arguments stmt_ends . stmt_list RETURN expr END FUNCTION
   39 stmt_ends: stmt_ends . END_OF_LINE

    IDENTIFIER   shift, and go to state 75
    ACCESS       shift, and go to state 76
    END          shift, and go to state 77
    CONST        shift, and go to state 78
    DIM          shift, and go to state 79
    WHILE        shift, and go to state 80
    IF           shift, and go to state 81
    SELECT       shift, and go to state 82
    RETURN       shift, and go to state 83
    END_OF_LINE  shift, and go to state 15

    stmt_list           go to state 84
    stmt                go to state 85
    multi_line_stmt     go to state 86
    decl_stmt           go to state 87
    assign_stmt         go to state 88
    while_stmt          go to state 89
    if_stmt_multi_line  go to state 90
    select_stmt         go to state 91


State 53

   27 parameter_with_type: IDENTIFIER AS . basic_literal
   28                    | IDENTIFIER AS . basic_literal '(' ')'

    INT      shift, and go to state 39
    DOUBLE   shift, and go to state 40
    STRING   shift, and go to state 41
    BOOLEAN  shift, and go to state 42

    basic_literal  go to state 92


State 54

   18 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends END SUB
   19         | SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends stmt_list END SUB

    END_OF_LINE  shift, and go to state 12

    stmt_ends  go to state 93


State 55

   24 parameterlist_with_type: parameterlist_with_type ',' . parameter_with_type

    IDENTIFIER  shift, and go to state 94

    parameter_with_type  go to state 95


State 56

   26 parameterlist_without_type: parameterlist_without_type ',' . parameter_without_type

    IDENTIFIER  shift, and go to state 96

    parameter_without_type  go to state 97


State 57

   87 function_literal: IDENTIFIER arguments .

    $default  reduce using rule 87 (function_literal)


State 58

   67 expr: '+' expr .
   68     | expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    $default  reduce using rule 67 (expr)


State 59

   66 expr: '-' expr .
   68     | expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    $default  reduce using rule 66 (expr)


State 60

   76 expr: expr '^' . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 98
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 61

   70 expr: expr '*' . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 99
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 62

   71 expr: expr '/' . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 100
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 63

   72 expr: expr INT_DIV . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 101
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 64

   68 expr: expr '+' . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 102
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 65

   69 expr: expr '-' . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 103
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 66

   73 expr: expr '=' . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 104
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 67

   77 expr: expr NOT_EQUAL . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 105
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 68

   78 expr: expr LESS_OR_EQUAL . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 106
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 69

   79 expr: expr MORE_OR_EQUAL . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 107
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 70

   75 expr: expr '>' . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 108
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 71

   74 expr: expr '<' . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 109
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 72

   80 expr: expr '&' . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 110
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 73

   88 arguments: '(' expr_list ')' .

    $default  reduce using rule 88 (arguments)


State 74

   91 expr_list: expr_list ',' . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 111
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 75

   51 assign_stmt: IDENTIFIER . '=' expr
   52            | IDENTIFIER . '=' IDENTIFIER

    '='  shift, and go to state 112


State 76

   40 decl_stmt: ACCESS . SUB var_name stmt END SUB

    SUB  shift, and go to state 113


State 77

   14 function: FUNCTION IDENTIFIER arguments stmt_ends END . FUNCTION

    FUNCTION  shift, and go to state 114


State 78

   41 decl_stmt: CONST . var_name AS basic_literal '=' END_OF_LINE expr
   42          | CONST . var_name AS basic_literal '=' expr

    IDENTIFIER  shift, and go to state 115

    var_name  go to state 116


State 79

   43 decl_stmt: DIM . var_name AS basic_literal '=' END_OF_LINE expr
   44          | DIM . var_name AS basic_literal '=' expr
   45          | DIM . var_name AS basic_literal
   46          | DIM . var_name '=' END_OF_LINE expr
   47          | DIM . var_name '=' expr
   48          | DIM . var_name

    IDENTIFIER  shift, and go to state 115

    var_name  go to state 117


State 80

   53 while_stmt: WHILE . expr stmt_ends stmt END WHILE

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 118
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 81

   54 if_stmt_multi_line: IF . expr THEN stmt_ends stmt ELSE stmt END IF
   55                   | IF . expr THEN stmt_ends stmt elseif_list ELSE stmt END IF

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 119
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 82

   58 select_stmt: SELECT . CASE expr stmt_ends case_list END SELECT

    CASE  shift, and go to state 120


State 83

   15 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN . expr END FUNCTION

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 121
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 84

   16 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list . END FUNCTION
   17         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list . RETURN expr END FUNCTION
   31 stmt_list: stmt_list . stmt

    IDENTIFIER  shift, and go to state 75
    ACCESS      shift, and go to state 76
    END         shift, and go to state 122
    CONST       shift, and go to state 78
    DIM         shift, and go to state 79
    WHILE       shift, and go to state 80
    IF          shift, and go to state 81
    SELECT      shift, and go to state 82
    RETURN      shift, and go to state 123

    stmt                go to state 124
    multi_line_stmt     go to state 86
    decl_stmt           go to state 87
    assign_stmt         go to state 88
    while_stmt          go to state 89
    if_stmt_multi_line  go to state 90
    select_stmt         go to state 91


State 85

   30 stmt_list: stmt .

    $default  reduce using rule 30 (stmt_list)


State 86

   32 stmt: multi_line_stmt .

    $default  reduce using rule 32 (stmt)


State 87

   33 multi_line_stmt: decl_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 12

    stmt_ends  go to state 125


State 88

   34 multi_line_stmt: assign_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 12

    stmt_ends  go to state 126


State 89

   35 multi_line_stmt: while_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 12

    stmt_ends  go to state 127


State 90

   37 multi_line_stmt: if_stmt_multi_line . stmt_ends

    END_OF_LINE  shift, and go to state 12

    stmt_ends  go to state 128


State 91

   36 multi_line_stmt: select_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 12

    stmt_ends  go to state 129


State 92

   27 parameter_with_type: IDENTIFIER AS basic_literal .
   28                    | IDENTIFIER AS basic_literal . '(' ')'

    '('  shift, and go to state 130

    $default  reduce using rule 27 (parameter_with_type)


State 93

   18 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . END SUB
   19         | SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . stmt_list END SUB
   39 stmt_ends: stmt_ends . END_OF_LINE

    IDENTIFIER   shift, and go to state 75
    ACCESS       shift, and go to state 76
    END          shift, and go to state 131
    CONST        shift, and go to state 78
    DIM          shift, and go to state 79
    WHILE        shift, and go to state 80
    IF           shift, and go to state 81
    SELECT       shift, and go to state 82
    END_OF_LINE  shift, and go to state 15

    stmt_list           go to state 132
    stmt                go to state 85
    multi_line_stmt     go to state 86
    decl_stmt           go to state 87
    assign_stmt         go to state 88
    while_stmt          go to state 89
    if_stmt_multi_line  go to state 90
    select_stmt         go to state 91


State 94

   27 parameter_with_type: IDENTIFIER . AS basic_literal
   28                    | IDENTIFIER . AS basic_literal '(' ')'

    AS  shift, and go to state 53


State 95

   24 parameterlist_with_type: parameterlist_with_type ',' parameter_with_type .

    $default  reduce using rule 24 (parameterlist_with_type)


State 96

   29 parameter_without_type: IDENTIFIER .

    $default  reduce using rule 29 (parameter_without_type)


State 97

   26 parameterlist_without_type: parameterlist_without_type ',' parameter_without_type .

    $default  reduce using rule 26 (parameterlist_without_type)


State 98

   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   76     | expr '^' expr .
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    $default  reduce using rule 76 (expr)


State 99

   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   70     | expr '*' expr .
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    $default  reduce using rule 70 (expr)


State 100

   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   71     | expr '/' expr .
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    $default  reduce using rule 71 (expr)


State 101

   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   72     | expr INT_DIV expr .
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    $default  reduce using rule 72 (expr)


State 102

   68 expr: expr . '+' expr
   68     | expr '+' expr .
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    $default  reduce using rule 68 (expr)


State 103

   68 expr: expr . '+' expr
   69     | expr . '-' expr
   69     | expr '-' expr .
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    $default  reduce using rule 69 (expr)


State 104

   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   73     | expr '=' expr .
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '&'  shift, and go to state 72

    $default  reduce using rule 73 (expr)


State 105

   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   77     | expr NOT_EQUAL expr .
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '&'  shift, and go to state 72

    $default  reduce using rule 77 (expr)


State 106

   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   78     | expr LESS_OR_EQUAL expr .
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '&'  shift, and go to state 72

    $default  reduce using rule 78 (expr)


State 107

   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   79     | expr MORE_OR_EQUAL expr .
   80     | expr . '&' expr

    '&'  shift, and go to state 72

    $default  reduce using rule 79 (expr)


State 108

   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   75     | expr '>' expr .
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '&'  shift, and go to state 72

    $default  reduce using rule 75 (expr)


State 109

   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   74     | expr '<' expr .
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '&'  shift, and go to state 72

    $default  reduce using rule 74 (expr)


State 110

   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr
   80     | expr '&' expr .

    $default  reduce using rule 80 (expr)


State 111

   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr
   91 expr_list: expr_list ',' expr .

    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    $default  reduce using rule 91 (expr_list)


State 112

   51 assign_stmt: IDENTIFIER '=' . expr
   52            | IDENTIFIER '=' . IDENTIFIER

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 133
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 134
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 113

   40 decl_stmt: ACCESS SUB . var_name stmt END SUB

    IDENTIFIER  shift, and go to state 115

    var_name  go to state 135


State 114

   14 function: FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION .

    $default  reduce using rule 14 (function)


State 115

   49 var_name: IDENTIFIER . '(' expr ')'
   50         | IDENTIFIER .

    '('  shift, and go to state 136

    $default  reduce using rule 50 (var_name)


State 116

   41 decl_stmt: CONST var_name . AS basic_literal '=' END_OF_LINE expr
   42          | CONST var_name . AS basic_literal '=' expr

    AS  shift, and go to state 137


State 117

   43 decl_stmt: DIM var_name . AS basic_literal '=' END_OF_LINE expr
   44          | DIM var_name . AS basic_literal '=' expr
   45          | DIM var_name . AS basic_literal
   46          | DIM var_name . '=' END_OF_LINE expr
   47          | DIM var_name . '=' expr
   48          | DIM var_name .

    AS   shift, and go to state 138
    '='  shift, and go to state 139

    $default  reduce using rule 48 (decl_stmt)


State 118

   53 while_stmt: WHILE expr . stmt_ends stmt END WHILE
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    END_OF_LINE    shift, and go to state 12
    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    stmt_ends  go to state 140


State 119

   54 if_stmt_multi_line: IF expr . THEN stmt_ends stmt ELSE stmt END IF
   55                   | IF expr . THEN stmt_ends stmt elseif_list ELSE stmt END IF
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    THEN           shift, and go to state 141
    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72


State 120

   58 select_stmt: SELECT CASE . expr stmt_ends case_list END SELECT

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 142
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 121

   15 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr . END FUNCTION
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    END            shift, and go to state 143
    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72


State 122

   16 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list END . FUNCTION

    FUNCTION  shift, and go to state 144


State 123

   17 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN . expr END FUNCTION

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 145
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 124

   31 stmt_list: stmt_list stmt .

    $default  reduce using rule 31 (stmt_list)


State 125

   33 multi_line_stmt: decl_stmt stmt_ends .
   39 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 15

    $default  reduce using rule 33 (multi_line_stmt)


State 126

   34 multi_line_stmt: assign_stmt stmt_ends .
   39 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 15

    $default  reduce using rule 34 (multi_line_stmt)


State 127

   35 multi_line_stmt: while_stmt stmt_ends .
   39 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 15

    $default  reduce using rule 35 (multi_line_stmt)


State 128

   37 multi_line_stmt: if_stmt_multi_line stmt_ends .
   39 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 15

    $default  reduce using rule 37 (multi_line_stmt)


State 129

   36 multi_line_stmt: select_stmt stmt_ends .
   39 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 15

    $default  reduce using rule 36 (multi_line_stmt)


State 130

   28 parameter_with_type: IDENTIFIER AS basic_literal '(' . ')'

    ')'  shift, and go to state 146


State 131

   18 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END . SUB

    SUB  shift, and go to state 147


State 132

   19 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list . END SUB
   31 stmt_list: stmt_list . stmt

    IDENTIFIER  shift, and go to state 75
    ACCESS      shift, and go to state 76
    END         shift, and go to state 148
    CONST       shift, and go to state 78
    DIM         shift, and go to state 79
    WHILE       shift, and go to state 80
    IF          shift, and go to state 81
    SELECT      shift, and go to state 82

    stmt                go to state 124
    multi_line_stmt     go to state 86
    decl_stmt           go to state 87
    assign_stmt         go to state 88
    while_stmt          go to state 89
    if_stmt_multi_line  go to state 90
    select_stmt         go to state 91


State 133

   52 assign_stmt: IDENTIFIER '=' IDENTIFIER .
   87 function_literal: IDENTIFIER . arguments

    '('  shift, and go to state 29

    $default  reduce using rule 52 (assign_stmt)

    arguments  go to state 57


State 134

   51 assign_stmt: IDENTIFIER '=' expr .
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    $default  reduce using rule 51 (assign_stmt)


State 135

   40 decl_stmt: ACCESS SUB var_name . stmt END SUB

    IDENTIFIER  shift, and go to state 75
    ACCESS      shift, and go to state 76
    CONST       shift, and go to state 78
    DIM         shift, and go to state 79
    WHILE       shift, and go to state 80
    IF          shift, and go to state 81
    SELECT      shift, and go to state 82

    stmt                go to state 149
    multi_line_stmt     go to state 86
    decl_stmt           go to state 87
    assign_stmt         go to state 88
    while_stmt          go to state 89
    if_stmt_multi_line  go to state 90
    select_stmt         go to state 91


State 136

   49 var_name: IDENTIFIER '(' . expr ')'

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 150
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 137

   41 decl_stmt: CONST var_name AS . basic_literal '=' END_OF_LINE expr
   42          | CONST var_name AS . basic_literal '=' expr

    INT      shift, and go to state 39
    DOUBLE   shift, and go to state 40
    STRING   shift, and go to state 41
    BOOLEAN  shift, and go to state 42

    basic_literal  go to state 151


State 138

   43 decl_stmt: DIM var_name AS . basic_literal '=' END_OF_LINE expr
   44          | DIM var_name AS . basic_literal '=' expr
   45          | DIM var_name AS . basic_literal

    INT      shift, and go to state 39
    DOUBLE   shift, and go to state 40
    STRING   shift, and go to state 41
    BOOLEAN  shift, and go to state 42

    basic_literal  go to state 152


State 139

   46 decl_stmt: DIM var_name '=' . END_OF_LINE expr
   47          | DIM var_name '=' . expr

    INT          shift, and go to state 39
    DOUBLE       shift, and go to state 40
    STRING       shift, and go to state 41
    BOOLEAN      shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    END_OF_LINE  shift, and go to state 153
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45

    expr              go to state 154
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 140

   39 stmt_ends: stmt_ends . END_OF_LINE
   53 while_stmt: WHILE expr stmt_ends . stmt END WHILE

    IDENTIFIER   shift, and go to state 75
    ACCESS       shift, and go to state 76
    CONST        shift, and go to state 78
    DIM          shift, and go to state 79
    WHILE        shift, and go to state 80
    IF           shift, and go to state 81
    SELECT       shift, and go to state 82
    END_OF_LINE  shift, and go to state 15

    stmt                go to state 155
    multi_line_stmt     go to state 86
    decl_stmt           go to state 87
    assign_stmt         go to state 88
    while_stmt          go to state 89
    if_stmt_multi_line  go to state 90
    select_stmt         go to state 91


State 141

   54 if_stmt_multi_line: IF expr THEN . stmt_ends stmt ELSE stmt END IF
   55                   | IF expr THEN . stmt_ends stmt elseif_list ELSE stmt END IF

    END_OF_LINE  shift, and go to state 12

    stmt_ends  go to state 156


State 142

   58 select_stmt: SELECT CASE expr . stmt_ends case_list END SELECT
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    END_OF_LINE    shift, and go to state 12
    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    stmt_ends  go to state 157


State 143

   15 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END . FUNCTION

    FUNCTION  shift, and go to state 158


State 144

   16 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION .

    $default  reduce using rule 16 (function)


State 145

   17 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr . END FUNCTION
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    END            shift, and go to state 159
    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72


State 146

   28 parameter_with_type: IDENTIFIER AS basic_literal '(' ')' .

    $default  reduce using rule 28 (parameter_with_type)


State 147

   18 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB .

    $default  reduce using rule 18 (sub_bloc)


State 148

   19 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END . SUB

    SUB  shift, and go to state 160


State 149

   40 decl_stmt: ACCESS SUB var_name stmt . END SUB

    END  shift, and go to state 161


State 150

   49 var_name: IDENTIFIER '(' expr . ')'
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72
    ')'            shift, and go to state 162


State 151

   41 decl_stmt: CONST var_name AS basic_literal . '=' END_OF_LINE expr
   42          | CONST var_name AS basic_literal . '=' expr

    '='  shift, and go to state 163


State 152

   43 decl_stmt: DIM var_name AS basic_literal . '=' END_OF_LINE expr
   44          | DIM var_name AS basic_literal . '=' expr
   45          | DIM var_name AS basic_literal .

    '='  shift, and go to state 164

    $default  reduce using rule 45 (decl_stmt)


State 153

   46 decl_stmt: DIM var_name '=' END_OF_LINE . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 165
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 154

   47 decl_stmt: DIM var_name '=' expr .
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    $default  reduce using rule 47 (decl_stmt)


State 155

   53 while_stmt: WHILE expr stmt_ends stmt . END WHILE

    END  shift, and go to state 166


State 156

   39 stmt_ends: stmt_ends . END_OF_LINE
   54 if_stmt_multi_line: IF expr THEN stmt_ends . stmt ELSE stmt END IF
   55                   | IF expr THEN stmt_ends . stmt elseif_list ELSE stmt END IF

    IDENTIFIER   shift, and go to state 75
    ACCESS       shift, and go to state 76
    CONST        shift, and go to state 78
    DIM          shift, and go to state 79
    WHILE        shift, and go to state 80
    IF           shift, and go to state 81
    SELECT       shift, and go to state 82
    END_OF_LINE  shift, and go to state 15

    stmt                go to state 167
    multi_line_stmt     go to state 86
    decl_stmt           go to state 87
    assign_stmt         go to state 88
    while_stmt          go to state 89
    if_stmt_multi_line  go to state 90
    select_stmt         go to state 91


State 157

   39 stmt_ends: stmt_ends . END_OF_LINE
   58 select_stmt: SELECT CASE expr stmt_ends . case_list END SELECT

    CASE         shift, and go to state 168
    END_OF_LINE  shift, and go to state 15

    case_list  go to state 169
    case_stmt  go to state 170


State 158

   15 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION .

    $default  reduce using rule 15 (function)


State 159

   17 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END . FUNCTION

    FUNCTION  shift, and go to state 171


State 160

   19 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB .

    $default  reduce using rule 19 (sub_bloc)


State 161

   40 decl_stmt: ACCESS SUB var_name stmt END . SUB

    SUB  shift, and go to state 172


State 162

   49 var_name: IDENTIFIER '(' expr ')' .

    $default  reduce using rule 49 (var_name)


State 163

   41 decl_stmt: CONST var_name AS basic_literal '=' . END_OF_LINE expr
   42          | CONST var_name AS basic_literal '=' . expr

    INT          shift, and go to state 39
    DOUBLE       shift, and go to state 40
    STRING       shift, and go to state 41
    BOOLEAN      shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    END_OF_LINE  shift, and go to state 173
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45

    expr              go to state 174
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 164

   43 decl_stmt: DIM var_name AS basic_literal '=' . END_OF_LINE expr
   44          | DIM var_name AS basic_literal '=' . expr

    INT          shift, and go to state 39
    DOUBLE       shift, and go to state 40
    STRING       shift, and go to state 41
    BOOLEAN      shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    END_OF_LINE  shift, and go to state 175
    '+'          shift, and go to state 44
    '-'          shift, and go to state 45

    expr              go to state 176
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 165

   46 decl_stmt: DIM var_name '=' END_OF_LINE expr .
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    $default  reduce using rule 46 (decl_stmt)


State 166

   53 while_stmt: WHILE expr stmt_ends stmt END . WHILE

    WHILE  shift, and go to state 177


State 167

   54 if_stmt_multi_line: IF expr THEN stmt_ends stmt . ELSE stmt END IF
   55                   | IF expr THEN stmt_ends stmt . elseif_list ELSE stmt END IF

    ELSE    shift, and go to state 178
    ELSEIF  shift, and go to state 179

    elseif_list  go to state 180


State 168

   61 case_stmt: CASE . expr stmt
   62          | CASE . IS expr stmt
   63          | CASE . expr TO expr stmt
   64          | CASE . ELSE stmt

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    ELSE        shift, and go to state 181
    IS          shift, and go to state 182
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 183
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 169

   58 select_stmt: SELECT CASE expr stmt_ends case_list . END SELECT
   60 case_list: case_list . case_stmt

    END   shift, and go to state 184
    CASE  shift, and go to state 168

    case_stmt  go to state 185


State 170

   59 case_list: case_stmt .

    $default  reduce using rule 59 (case_list)


State 171

   17 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION .

    $default  reduce using rule 17 (function)


State 172

   40 decl_stmt: ACCESS SUB var_name stmt END SUB .

    $default  reduce using rule 40 (decl_stmt)


State 173

   41 decl_stmt: CONST var_name AS basic_literal '=' END_OF_LINE . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 186
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 174

   42 decl_stmt: CONST var_name AS basic_literal '=' expr .
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    $default  reduce using rule 42 (decl_stmt)


State 175

   43 decl_stmt: DIM var_name AS basic_literal '=' END_OF_LINE . expr

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 187
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 176

   44 decl_stmt: DIM var_name AS basic_literal '=' expr .
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    $default  reduce using rule 44 (decl_stmt)


State 177

   53 while_stmt: WHILE expr stmt_ends stmt END WHILE .

    $default  reduce using rule 53 (while_stmt)


State 178

   54 if_stmt_multi_line: IF expr THEN stmt_ends stmt ELSE . stmt END IF

    IDENTIFIER  shift, and go to state 75
    ACCESS      shift, and go to state 76
    CONST       shift, and go to state 78
    DIM         shift, and go to state 79
    WHILE       shift, and go to state 80
    IF          shift, and go to state 81
    SELECT      shift, and go to state 82

    stmt                go to state 188
    multi_line_stmt     go to state 86
    decl_stmt           go to state 87
    assign_stmt         go to state 88
    while_stmt          go to state 89
    if_stmt_multi_line  go to state 90
    select_stmt         go to state 91


State 179

   56 elseif_list: ELSEIF . expr THEN stmt

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 189
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 180

   55 if_stmt_multi_line: IF expr THEN stmt_ends stmt elseif_list . ELSE stmt END IF
   57 elseif_list: elseif_list . ELSEIF expr THEN stmt

    ELSE    shift, and go to state 190
    ELSEIF  shift, and go to state 191


State 181

   64 case_stmt: CASE ELSE . stmt

    IDENTIFIER  shift, and go to state 75
    ACCESS      shift, and go to state 76
    CONST       shift, and go to state 78
    DIM         shift, and go to state 79
    WHILE       shift, and go to state 80
    IF          shift, and go to state 81
    SELECT      shift, and go to state 82

    stmt                go to state 192
    multi_line_stmt     go to state 86
    decl_stmt           go to state 87
    assign_stmt         go to state 88
    while_stmt          go to state 89
    if_stmt_multi_line  go to state 90
    select_stmt         go to state 91


State 182

   62 case_stmt: CASE IS . expr stmt

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 193
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 183

   61 case_stmt: CASE expr . stmt
   63          | CASE expr . TO expr stmt
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    IDENTIFIER     shift, and go to state 75
    ACCESS         shift, and go to state 76
    CONST          shift, and go to state 78
    DIM            shift, and go to state 79
    WHILE          shift, and go to state 80
    IF             shift, and go to state 81
    SELECT         shift, and go to state 82
    TO             shift, and go to state 194
    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    stmt                go to state 195
    multi_line_stmt     go to state 86
    decl_stmt           go to state 87
    assign_stmt         go to state 88
    while_stmt          go to state 89
    if_stmt_multi_line  go to state 90
    select_stmt         go to state 91


State 184

   58 select_stmt: SELECT CASE expr stmt_ends case_list END . SELECT

    SELECT  shift, and go to state 196


State 185

   60 case_list: case_list case_stmt .

    $default  reduce using rule 60 (case_list)


State 186

   41 decl_stmt: CONST var_name AS basic_literal '=' END_OF_LINE expr .
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    $default  reduce using rule 41 (decl_stmt)


State 187

   43 decl_stmt: DIM var_name AS basic_literal '=' END_OF_LINE expr .
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    $default  reduce using rule 43 (decl_stmt)


State 188

   54 if_stmt_multi_line: IF expr THEN stmt_ends stmt ELSE stmt . END IF

    END  shift, and go to state 197


State 189

   56 elseif_list: ELSEIF expr . THEN stmt
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    THEN           shift, and go to state 198
    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72


State 190

   55 if_stmt_multi_line: IF expr THEN stmt_ends stmt elseif_list ELSE . stmt END IF

    IDENTIFIER  shift, and go to state 75
    ACCESS      shift, and go to state 76
    CONST       shift, and go to state 78
    DIM         shift, and go to state 79
    WHILE       shift, and go to state 80
    IF          shift, and go to state 81
    SELECT      shift, and go to state 82

    stmt                go to state 199
    multi_line_stmt     go to state 86
    decl_stmt           go to state 87
    assign_stmt         go to state 88
    while_stmt          go to state 89
    if_stmt_multi_line  go to state 90
    select_stmt         go to state 91


State 191

   57 elseif_list: elseif_list ELSEIF . expr THEN stmt

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 200
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 192

   64 case_stmt: CASE ELSE stmt .

    $default  reduce using rule 64 (case_stmt)


State 193

   62 case_stmt: CASE IS expr . stmt
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    IDENTIFIER     shift, and go to state 75
    ACCESS         shift, and go to state 76
    CONST          shift, and go to state 78
    DIM            shift, and go to state 79
    WHILE          shift, and go to state 80
    IF             shift, and go to state 81
    SELECT         shift, and go to state 82
    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    stmt                go to state 201
    multi_line_stmt     go to state 86
    decl_stmt           go to state 87
    assign_stmt         go to state 88
    while_stmt          go to state 89
    if_stmt_multi_line  go to state 90
    select_stmt         go to state 91


State 194

   63 case_stmt: CASE expr TO . expr stmt

    INT         shift, and go to state 39
    DOUBLE      shift, and go to state 40
    STRING      shift, and go to state 41
    BOOLEAN     shift, and go to state 42
    IDENTIFIER  shift, and go to state 43
    '+'         shift, and go to state 44
    '-'         shift, and go to state 45

    expr              go to state 202
    operand           go to state 48
    basic_literal     go to state 49
    function_literal  go to state 50


State 195

   61 case_stmt: CASE expr stmt .

    $default  reduce using rule 61 (case_stmt)


State 196

   58 select_stmt: SELECT CASE expr stmt_ends case_list END SELECT .

    $default  reduce using rule 58 (select_stmt)


State 197

   54 if_stmt_multi_line: IF expr THEN stmt_ends stmt ELSE stmt END . IF

    IF  shift, and go to state 203


State 198

   56 elseif_list: ELSEIF expr THEN . stmt

    IDENTIFIER  shift, and go to state 75
    ACCESS      shift, and go to state 76
    CONST       shift, and go to state 78
    DIM         shift, and go to state 79
    WHILE       shift, and go to state 80
    IF          shift, and go to state 81
    SELECT      shift, and go to state 82

    stmt                go to state 204
    multi_line_stmt     go to state 86
    decl_stmt           go to state 87
    assign_stmt         go to state 88
    while_stmt          go to state 89
    if_stmt_multi_line  go to state 90
    select_stmt         go to state 91


State 199

   55 if_stmt_multi_line: IF expr THEN stmt_ends stmt elseif_list ELSE stmt . END IF

    END  shift, and go to state 205


State 200

   57 elseif_list: elseif_list ELSEIF expr . THEN stmt
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    THEN           shift, and go to state 206
    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72


State 201

   62 case_stmt: CASE IS expr stmt .

    $default  reduce using rule 62 (case_stmt)


State 202

   63 case_stmt: CASE expr TO expr . stmt
   68 expr: expr . '+' expr
   69     | expr . '-' expr
   70     | expr . '*' expr
   71     | expr . '/' expr
   72     | expr . INT_DIV expr
   73     | expr . '=' expr
   74     | expr . '<' expr
   75     | expr . '>' expr
   76     | expr . '^' expr
   77     | expr . NOT_EQUAL expr
   78     | expr . LESS_OR_EQUAL expr
   79     | expr . MORE_OR_EQUAL expr
   80     | expr . '&' expr

    IDENTIFIER     shift, and go to state 75
    ACCESS         shift, and go to state 76
    CONST          shift, and go to state 78
    DIM            shift, and go to state 79
    WHILE          shift, and go to state 80
    IF             shift, and go to state 81
    SELECT         shift, and go to state 82
    '^'            shift, and go to state 60
    '*'            shift, and go to state 61
    '/'            shift, and go to state 62
    INT_DIV        shift, and go to state 63
    '+'            shift, and go to state 64
    '-'            shift, and go to state 65
    '='            shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    LESS_OR_EQUAL  shift, and go to state 68
    MORE_OR_EQUAL  shift, and go to state 69
    '>'            shift, and go to state 70
    '<'            shift, and go to state 71
    '&'            shift, and go to state 72

    stmt                go to state 207
    multi_line_stmt     go to state 86
    decl_stmt           go to state 87
    assign_stmt         go to state 88
    while_stmt          go to state 89
    if_stmt_multi_line  go to state 90
    select_stmt         go to state 91


State 203

   54 if_stmt_multi_line: IF expr THEN stmt_ends stmt ELSE stmt END IF .

    $default  reduce using rule 54 (if_stmt_multi_line)


State 204

   56 elseif_list: ELSEIF expr THEN stmt .

    $default  reduce using rule 56 (elseif_list)


State 205

   55 if_stmt_multi_line: IF expr THEN stmt_ends stmt elseif_list ELSE stmt END . IF

    IF  shift, and go to state 208


State 206

   57 elseif_list: elseif_list ELSEIF expr THEN . stmt

    IDENTIFIER  shift, and go to state 75
    ACCESS      shift, and go to state 76
    CONST       shift, and go to state 78
    DIM         shift, and go to state 79
    WHILE       shift, and go to state 80
    IF          shift, and go to state 81
    SELECT      shift, and go to state 82

    stmt                go to state 209
    multi_line_stmt     go to state 86
    decl_stmt           go to state 87
    assign_stmt         go to state 88
    while_stmt          go to state 89
    if_stmt_multi_line  go to state 90
    select_stmt         go to state 91


State 207

   63 case_stmt: CASE expr TO expr stmt .

    $default  reduce using rule 63 (case_stmt)


State 208

   55 if_stmt_multi_line: IF expr THEN stmt_ends stmt elseif_list ELSE stmt END IF .

    $default  reduce using rule 55 (if_stmt_multi_line)


State 209

   57 elseif_list: elseif_list ELSEIF expr THEN stmt .

    $default  reduce using rule 57 (elseif_list)
