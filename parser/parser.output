Terminals unused in grammar

    ENDL
    OF
    ASSIGN_CONSTRUCT
    ASSIGN_MULT
    ASSIGN_ORD_DIV
    ASSIGN_INT_DIV
    ASSIGN_ADD
    ASSIGN_SUB
    ASSIGN_LSHIFT
    ASSIGN_RSHIFT
    ASSIGN_CONCAT


Grammar

    0 $accept: root $end

    1 root: program_items_list

    2 program_items_list: %empty
    3                   | program_items_list_not_empty

    4 program_items_list_not_empty: program_item
    5                             | program_items_list_not_empty program_item

    6 program_item: module
    7             | IMPORTS IDENTIFIER stmt_ends

    8 module: MODULE IDENTIFIER stmt_ends END MODULE
    9       | MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE
   10       | access MODULE IDENTIFIER stmt_ends END MODULE
   11       | access MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE

   12 functions_and_sub_list: function_or_sub
   13                       | functions_and_sub_list stmt_ends function_or_sub

   14 function_or_sub: function
   15                | sub_bloc

   16 function: FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION
   17         | FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION
   18         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   19         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION
   20         | access FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION
   21         | access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION
   22         | access FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   23         | access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   25         | SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB
   26         | access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   27         | access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

   28 parameterlist_or_empty: %empty
   29                       | parameterlist_with_type
   30                       | END_OF_LINE parameterlist_with_type END_OF_LINE
   31                       | END_OF_LINE parameterlist_with_type
   32                       | parameterlist_with_type END_OF_LINE
   33                       | parameterlist_without_type
   34                       | END_OF_LINE parameterlist_without_type END_OF_LINE
   35                       | parameterlist_without_type END_OF_LINE
   36                       | END_OF_LINE parameterlist_without_type

   37 parameterlist_with_type: parameter_with_type
   38                        | parameterlist_with_type ',' parameter_with_type
   39                        | parameterlist_with_type ',' END_OF_LINE parameter_with_type

   40 parameterlist_without_type: parameter_without_type
   41                           | parameterlist_without_type ',' parameter_without_type
   42                           | parameterlist_without_type ',' END_OF_LINE parameter_without_type

   43 parameter_with_type: IDENTIFIER AS basic_literal
   44                    | IDENTIFIER AS basic_literal '(' ')'

   45 parameter_without_type: IDENTIFIER

   46 stmt_list: stmt
   47          | stmt_list stmt

   48 stmt: multi_line_stmt
   49     | single_line_stmt stmt_ends

   50 single_line_stmt: if_stmt_single_line
   51                 | decl_stmt_single_line
   52                 | function_call_singleline
   53                 | assign_stmt_singleline

   54 multi_line_stmt: decl_stmt stmt_ends
   55                | assign_stmt_multiline stmt_ends
   56                | while_stmt stmt_ends
   57                | do_loop_stmt
   58                | for_loop_stmt
   59                | for_each_loop_stmt
   60                | select_stmt stmt_ends
   61                | if_stmt_multi_line stmt_ends
   62                | function_call_multiline

   63 stmt_ends: END_OF_LINE
   64          | stmt_ends END_OF_LINE

   65 decl_stmt: CONST var_name AS basic_literal '=' END_OF_LINE expr
   66          | DIM var_name AS basic_literal '=' END_OF_LINE expr
   67          | DIM var_name '=' END_OF_LINE expr

   68 decl_stmt_single_line: access SUB var_name stmt_list END SUB
   69                      | CONST var_name AS basic_literal '=' expr
   70                      | DIM var_name AS basic_literal '=' expr
   71                      | DIM var_name AS basic_literal
   72                      | DIM var_name '=' expr
   73                      | DIM var_name
   74                      | DIM var_name '=' NEW basic_literal '(' ')' '{' expr_list '}'

   75 var_name: IDENTIFIER '(' expr ')'
   76         | IDENTIFIER

   77 access: PUBLIC
   78       | PROTECTED
   79       | FRIEND
   80       | PRIVATE
   81       | PROTECTED FRIEND
   82       | PRIVATE FRIEND

   83 assign_stmt_singleline: IDENTIFIER '=' expr
   84                       | IDENTIFIER '=' IDENTIFIER
   85                       | IDENTIFIER '=' function_call_singleline
   86                       | function_call_singleline '=' expr
   87                       | function_call_singleline '=' IDENTIFIER
   88                       | function_call_singleline '=' function_call_singleline

   89 assign_stmt_multiline: IDENTIFIER '=' function_call_multiline
   90                      | function_call_multiline '=' function_call_multiline

   91 while_stmt: WHILE expr stmt_ends stmt_list END WHILE

   92 do_loop_stmt: DO do_loop_condition stmt_ends stmt_list LOOP
   93             | DO stmt_ends stmt_list LOOP do_loop_condition

   94 do_loop_condition: UNTIL expr
   95                  | WHILE expr

   96 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal stmt_ends stmt_list NEXT
   97              | FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal STEP basic_literal stmt_ends stmt_list NEXT

   98 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

   99 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list END IF
  100                   | IF expr THEN stmt_ends stmt_list ELSE stmt_list END IF
  101                   | IF expr THEN stmt_ends stmt_list elseif_list END IF
  102                   | IF expr THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF

  103 elseif_list: ELSEIF expr THEN stmt_list
  104            | elseif_list ELSEIF expr THEN stmt_list

  105 if_stmt_single_line: IF expr THEN single_line_stmt
  106                    | IF expr THEN single_line_stmt ELSE single_line_stmt

  107 select_stmt: SELECT CASE expr stmt_ends case_list END SELECT

  108 case_list: case_stmt
  109          | case_list case_stmt

  110 case_stmt: CASE expr stmt_ends stmt_list
  111          | CASE IS expr stmt_ends stmt_list
  112          | CASE expr TO expr stmt_ends stmt_list
  113          | CASE ELSE stmt_ends stmt_list

  114 function_call_multiline: IDENTIFIER arguments_multiline

  115 function_call_singleline: IDENTIFIER arguments_singleline

  116 expr: basic_literal
  117     | '-' expr
  118     | '+' expr
  119     | expr '+' expr
  120     | expr '-' expr
  121     | expr '*' expr
  122     | expr '/' expr
  123     | expr INT_DIV expr
  124     | expr '=' expr
  125     | expr '<' expr
  126     | expr '>' expr
  127     | expr '^' expr
  128     | expr NOT_EQUAL expr
  129     | expr LESS_OR_EQUAL expr
  130     | expr MORE_OR_EQUAL expr
  131     | expr '&' expr

  132 basic_literal: INT
  133              | STRING
  134              | BOOLEAN
  135              | DOUBLE

  136 arguments_multiline: '(' END_OF_LINE expr_list ')'
  137                    | '(' END_OF_LINE expr_list END_OF_LINE ')'
  138                    | '(' expr_list END_OF_LINE ')'

  139 arguments_singleline: '(' expr_list ')'
  140                     | '(' ')'

  141 arguments: arguments_multiline
  142          | arguments_singleline

  143 expr_list: expr
  144          | expr_list ',' expr


Terminals, with rules where they appear

    $end (0) 0
    '&' (38) 131
    '(' (40) 24 25 26 27 44 74 75 136 137 138 139 140
    ')' (41) 24 25 26 27 44 74 75 136 137 138 139 140
    '*' (42) 121
    '+' (43) 118 119
    ',' (44) 38 39 41 42 144
    '-' (45) 117 120
    '/' (47) 122
    '<' (60) 125
    '=' (61) 65 66 67 69 70 72 74 83 84 85 86 87 88 89 90 96 97 124
    '>' (62) 126
    '^' (94) 127
    '{' (123) 74
    '}' (125) 74
    error (256)
    INT <int_val> (258) 132
    DOUBLE <double_val> (259) 135
    STRING <str_val> (260) 133
    BOOLEAN <bool_val> (261) 134
    IDENTIFIER <id_name> (262) 7 8 9 10 11 16 17 18 19 20 21 22 23 24 25 26 27 43 44 45 75 76 83 84 85 87 89 96 97 98 114 115
    ENDL (263)
    SUB (264) 24 25 26 27 68
    END (265) 8 9 10 11 16 17 18 19 20 21 22 23 24 25 26 27 68 91 99 100 101 102 107
    CONST (266) 65 69
    DIM (267) 66 67 70 71 72 73 74
    AS (268) 43 44 65 66 69 70 71 96 97 98
    WHILE (269) 91 95
    IF (270) 99 100 101 102 105 106
    ELSEIF (271) 103 104
    SELECT (272) 107
    CASE (273) 107 110 111 112 113
    IS (274) 111
    TO (275) 96 97 112
    IMPORTS (276) 7
    MODULE (277) 8 9 10 11
    FUNCTION (278) 16 17 18 19 20 21 22 23
    RETURN (279) 17 19 21 23
    DO (280) 92 93
    LOOP (281) 92 93
    UNTIL (282) 94
    FOR (283) 96 97 98
    NEXT (284) 96 97 98
    STEP (285) 97
    OF (286)
    IN (287) 98
    EACH (288) 98
    NEW (289) 74
    END_OF_LINE (290) 30 31 32 34 35 36 39 42 63 64 65 66 67 136 137 138
    UNARY_MINUS (291)
    UNARY_PLUS (292)
    ASSIGN_CONSTRUCT (293)
    ASSIGN_MULT (294)
    ASSIGN_ORD_DIV (295)
    ASSIGN_INT_DIV (296)
    ASSIGN_ADD (297)
    ASSIGN_SUB (298)
    ASSIGN_LSHIFT (299)
    ASSIGN_RSHIFT (300)
    ASSIGN_CONCAT (301)
    PRIVATE (302) 80 82
    PROTECTED (303) 78 81
    PUBLIC (304) 77
    FRIEND (305) 79 81 82
    INT_DIV (306) 123
    NOT_EQUAL (307) 128
    LESS_OR_EQUAL (308) 129
    MORE_OR_EQUAL (309) 130
    THEN (310) 99 100 101 102 103 104 105 106
    ELSE (311) 100 102 106 113


Nonterminals, with rules where they appear

    $accept (71)
        on left: 0
    root (72)
        on left: 1
        on right: 0
    program_items_list (73)
        on left: 2 3
        on right: 1
    program_items_list_not_empty (74)
        on left: 4 5
        on right: 3 5
    program_item (75)
        on left: 6 7
        on right: 4 5
    module (76)
        on left: 8 9 10 11
        on right: 6
    functions_and_sub_list (77)
        on left: 12 13
        on right: 9 11 13
    function_or_sub (78)
        on left: 14 15
        on right: 12 13
    function (79)
        on left: 16 17 18 19 20 21 22 23
        on right: 14
    sub_bloc (80)
        on left: 24 25 26 27
        on right: 15
    parameterlist_or_empty (81)
        on left: 28 29 30 31 32 33 34 35 36
        on right: 24 25 26 27
    parameterlist_with_type (82)
        on left: 37 38 39
        on right: 29 30 31 32 38 39
    parameterlist_without_type (83)
        on left: 40 41 42
        on right: 33 34 35 36 41 42
    parameter_with_type (84)
        on left: 43 44
        on right: 37 38 39
    parameter_without_type (85)
        on left: 45
        on right: 40 41 42
    stmt_list (86)
        on left: 46 47
        on right: 18 19 22 23 25 27 47 68 91 92 93 96 97 98 99 100 101 102 103 104 110 111 112 113
    stmt (87)
        on left: 48 49
        on right: 46 47
    single_line_stmt (88)
        on left: 50 51 52 53
        on right: 49 105 106
    multi_line_stmt (89)
        on left: 54 55 56 57 58 59 60 61 62
        on right: 48
    stmt_ends (90)
        on left: 63 64
        on right: 7 8 9 10 11 13 16 17 18 19 20 21 22 23 24 25 26 27 49 54 55 56 60 61 64 91 92 93 96 97 98 99 100 101 102 107 110 111 112 113
    decl_stmt (91)
        on left: 65 66 67
        on right: 54
    decl_stmt_single_line (92)
        on left: 68 69 70 71 72 73 74
        on right: 51
    var_name (93)
        on left: 75 76
        on right: 65 66 67 68 69 70 71 72 73 74
    access (94)
        on left: 77 78 79 80 81 82
        on right: 10 11 20 21 22 23 26 27 68
    assign_stmt_singleline (95)
        on left: 83 84 85 86 87 88
        on right: 53
    assign_stmt_multiline (96)
        on left: 89 90
        on right: 55
    while_stmt (97)
        on left: 91
        on right: 56
    do_loop_stmt (98)
        on left: 92 93
        on right: 57
    do_loop_condition (99)
        on left: 94 95
        on right: 92 93
    for_loop_stmt (100)
        on left: 96 97
        on right: 58
    for_each_loop_stmt (101)
        on left: 98
        on right: 59
    if_stmt_multi_line (102)
        on left: 99 100 101 102
        on right: 61
    elseif_list (103)
        on left: 103 104
        on right: 101 102 104
    if_stmt_single_line (104)
        on left: 105 106
        on right: 50
    select_stmt (105)
        on left: 107
        on right: 60
    case_list (106)
        on left: 108 109
        on right: 107 109
    case_stmt (107)
        on left: 110 111 112 113
        on right: 108 109
    function_call_multiline (108)
        on left: 114
        on right: 62 89 90
    function_call_singleline (109)
        on left: 115
        on right: 52 85 86 87 88
    expr (110)
        on left: 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131
        on right: 17 19 21 23 65 66 67 69 70 72 75 83 86 91 94 95 99 100 101 102 103 104 105 106 107 110 111 112 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 143 144
    basic_literal (111)
        on left: 132 133 134 135
        on right: 43 44 65 66 69 70 71 74 96 97 98 116
    arguments_multiline (112)
        on left: 136 137 138
        on right: 114 141
    arguments_singleline (113)
        on left: 139 140
        on right: 115 142
    arguments (114)
        on left: 141 142
        on right: 16 17 18 19 20 21 22 23
    expr_list (115)
        on left: 143 144
        on right: 74 136 137 138 139 144


State 0

    0 $accept: . root $end

    IMPORTS    shift, and go to state 1
    MODULE     shift, and go to state 2
    PRIVATE    shift, and go to state 3
    PROTECTED  shift, and go to state 4
    PUBLIC     shift, and go to state 5
    FRIEND     shift, and go to state 6

    $default  reduce using rule 2 (program_items_list)

    root                          go to state 7
    program_items_list            go to state 8
    program_items_list_not_empty  go to state 9
    program_item                  go to state 10
    module                        go to state 11
    access                        go to state 12


State 1

    7 program_item: IMPORTS . IDENTIFIER stmt_ends

    IDENTIFIER  shift, and go to state 13


State 2

    8 module: MODULE . IDENTIFIER stmt_ends END MODULE
    9       | MODULE . IDENTIFIER stmt_ends functions_and_sub_list END MODULE

    IDENTIFIER  shift, and go to state 14


State 3

   80 access: PRIVATE .
   82       | PRIVATE . FRIEND

    FRIEND  shift, and go to state 15

    $default  reduce using rule 80 (access)


State 4

   78 access: PROTECTED .
   81       | PROTECTED . FRIEND

    FRIEND  shift, and go to state 16

    $default  reduce using rule 78 (access)


State 5

   77 access: PUBLIC .

    $default  reduce using rule 77 (access)


State 6

   79 access: FRIEND .

    $default  reduce using rule 79 (access)


State 7

    0 $accept: root . $end

    $end  shift, and go to state 17


State 8

    1 root: program_items_list .

    $default  reduce using rule 1 (root)


State 9

    3 program_items_list: program_items_list_not_empty .
    5 program_items_list_not_empty: program_items_list_not_empty . program_item

    IMPORTS    shift, and go to state 1
    MODULE     shift, and go to state 2
    PRIVATE    shift, and go to state 3
    PROTECTED  shift, and go to state 4
    PUBLIC     shift, and go to state 5
    FRIEND     shift, and go to state 6

    $default  reduce using rule 3 (program_items_list)

    program_item  go to state 18
    module        go to state 11
    access        go to state 12


State 10

    4 program_items_list_not_empty: program_item .

    $default  reduce using rule 4 (program_items_list_not_empty)


State 11

    6 program_item: module .

    $default  reduce using rule 6 (program_item)


State 12

   10 module: access . MODULE IDENTIFIER stmt_ends END MODULE
   11       | access . MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE

    MODULE  shift, and go to state 19


State 13

    7 program_item: IMPORTS IDENTIFIER . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 21


State 14

    8 module: MODULE IDENTIFIER . stmt_ends END MODULE
    9       | MODULE IDENTIFIER . stmt_ends functions_and_sub_list END MODULE

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 22


State 15

   82 access: PRIVATE FRIEND .

    $default  reduce using rule 82 (access)


State 16

   81 access: PROTECTED FRIEND .

    $default  reduce using rule 81 (access)


State 17

    0 $accept: root $end .

    $default  accept


State 18

    5 program_items_list_not_empty: program_items_list_not_empty program_item .

    $default  reduce using rule 5 (program_items_list_not_empty)


State 19

   10 module: access MODULE . IDENTIFIER stmt_ends END MODULE
   11       | access MODULE . IDENTIFIER stmt_ends functions_and_sub_list END MODULE

    IDENTIFIER  shift, and go to state 23


State 20

   63 stmt_ends: END_OF_LINE .

    $default  reduce using rule 63 (stmt_ends)


State 21

    7 program_item: IMPORTS IDENTIFIER stmt_ends .
   64 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 7 (program_item)


State 22

    8 module: MODULE IDENTIFIER stmt_ends . END MODULE
    9       | MODULE IDENTIFIER stmt_ends . functions_and_sub_list END MODULE
   64 stmt_ends: stmt_ends . END_OF_LINE

    SUB          shift, and go to state 25
    END          shift, and go to state 26
    FUNCTION     shift, and go to state 27
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    functions_and_sub_list  go to state 28
    function_or_sub         go to state 29
    function                go to state 30
    sub_bloc                go to state 31
    access                  go to state 32


State 23

   10 module: access MODULE IDENTIFIER . stmt_ends END MODULE
   11       | access MODULE IDENTIFIER . stmt_ends functions_and_sub_list END MODULE

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 33


State 24

   64 stmt_ends: stmt_ends END_OF_LINE .

    $default  reduce using rule 64 (stmt_ends)


State 25

   24 sub_bloc: SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   25         | SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER  shift, and go to state 34


State 26

    8 module: MODULE IDENTIFIER stmt_ends END . MODULE

    MODULE  shift, and go to state 35


State 27

   16 function: FUNCTION . IDENTIFIER arguments stmt_ends END FUNCTION
   17         | FUNCTION . IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION
   18         | FUNCTION . IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   19         | FUNCTION . IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION

    IDENTIFIER  shift, and go to state 36


State 28

    9 module: MODULE IDENTIFIER stmt_ends functions_and_sub_list . END MODULE
   13 functions_and_sub_list: functions_and_sub_list . stmt_ends function_or_sub

    END          shift, and go to state 37
    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 38


State 29

   12 functions_and_sub_list: function_or_sub .

    $default  reduce using rule 12 (functions_and_sub_list)


State 30

   14 function_or_sub: function .

    $default  reduce using rule 14 (function_or_sub)


State 31

   15 function_or_sub: sub_bloc .

    $default  reduce using rule 15 (function_or_sub)


State 32

   20 function: access . FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION
   21         | access . FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION
   22         | access . FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   23         | access . FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION
   26 sub_bloc: access . SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   27         | access . SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    SUB       shift, and go to state 39
    FUNCTION  shift, and go to state 40


State 33

   10 module: access MODULE IDENTIFIER stmt_ends . END MODULE
   11       | access MODULE IDENTIFIER stmt_ends . functions_and_sub_list END MODULE
   64 stmt_ends: stmt_ends . END_OF_LINE

    SUB          shift, and go to state 25
    END          shift, and go to state 41
    FUNCTION     shift, and go to state 27
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    functions_and_sub_list  go to state 42
    function_or_sub         go to state 29
    function                go to state 30
    sub_bloc                go to state 31
    access                  go to state 32


State 34

   24 sub_bloc: SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends END SUB
   25         | SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    '('  shift, and go to state 43


State 35

    8 module: MODULE IDENTIFIER stmt_ends END MODULE .

    $default  reduce using rule 8 (module)


State 36

   16 function: FUNCTION IDENTIFIER . arguments stmt_ends END FUNCTION
   17         | FUNCTION IDENTIFIER . arguments stmt_ends RETURN expr END FUNCTION
   18         | FUNCTION IDENTIFIER . arguments stmt_ends stmt_list END FUNCTION
   19         | FUNCTION IDENTIFIER . arguments stmt_ends stmt_list RETURN expr END FUNCTION

    '('  shift, and go to state 44

    arguments_multiline   go to state 45
    arguments_singleline  go to state 46
    arguments             go to state 47


State 37

    9 module: MODULE IDENTIFIER stmt_ends functions_and_sub_list END . MODULE

    MODULE  shift, and go to state 48


State 38

   13 functions_and_sub_list: functions_and_sub_list stmt_ends . function_or_sub
   64 stmt_ends: stmt_ends . END_OF_LINE

    SUB          shift, and go to state 25
    FUNCTION     shift, and go to state 27
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    function_or_sub  go to state 49
    function         go to state 30
    sub_bloc         go to state 31
    access           go to state 32


State 39

   26 sub_bloc: access SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   27         | access SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER  shift, and go to state 50


State 40

   20 function: access FUNCTION . IDENTIFIER arguments stmt_ends END FUNCTION
   21         | access FUNCTION . IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION
   22         | access FUNCTION . IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   23         | access FUNCTION . IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION

    IDENTIFIER  shift, and go to state 51


State 41

   10 module: access MODULE IDENTIFIER stmt_ends END . MODULE

    MODULE  shift, and go to state 52


State 42

   11 module: access MODULE IDENTIFIER stmt_ends functions_and_sub_list . END MODULE
   13 functions_and_sub_list: functions_and_sub_list . stmt_ends function_or_sub

    END          shift, and go to state 53
    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 38


State 43

   24 sub_bloc: SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends END SUB
   25         | SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER   shift, and go to state 54
    END_OF_LINE  shift, and go to state 55

    $default  reduce using rule 28 (parameterlist_or_empty)

    parameterlist_or_empty      go to state 56
    parameterlist_with_type     go to state 57
    parameterlist_without_type  go to state 58
    parameter_with_type         go to state 59
    parameter_without_type      go to state 60


State 44

  136 arguments_multiline: '(' . END_OF_LINE expr_list ')'
  137                    | '(' . END_OF_LINE expr_list END_OF_LINE ')'
  138                    | '(' . expr_list END_OF_LINE ')'
  139 arguments_singleline: '(' . expr_list ')'
  140                     | '(' . ')'

    INT          shift, and go to state 61
    DOUBLE       shift, and go to state 62
    STRING       shift, and go to state 63
    BOOLEAN      shift, and go to state 64
    END_OF_LINE  shift, and go to state 65
    '+'          shift, and go to state 66
    '-'          shift, and go to state 67
    ')'          shift, and go to state 68

    expr           go to state 69
    basic_literal  go to state 70
    expr_list      go to state 71


State 45

  141 arguments: arguments_multiline .

    $default  reduce using rule 141 (arguments)


State 46

  142 arguments: arguments_singleline .

    $default  reduce using rule 142 (arguments)


State 47

   16 function: FUNCTION IDENTIFIER arguments . stmt_ends END FUNCTION
   17         | FUNCTION IDENTIFIER arguments . stmt_ends RETURN expr END FUNCTION
   18         | FUNCTION IDENTIFIER arguments . stmt_ends stmt_list END FUNCTION
   19         | FUNCTION IDENTIFIER arguments . stmt_ends stmt_list RETURN expr END FUNCTION

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 72


State 48

    9 module: MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE .

    $default  reduce using rule 9 (module)


State 49

   13 functions_and_sub_list: functions_and_sub_list stmt_ends function_or_sub .

    $default  reduce using rule 13 (functions_and_sub_list)


State 50

   26 sub_bloc: access SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends END SUB
   27         | access SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    '('  shift, and go to state 73


State 51

   20 function: access FUNCTION IDENTIFIER . arguments stmt_ends END FUNCTION
   21         | access FUNCTION IDENTIFIER . arguments stmt_ends RETURN expr END FUNCTION
   22         | access FUNCTION IDENTIFIER . arguments stmt_ends stmt_list END FUNCTION
   23         | access FUNCTION IDENTIFIER . arguments stmt_ends stmt_list RETURN expr END FUNCTION

    '('  shift, and go to state 44

    arguments_multiline   go to state 45
    arguments_singleline  go to state 46
    arguments             go to state 74


State 52

   10 module: access MODULE IDENTIFIER stmt_ends END MODULE .

    $default  reduce using rule 10 (module)


State 53

   11 module: access MODULE IDENTIFIER stmt_ends functions_and_sub_list END . MODULE

    MODULE  shift, and go to state 75


State 54

   43 parameter_with_type: IDENTIFIER . AS basic_literal
   44                    | IDENTIFIER . AS basic_literal '(' ')'
   45 parameter_without_type: IDENTIFIER .

    AS  shift, and go to state 76

    $default  reduce using rule 45 (parameter_without_type)


State 55

   30 parameterlist_or_empty: END_OF_LINE . parameterlist_with_type END_OF_LINE
   31                       | END_OF_LINE . parameterlist_with_type
   34                       | END_OF_LINE . parameterlist_without_type END_OF_LINE
   36                       | END_OF_LINE . parameterlist_without_type

    IDENTIFIER  shift, and go to state 54

    parameterlist_with_type     go to state 77
    parameterlist_without_type  go to state 78
    parameter_with_type         go to state 59
    parameter_without_type      go to state 60


State 56

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends END SUB
   25         | SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends stmt_list END SUB

    ')'  shift, and go to state 79


State 57

   29 parameterlist_or_empty: parameterlist_with_type .
   32                       | parameterlist_with_type . END_OF_LINE
   38 parameterlist_with_type: parameterlist_with_type . ',' parameter_with_type
   39                        | parameterlist_with_type . ',' END_OF_LINE parameter_with_type

    END_OF_LINE  shift, and go to state 80
    ','          shift, and go to state 81

    $default  reduce using rule 29 (parameterlist_or_empty)


State 58

   33 parameterlist_or_empty: parameterlist_without_type .
   35                       | parameterlist_without_type . END_OF_LINE
   41 parameterlist_without_type: parameterlist_without_type . ',' parameter_without_type
   42                           | parameterlist_without_type . ',' END_OF_LINE parameter_without_type

    END_OF_LINE  shift, and go to state 82
    ','          shift, and go to state 83

    $default  reduce using rule 33 (parameterlist_or_empty)


State 59

   37 parameterlist_with_type: parameter_with_type .

    $default  reduce using rule 37 (parameterlist_with_type)


State 60

   40 parameterlist_without_type: parameter_without_type .

    $default  reduce using rule 40 (parameterlist_without_type)


State 61

  132 basic_literal: INT .

    $default  reduce using rule 132 (basic_literal)


State 62

  135 basic_literal: DOUBLE .

    $default  reduce using rule 135 (basic_literal)


State 63

  133 basic_literal: STRING .

    $default  reduce using rule 133 (basic_literal)


State 64

  134 basic_literal: BOOLEAN .

    $default  reduce using rule 134 (basic_literal)


State 65

  136 arguments_multiline: '(' END_OF_LINE . expr_list ')'
  137                    | '(' END_OF_LINE . expr_list END_OF_LINE ')'

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 69
    basic_literal  go to state 70
    expr_list      go to state 84


State 66

  118 expr: '+' . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 85
    basic_literal  go to state 70


State 67

  117 expr: '-' . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 86
    basic_literal  go to state 70


State 68

  140 arguments_singleline: '(' ')' .

    $default  reduce using rule 140 (arguments_singleline)


State 69

  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr
  143 expr_list: expr .

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 143 (expr_list)


State 70

  116 expr: basic_literal .

    $default  reduce using rule 116 (expr)


State 71

  138 arguments_multiline: '(' expr_list . END_OF_LINE ')'
  139 arguments_singleline: '(' expr_list . ')'
  144 expr_list: expr_list . ',' expr

    END_OF_LINE  shift, and go to state 100
    ')'          shift, and go to state 101
    ','          shift, and go to state 102


State 72

   16 function: FUNCTION IDENTIFIER arguments stmt_ends . END FUNCTION
   17         | FUNCTION IDENTIFIER arguments stmt_ends . RETURN expr END FUNCTION
   18         | FUNCTION IDENTIFIER arguments stmt_ends . stmt_list END FUNCTION
   19         | FUNCTION IDENTIFIER arguments stmt_ends . stmt_list RETURN expr END FUNCTION
   64 stmt_ends: stmt_ends . END_OF_LINE

    IDENTIFIER   shift, and go to state 103
    END          shift, and go to state 104
    CONST        shift, and go to state 105
    DIM          shift, and go to state 106
    WHILE        shift, and go to state 107
    IF           shift, and go to state 108
    SELECT       shift, and go to state 109
    RETURN       shift, and go to state 110
    DO           shift, and go to state 111
    FOR          shift, and go to state 112
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    stmt_list                 go to state 113
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 73

   26 sub_bloc: access SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends END SUB
   27         | access SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER   shift, and go to state 54
    END_OF_LINE  shift, and go to state 55

    $default  reduce using rule 28 (parameterlist_or_empty)

    parameterlist_or_empty      go to state 131
    parameterlist_with_type     go to state 57
    parameterlist_without_type  go to state 58
    parameter_with_type         go to state 59
    parameter_without_type      go to state 60


State 74

   20 function: access FUNCTION IDENTIFIER arguments . stmt_ends END FUNCTION
   21         | access FUNCTION IDENTIFIER arguments . stmt_ends RETURN expr END FUNCTION
   22         | access FUNCTION IDENTIFIER arguments . stmt_ends stmt_list END FUNCTION
   23         | access FUNCTION IDENTIFIER arguments . stmt_ends stmt_list RETURN expr END FUNCTION

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 132


State 75

   11 module: access MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE .

    $default  reduce using rule 11 (module)


State 76

   43 parameter_with_type: IDENTIFIER AS . basic_literal
   44                    | IDENTIFIER AS . basic_literal '(' ')'

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 133


State 77

   30 parameterlist_or_empty: END_OF_LINE parameterlist_with_type . END_OF_LINE
   31                       | END_OF_LINE parameterlist_with_type .
   38 parameterlist_with_type: parameterlist_with_type . ',' parameter_with_type
   39                        | parameterlist_with_type . ',' END_OF_LINE parameter_with_type

    END_OF_LINE  shift, and go to state 134
    ','          shift, and go to state 81

    $default  reduce using rule 31 (parameterlist_or_empty)


State 78

   34 parameterlist_or_empty: END_OF_LINE parameterlist_without_type . END_OF_LINE
   36                       | END_OF_LINE parameterlist_without_type .
   41 parameterlist_without_type: parameterlist_without_type . ',' parameter_without_type
   42                           | parameterlist_without_type . ',' END_OF_LINE parameter_without_type

    END_OF_LINE  shift, and go to state 135
    ','          shift, and go to state 83

    $default  reduce using rule 36 (parameterlist_or_empty)


State 79

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends END SUB
   25         | SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends stmt_list END SUB

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 136


State 80

   32 parameterlist_or_empty: parameterlist_with_type END_OF_LINE .

    $default  reduce using rule 32 (parameterlist_or_empty)


State 81

   38 parameterlist_with_type: parameterlist_with_type ',' . parameter_with_type
   39                        | parameterlist_with_type ',' . END_OF_LINE parameter_with_type

    IDENTIFIER   shift, and go to state 137
    END_OF_LINE  shift, and go to state 138

    parameter_with_type  go to state 139


State 82

   35 parameterlist_or_empty: parameterlist_without_type END_OF_LINE .

    $default  reduce using rule 35 (parameterlist_or_empty)


State 83

   41 parameterlist_without_type: parameterlist_without_type ',' . parameter_without_type
   42                           | parameterlist_without_type ',' . END_OF_LINE parameter_without_type

    IDENTIFIER   shift, and go to state 140
    END_OF_LINE  shift, and go to state 141

    parameter_without_type  go to state 142


State 84

  136 arguments_multiline: '(' END_OF_LINE expr_list . ')'
  137                    | '(' END_OF_LINE expr_list . END_OF_LINE ')'
  144 expr_list: expr_list . ',' expr

    END_OF_LINE  shift, and go to state 143
    ')'          shift, and go to state 144
    ','          shift, and go to state 102


State 85

  118 expr: '+' expr .
  119     | expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 118 (expr)


State 86

  117 expr: '-' expr .
  119     | expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 117 (expr)


State 87

  127 expr: expr '^' . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 145
    basic_literal  go to state 70


State 88

  121 expr: expr '*' . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 146
    basic_literal  go to state 70


State 89

  122 expr: expr '/' . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 147
    basic_literal  go to state 70


State 90

  123 expr: expr INT_DIV . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 148
    basic_literal  go to state 70


State 91

  119 expr: expr '+' . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 149
    basic_literal  go to state 70


State 92

  120 expr: expr '-' . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 150
    basic_literal  go to state 70


State 93

  124 expr: expr '=' . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 151
    basic_literal  go to state 70


State 94

  128 expr: expr NOT_EQUAL . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 152
    basic_literal  go to state 70


State 95

  129 expr: expr LESS_OR_EQUAL . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 153
    basic_literal  go to state 70


State 96

  130 expr: expr MORE_OR_EQUAL . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 154
    basic_literal  go to state 70


State 97

  126 expr: expr '>' . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 155
    basic_literal  go to state 70


State 98

  125 expr: expr '<' . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 156
    basic_literal  go to state 70


State 99

  131 expr: expr '&' . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 157
    basic_literal  go to state 70


State 100

  138 arguments_multiline: '(' expr_list END_OF_LINE . ')'

    ')'  shift, and go to state 158


State 101

  139 arguments_singleline: '(' expr_list ')' .

    $default  reduce using rule 139 (arguments_singleline)


State 102

  144 expr_list: expr_list ',' . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 159
    basic_literal  go to state 70


State 103

   83 assign_stmt_singleline: IDENTIFIER . '=' expr
   84                       | IDENTIFIER . '=' IDENTIFIER
   85                       | IDENTIFIER . '=' function_call_singleline
   89 assign_stmt_multiline: IDENTIFIER . '=' function_call_multiline
  114 function_call_multiline: IDENTIFIER . arguments_multiline
  115 function_call_singleline: IDENTIFIER . arguments_singleline

    '='  shift, and go to state 160
    '('  shift, and go to state 44

    arguments_multiline   go to state 161
    arguments_singleline  go to state 162


State 104

   16 function: FUNCTION IDENTIFIER arguments stmt_ends END . FUNCTION

    FUNCTION  shift, and go to state 163


State 105

   65 decl_stmt: CONST . var_name AS basic_literal '=' END_OF_LINE expr
   69 decl_stmt_single_line: CONST . var_name AS basic_literal '=' expr

    IDENTIFIER  shift, and go to state 164

    var_name  go to state 165


State 106

   66 decl_stmt: DIM . var_name AS basic_literal '=' END_OF_LINE expr
   67          | DIM . var_name '=' END_OF_LINE expr
   70 decl_stmt_single_line: DIM . var_name AS basic_literal '=' expr
   71                      | DIM . var_name AS basic_literal
   72                      | DIM . var_name '=' expr
   73                      | DIM . var_name
   74                      | DIM . var_name '=' NEW basic_literal '(' ')' '{' expr_list '}'

    IDENTIFIER  shift, and go to state 164

    var_name  go to state 166


State 107

   91 while_stmt: WHILE . expr stmt_ends stmt_list END WHILE

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 167
    basic_literal  go to state 70


State 108

   99 if_stmt_multi_line: IF . expr THEN stmt_ends stmt_list END IF
  100                   | IF . expr THEN stmt_ends stmt_list ELSE stmt_list END IF
  101                   | IF . expr THEN stmt_ends stmt_list elseif_list END IF
  102                   | IF . expr THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF
  105 if_stmt_single_line: IF . expr THEN single_line_stmt
  106                    | IF . expr THEN single_line_stmt ELSE single_line_stmt

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 168
    basic_literal  go to state 70


State 109

  107 select_stmt: SELECT . CASE expr stmt_ends case_list END SELECT

    CASE  shift, and go to state 169


State 110

   17 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN . expr END FUNCTION

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 170
    basic_literal  go to state 70


State 111

   92 do_loop_stmt: DO . do_loop_condition stmt_ends stmt_list LOOP
   93             | DO . stmt_ends stmt_list LOOP do_loop_condition

    WHILE        shift, and go to state 171
    UNTIL        shift, and go to state 172
    END_OF_LINE  shift, and go to state 20

    stmt_ends          go to state 173
    do_loop_condition  go to state 174


State 112

   96 for_loop_stmt: FOR . IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal stmt_ends stmt_list NEXT
   97              | FOR . IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal STEP basic_literal stmt_ends stmt_list NEXT
   98 for_each_loop_stmt: FOR . EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

    IDENTIFIER  shift, and go to state 175
    EACH        shift, and go to state 176


State 113

   18 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list . END FUNCTION
   19         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list . RETURN expr END FUNCTION
   47 stmt_list: stmt_list . stmt

    IDENTIFIER  shift, and go to state 103
    END         shift, and go to state 177
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    RETURN      shift, and go to state 178
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 114

   46 stmt_list: stmt .

    $default  reduce using rule 46 (stmt_list)


State 115

   49 stmt: single_line_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 180


State 116

   48 stmt: multi_line_stmt .

    $default  reduce using rule 48 (stmt)


State 117

   54 multi_line_stmt: decl_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 181


State 118

   51 single_line_stmt: decl_stmt_single_line .

    $default  reduce using rule 51 (single_line_stmt)


State 119

   68 decl_stmt_single_line: access . SUB var_name stmt_list END SUB

    SUB  shift, and go to state 182


State 120

   53 single_line_stmt: assign_stmt_singleline .

    $default  reduce using rule 53 (single_line_stmt)


State 121

   55 multi_line_stmt: assign_stmt_multiline . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 183


State 122

   56 multi_line_stmt: while_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 184


State 123

   57 multi_line_stmt: do_loop_stmt .

    $default  reduce using rule 57 (multi_line_stmt)


State 124

   58 multi_line_stmt: for_loop_stmt .

    $default  reduce using rule 58 (multi_line_stmt)


State 125

   59 multi_line_stmt: for_each_loop_stmt .

    $default  reduce using rule 59 (multi_line_stmt)


State 126

   61 multi_line_stmt: if_stmt_multi_line . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 185


State 127

   50 single_line_stmt: if_stmt_single_line .

    $default  reduce using rule 50 (single_line_stmt)


State 128

   60 multi_line_stmt: select_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 186


State 129

   62 multi_line_stmt: function_call_multiline .
   90 assign_stmt_multiline: function_call_multiline . '=' function_call_multiline

    '='  shift, and go to state 187

    $default  reduce using rule 62 (multi_line_stmt)


State 130

   52 single_line_stmt: function_call_singleline .
   86 assign_stmt_singleline: function_call_singleline . '=' expr
   87                       | function_call_singleline . '=' IDENTIFIER
   88                       | function_call_singleline . '=' function_call_singleline

    '='  shift, and go to state 188

    $default  reduce using rule 52 (single_line_stmt)


State 131

   26 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends END SUB
   27         | access SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends stmt_list END SUB

    ')'  shift, and go to state 189


State 132

   20 function: access FUNCTION IDENTIFIER arguments stmt_ends . END FUNCTION
   21         | access FUNCTION IDENTIFIER arguments stmt_ends . RETURN expr END FUNCTION
   22         | access FUNCTION IDENTIFIER arguments stmt_ends . stmt_list END FUNCTION
   23         | access FUNCTION IDENTIFIER arguments stmt_ends . stmt_list RETURN expr END FUNCTION
   64 stmt_ends: stmt_ends . END_OF_LINE

    IDENTIFIER   shift, and go to state 103
    END          shift, and go to state 190
    CONST        shift, and go to state 105
    DIM          shift, and go to state 106
    WHILE        shift, and go to state 107
    IF           shift, and go to state 108
    SELECT       shift, and go to state 109
    RETURN       shift, and go to state 191
    DO           shift, and go to state 111
    FOR          shift, and go to state 112
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    stmt_list                 go to state 192
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 133

   43 parameter_with_type: IDENTIFIER AS basic_literal .
   44                    | IDENTIFIER AS basic_literal . '(' ')'

    '('  shift, and go to state 193

    $default  reduce using rule 43 (parameter_with_type)


State 134

   30 parameterlist_or_empty: END_OF_LINE parameterlist_with_type END_OF_LINE .

    $default  reduce using rule 30 (parameterlist_or_empty)


State 135

   34 parameterlist_or_empty: END_OF_LINE parameterlist_without_type END_OF_LINE .

    $default  reduce using rule 34 (parameterlist_or_empty)


State 136

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . END SUB
   25         | SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . stmt_list END SUB
   64 stmt_ends: stmt_ends . END_OF_LINE

    IDENTIFIER   shift, and go to state 103
    END          shift, and go to state 194
    CONST        shift, and go to state 105
    DIM          shift, and go to state 106
    WHILE        shift, and go to state 107
    IF           shift, and go to state 108
    SELECT       shift, and go to state 109
    DO           shift, and go to state 111
    FOR          shift, and go to state 112
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    stmt_list                 go to state 195
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 137

   43 parameter_with_type: IDENTIFIER . AS basic_literal
   44                    | IDENTIFIER . AS basic_literal '(' ')'

    AS  shift, and go to state 76


State 138

   39 parameterlist_with_type: parameterlist_with_type ',' END_OF_LINE . parameter_with_type

    IDENTIFIER  shift, and go to state 137

    parameter_with_type  go to state 196


State 139

   38 parameterlist_with_type: parameterlist_with_type ',' parameter_with_type .

    $default  reduce using rule 38 (parameterlist_with_type)


State 140

   45 parameter_without_type: IDENTIFIER .

    $default  reduce using rule 45 (parameter_without_type)


State 141

   42 parameterlist_without_type: parameterlist_without_type ',' END_OF_LINE . parameter_without_type

    IDENTIFIER  shift, and go to state 140

    parameter_without_type  go to state 197


State 142

   41 parameterlist_without_type: parameterlist_without_type ',' parameter_without_type .

    $default  reduce using rule 41 (parameterlist_without_type)


State 143

  137 arguments_multiline: '(' END_OF_LINE expr_list END_OF_LINE . ')'

    ')'  shift, and go to state 198


State 144

  136 arguments_multiline: '(' END_OF_LINE expr_list ')' .

    $default  reduce using rule 136 (arguments_multiline)


State 145

  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  127     | expr '^' expr .
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 127 (expr)


State 146

  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  121     | expr '*' expr .
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 121 (expr)


State 147

  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  122     | expr '/' expr .
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 122 (expr)


State 148

  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  123     | expr INT_DIV expr .
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 123 (expr)


State 149

  119 expr: expr . '+' expr
  119     | expr '+' expr .
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 119 (expr)


State 150

  119 expr: expr . '+' expr
  120     | expr . '-' expr
  120     | expr '-' expr .
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 120 (expr)


State 151

  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  124     | expr '=' expr .
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '&'  shift, and go to state 99

    $default  reduce using rule 124 (expr)


State 152

  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  128     | expr NOT_EQUAL expr .
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '&'  shift, and go to state 99

    $default  reduce using rule 128 (expr)


State 153

  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  129     | expr LESS_OR_EQUAL expr .
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '&'  shift, and go to state 99

    $default  reduce using rule 129 (expr)


State 154

  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  130     | expr MORE_OR_EQUAL expr .
  131     | expr . '&' expr

    '&'  shift, and go to state 99

    $default  reduce using rule 130 (expr)


State 155

  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  126     | expr '>' expr .
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '&'  shift, and go to state 99

    $default  reduce using rule 126 (expr)


State 156

  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  125     | expr '<' expr .
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '&'  shift, and go to state 99

    $default  reduce using rule 125 (expr)


State 157

  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr
  131     | expr '&' expr .

    $default  reduce using rule 131 (expr)


State 158

  138 arguments_multiline: '(' expr_list END_OF_LINE ')' .

    $default  reduce using rule 138 (arguments_multiline)


State 159

  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr
  144 expr_list: expr_list ',' expr .

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 144 (expr_list)


State 160

   83 assign_stmt_singleline: IDENTIFIER '=' . expr
   84                       | IDENTIFIER '=' . IDENTIFIER
   85                       | IDENTIFIER '=' . function_call_singleline
   89 assign_stmt_multiline: IDENTIFIER '=' . function_call_multiline

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 199
    '+'         shift, and go to state 66
    '-'         shift, and go to state 67

    function_call_multiline   go to state 200
    function_call_singleline  go to state 201
    expr                      go to state 202
    basic_literal             go to state 70


State 161

  114 function_call_multiline: IDENTIFIER arguments_multiline .

    $default  reduce using rule 114 (function_call_multiline)


State 162

  115 function_call_singleline: IDENTIFIER arguments_singleline .

    $default  reduce using rule 115 (function_call_singleline)


State 163

   16 function: FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION .

    $default  reduce using rule 16 (function)


State 164

   75 var_name: IDENTIFIER . '(' expr ')'
   76         | IDENTIFIER .

    '('  shift, and go to state 203

    $default  reduce using rule 76 (var_name)


State 165

   65 decl_stmt: CONST var_name . AS basic_literal '=' END_OF_LINE expr
   69 decl_stmt_single_line: CONST var_name . AS basic_literal '=' expr

    AS  shift, and go to state 204


State 166

   66 decl_stmt: DIM var_name . AS basic_literal '=' END_OF_LINE expr
   67          | DIM var_name . '=' END_OF_LINE expr
   70 decl_stmt_single_line: DIM var_name . AS basic_literal '=' expr
   71                      | DIM var_name . AS basic_literal
   72                      | DIM var_name . '=' expr
   73                      | DIM var_name .
   74                      | DIM var_name . '=' NEW basic_literal '(' ')' '{' expr_list '}'

    AS   shift, and go to state 205
    '='  shift, and go to state 206

    $default  reduce using rule 73 (decl_stmt_single_line)


State 167

   91 while_stmt: WHILE expr . stmt_ends stmt_list END WHILE
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    stmt_ends  go to state 207


State 168

   99 if_stmt_multi_line: IF expr . THEN stmt_ends stmt_list END IF
  100                   | IF expr . THEN stmt_ends stmt_list ELSE stmt_list END IF
  101                   | IF expr . THEN stmt_ends stmt_list elseif_list END IF
  102                   | IF expr . THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF
  105 if_stmt_single_line: IF expr . THEN single_line_stmt
  106                    | IF expr . THEN single_line_stmt ELSE single_line_stmt
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99
    THEN           shift, and go to state 208


State 169

  107 select_stmt: SELECT CASE . expr stmt_ends case_list END SELECT

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 209
    basic_literal  go to state 70


State 170

   17 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr . END FUNCTION
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    END            shift, and go to state 210
    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99


State 171

   95 do_loop_condition: WHILE . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 211
    basic_literal  go to state 70


State 172

   94 do_loop_condition: UNTIL . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 212
    basic_literal  go to state 70


State 173

   64 stmt_ends: stmt_ends . END_OF_LINE
   93 do_loop_stmt: DO stmt_ends . stmt_list LOOP do_loop_condition

    IDENTIFIER   shift, and go to state 103
    CONST        shift, and go to state 105
    DIM          shift, and go to state 106
    WHILE        shift, and go to state 107
    IF           shift, and go to state 108
    SELECT       shift, and go to state 109
    DO           shift, and go to state 111
    FOR          shift, and go to state 112
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    stmt_list                 go to state 213
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 174

   92 do_loop_stmt: DO do_loop_condition . stmt_ends stmt_list LOOP

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 214


State 175

   96 for_loop_stmt: FOR IDENTIFIER . AS basic_literal '=' basic_literal TO basic_literal stmt_ends stmt_list NEXT
   97              | FOR IDENTIFIER . AS basic_literal '=' basic_literal TO basic_literal STEP basic_literal stmt_ends stmt_list NEXT

    AS  shift, and go to state 215


State 176

   98 for_each_loop_stmt: FOR EACH . IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

    IDENTIFIER  shift, and go to state 216


State 177

   18 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list END . FUNCTION

    FUNCTION  shift, and go to state 217


State 178

   19 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN . expr END FUNCTION

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 218
    basic_literal  go to state 70


State 179

   47 stmt_list: stmt_list stmt .

    $default  reduce using rule 47 (stmt_list)


State 180

   49 stmt: single_line_stmt stmt_ends .
   64 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 49 (stmt)


State 181

   54 multi_line_stmt: decl_stmt stmt_ends .
   64 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 54 (multi_line_stmt)


State 182

   68 decl_stmt_single_line: access SUB . var_name stmt_list END SUB

    IDENTIFIER  shift, and go to state 164

    var_name  go to state 219


State 183

   55 multi_line_stmt: assign_stmt_multiline stmt_ends .
   64 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 55 (multi_line_stmt)


State 184

   56 multi_line_stmt: while_stmt stmt_ends .
   64 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 56 (multi_line_stmt)


State 185

   61 multi_line_stmt: if_stmt_multi_line stmt_ends .
   64 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 61 (multi_line_stmt)


State 186

   60 multi_line_stmt: select_stmt stmt_ends .
   64 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 60 (multi_line_stmt)


State 187

   90 assign_stmt_multiline: function_call_multiline '=' . function_call_multiline

    IDENTIFIER  shift, and go to state 220

    function_call_multiline  go to state 221


State 188

   86 assign_stmt_singleline: function_call_singleline '=' . expr
   87                       | function_call_singleline '=' . IDENTIFIER
   88                       | function_call_singleline '=' . function_call_singleline

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 222
    '+'         shift, and go to state 66
    '-'         shift, and go to state 67

    function_call_singleline  go to state 223
    expr                      go to state 224
    basic_literal             go to state 70


State 189

   26 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends END SUB
   27         | access SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends stmt_list END SUB

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 225


State 190

   20 function: access FUNCTION IDENTIFIER arguments stmt_ends END . FUNCTION

    FUNCTION  shift, and go to state 226


State 191

   21 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN . expr END FUNCTION

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 227
    basic_literal  go to state 70


State 192

   22 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list . END FUNCTION
   23         | access FUNCTION IDENTIFIER arguments stmt_ends stmt_list . RETURN expr END FUNCTION
   47 stmt_list: stmt_list . stmt

    IDENTIFIER  shift, and go to state 103
    END         shift, and go to state 228
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    RETURN      shift, and go to state 229
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 193

   44 parameter_with_type: IDENTIFIER AS basic_literal '(' . ')'

    ')'  shift, and go to state 230


State 194

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END . SUB

    SUB  shift, and go to state 231


State 195

   25 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list . END SUB
   47 stmt_list: stmt_list . stmt

    IDENTIFIER  shift, and go to state 103
    END         shift, and go to state 232
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 196

   39 parameterlist_with_type: parameterlist_with_type ',' END_OF_LINE parameter_with_type .

    $default  reduce using rule 39 (parameterlist_with_type)


State 197

   42 parameterlist_without_type: parameterlist_without_type ',' END_OF_LINE parameter_without_type .

    $default  reduce using rule 42 (parameterlist_without_type)


State 198

  137 arguments_multiline: '(' END_OF_LINE expr_list END_OF_LINE ')' .

    $default  reduce using rule 137 (arguments_multiline)


State 199

   84 assign_stmt_singleline: IDENTIFIER '=' IDENTIFIER .
  114 function_call_multiline: IDENTIFIER . arguments_multiline
  115 function_call_singleline: IDENTIFIER . arguments_singleline

    '('  shift, and go to state 44

    $default  reduce using rule 84 (assign_stmt_singleline)

    arguments_multiline   go to state 161
    arguments_singleline  go to state 162


State 200

   89 assign_stmt_multiline: IDENTIFIER '=' function_call_multiline .

    $default  reduce using rule 89 (assign_stmt_multiline)


State 201

   85 assign_stmt_singleline: IDENTIFIER '=' function_call_singleline .

    $default  reduce using rule 85 (assign_stmt_singleline)


State 202

   83 assign_stmt_singleline: IDENTIFIER '=' expr .
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 83 (assign_stmt_singleline)


State 203

   75 var_name: IDENTIFIER '(' . expr ')'

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 233
    basic_literal  go to state 70


State 204

   65 decl_stmt: CONST var_name AS . basic_literal '=' END_OF_LINE expr
   69 decl_stmt_single_line: CONST var_name AS . basic_literal '=' expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 234


State 205

   66 decl_stmt: DIM var_name AS . basic_literal '=' END_OF_LINE expr
   70 decl_stmt_single_line: DIM var_name AS . basic_literal '=' expr
   71                      | DIM var_name AS . basic_literal

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 235


State 206

   67 decl_stmt: DIM var_name '=' . END_OF_LINE expr
   72 decl_stmt_single_line: DIM var_name '=' . expr
   74                      | DIM var_name '=' . NEW basic_literal '(' ')' '{' expr_list '}'

    INT          shift, and go to state 61
    DOUBLE       shift, and go to state 62
    STRING       shift, and go to state 63
    BOOLEAN      shift, and go to state 64
    NEW          shift, and go to state 236
    END_OF_LINE  shift, and go to state 237
    '+'          shift, and go to state 66
    '-'          shift, and go to state 67

    expr           go to state 238
    basic_literal  go to state 70


State 207

   64 stmt_ends: stmt_ends . END_OF_LINE
   91 while_stmt: WHILE expr stmt_ends . stmt_list END WHILE

    IDENTIFIER   shift, and go to state 103
    CONST        shift, and go to state 105
    DIM          shift, and go to state 106
    WHILE        shift, and go to state 107
    IF           shift, and go to state 108
    SELECT       shift, and go to state 109
    DO           shift, and go to state 111
    FOR          shift, and go to state 112
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    stmt_list                 go to state 239
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 208

   99 if_stmt_multi_line: IF expr THEN . stmt_ends stmt_list END IF
  100                   | IF expr THEN . stmt_ends stmt_list ELSE stmt_list END IF
  101                   | IF expr THEN . stmt_ends stmt_list elseif_list END IF
  102                   | IF expr THEN . stmt_ends stmt_list elseif_list ELSE stmt_list END IF
  105 if_stmt_single_line: IF expr THEN . single_line_stmt
  106                    | IF expr THEN . single_line_stmt ELSE single_line_stmt

    IDENTIFIER   shift, and go to state 240
    CONST        shift, and go to state 241
    DIM          shift, and go to state 242
    IF           shift, and go to state 243
    END_OF_LINE  shift, and go to state 20
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    single_line_stmt          go to state 244
    stmt_ends                 go to state 245
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    if_stmt_single_line       go to state 127
    function_call_singleline  go to state 130


State 209

  107 select_stmt: SELECT CASE expr . stmt_ends case_list END SELECT
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    stmt_ends  go to state 246


State 210

   17 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END . FUNCTION

    FUNCTION  shift, and go to state 247


State 211

   95 do_loop_condition: WHILE expr .
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 95 (do_loop_condition)


State 212

   94 do_loop_condition: UNTIL expr .
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 94 (do_loop_condition)


State 213

   47 stmt_list: stmt_list . stmt
   93 do_loop_stmt: DO stmt_ends stmt_list . LOOP do_loop_condition

    IDENTIFIER  shift, and go to state 103
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    LOOP        shift, and go to state 248
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 214

   64 stmt_ends: stmt_ends . END_OF_LINE
   92 do_loop_stmt: DO do_loop_condition stmt_ends . stmt_list LOOP

    IDENTIFIER   shift, and go to state 103
    CONST        shift, and go to state 105
    DIM          shift, and go to state 106
    WHILE        shift, and go to state 107
    IF           shift, and go to state 108
    SELECT       shift, and go to state 109
    DO           shift, and go to state 111
    FOR          shift, and go to state 112
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    stmt_list                 go to state 249
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 215

   96 for_loop_stmt: FOR IDENTIFIER AS . basic_literal '=' basic_literal TO basic_literal stmt_ends stmt_list NEXT
   97              | FOR IDENTIFIER AS . basic_literal '=' basic_literal TO basic_literal STEP basic_literal stmt_ends stmt_list NEXT

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 250


State 216

   98 for_each_loop_stmt: FOR EACH IDENTIFIER . AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

    AS  shift, and go to state 251


State 217

   18 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION .

    $default  reduce using rule 18 (function)


State 218

   19 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr . END FUNCTION
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    END            shift, and go to state 252
    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99


State 219

   68 decl_stmt_single_line: access SUB var_name . stmt_list END SUB

    IDENTIFIER  shift, and go to state 103
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt_list                 go to state 253
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 220

  114 function_call_multiline: IDENTIFIER . arguments_multiline

    '('  shift, and go to state 254

    arguments_multiline  go to state 161


State 221

   90 assign_stmt_multiline: function_call_multiline '=' function_call_multiline .

    $default  reduce using rule 90 (assign_stmt_multiline)


State 222

   87 assign_stmt_singleline: function_call_singleline '=' IDENTIFIER .
  115 function_call_singleline: IDENTIFIER . arguments_singleline

    '('  shift, and go to state 255

    $default  reduce using rule 87 (assign_stmt_singleline)

    arguments_singleline  go to state 162


State 223

   88 assign_stmt_singleline: function_call_singleline '=' function_call_singleline .

    $default  reduce using rule 88 (assign_stmt_singleline)


State 224

   86 assign_stmt_singleline: function_call_singleline '=' expr .
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 86 (assign_stmt_singleline)


State 225

   26 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . END SUB
   27         | access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . stmt_list END SUB
   64 stmt_ends: stmt_ends . END_OF_LINE

    IDENTIFIER   shift, and go to state 103
    END          shift, and go to state 256
    CONST        shift, and go to state 105
    DIM          shift, and go to state 106
    WHILE        shift, and go to state 107
    IF           shift, and go to state 108
    SELECT       shift, and go to state 109
    DO           shift, and go to state 111
    FOR          shift, and go to state 112
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    stmt_list                 go to state 257
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 226

   20 function: access FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION .

    $default  reduce using rule 20 (function)


State 227

   21 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr . END FUNCTION
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    END            shift, and go to state 258
    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99


State 228

   22 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list END . FUNCTION

    FUNCTION  shift, and go to state 259


State 229

   23 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN . expr END FUNCTION

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 260
    basic_literal  go to state 70


State 230

   44 parameter_with_type: IDENTIFIER AS basic_literal '(' ')' .

    $default  reduce using rule 44 (parameter_with_type)


State 231

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB .

    $default  reduce using rule 24 (sub_bloc)


State 232

   25 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END . SUB

    SUB  shift, and go to state 261


State 233

   75 var_name: IDENTIFIER '(' expr . ')'
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99
    ')'            shift, and go to state 262


State 234

   65 decl_stmt: CONST var_name AS basic_literal . '=' END_OF_LINE expr
   69 decl_stmt_single_line: CONST var_name AS basic_literal . '=' expr

    '='  shift, and go to state 263


State 235

   66 decl_stmt: DIM var_name AS basic_literal . '=' END_OF_LINE expr
   70 decl_stmt_single_line: DIM var_name AS basic_literal . '=' expr
   71                      | DIM var_name AS basic_literal .

    '='  shift, and go to state 264

    $default  reduce using rule 71 (decl_stmt_single_line)


State 236

   74 decl_stmt_single_line: DIM var_name '=' NEW . basic_literal '(' ')' '{' expr_list '}'

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 265


State 237

   67 decl_stmt: DIM var_name '=' END_OF_LINE . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 266
    basic_literal  go to state 70


State 238

   72 decl_stmt_single_line: DIM var_name '=' expr .
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 72 (decl_stmt_single_line)


State 239

   47 stmt_list: stmt_list . stmt
   91 while_stmt: WHILE expr stmt_ends stmt_list . END WHILE

    IDENTIFIER  shift, and go to state 103
    END         shift, and go to state 267
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 240

   83 assign_stmt_singleline: IDENTIFIER . '=' expr
   84                       | IDENTIFIER . '=' IDENTIFIER
   85                       | IDENTIFIER . '=' function_call_singleline
  115 function_call_singleline: IDENTIFIER . arguments_singleline

    '='  shift, and go to state 268
    '('  shift, and go to state 255

    arguments_singleline  go to state 162


State 241

   69 decl_stmt_single_line: CONST . var_name AS basic_literal '=' expr

    IDENTIFIER  shift, and go to state 164

    var_name  go to state 269


State 242

   70 decl_stmt_single_line: DIM . var_name AS basic_literal '=' expr
   71                      | DIM . var_name AS basic_literal
   72                      | DIM . var_name '=' expr
   73                      | DIM . var_name
   74                      | DIM . var_name '=' NEW basic_literal '(' ')' '{' expr_list '}'

    IDENTIFIER  shift, and go to state 164

    var_name  go to state 270


State 243

  105 if_stmt_single_line: IF . expr THEN single_line_stmt
  106                    | IF . expr THEN single_line_stmt ELSE single_line_stmt

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 271
    basic_literal  go to state 70


State 244

  105 if_stmt_single_line: IF expr THEN single_line_stmt .
  106                    | IF expr THEN single_line_stmt . ELSE single_line_stmt

    ELSE  shift, and go to state 272

    $default  reduce using rule 105 (if_stmt_single_line)


State 245

   64 stmt_ends: stmt_ends . END_OF_LINE
   99 if_stmt_multi_line: IF expr THEN stmt_ends . stmt_list END IF
  100                   | IF expr THEN stmt_ends . stmt_list ELSE stmt_list END IF
  101                   | IF expr THEN stmt_ends . stmt_list elseif_list END IF
  102                   | IF expr THEN stmt_ends . stmt_list elseif_list ELSE stmt_list END IF

    IDENTIFIER   shift, and go to state 103
    CONST        shift, and go to state 105
    DIM          shift, and go to state 106
    WHILE        shift, and go to state 107
    IF           shift, and go to state 108
    SELECT       shift, and go to state 109
    DO           shift, and go to state 111
    FOR          shift, and go to state 112
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    stmt_list                 go to state 273
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 246

   64 stmt_ends: stmt_ends . END_OF_LINE
  107 select_stmt: SELECT CASE expr stmt_ends . case_list END SELECT

    CASE         shift, and go to state 274
    END_OF_LINE  shift, and go to state 24

    case_list  go to state 275
    case_stmt  go to state 276


State 247

   17 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION .

    $default  reduce using rule 17 (function)


State 248

   93 do_loop_stmt: DO stmt_ends stmt_list LOOP . do_loop_condition

    WHILE  shift, and go to state 171
    UNTIL  shift, and go to state 172

    do_loop_condition  go to state 277


State 249

   47 stmt_list: stmt_list . stmt
   92 do_loop_stmt: DO do_loop_condition stmt_ends stmt_list . LOOP

    IDENTIFIER  shift, and go to state 103
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    LOOP        shift, and go to state 278
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 250

   96 for_loop_stmt: FOR IDENTIFIER AS basic_literal . '=' basic_literal TO basic_literal stmt_ends stmt_list NEXT
   97              | FOR IDENTIFIER AS basic_literal . '=' basic_literal TO basic_literal STEP basic_literal stmt_ends stmt_list NEXT

    '='  shift, and go to state 279


State 251

   98 for_each_loop_stmt: FOR EACH IDENTIFIER AS . basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 280


State 252

   19 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END . FUNCTION

    FUNCTION  shift, and go to state 281


State 253

   47 stmt_list: stmt_list . stmt
   68 decl_stmt_single_line: access SUB var_name stmt_list . END SUB

    IDENTIFIER  shift, and go to state 103
    END         shift, and go to state 282
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 254

  136 arguments_multiline: '(' . END_OF_LINE expr_list ')'
  137                    | '(' . END_OF_LINE expr_list END_OF_LINE ')'
  138                    | '(' . expr_list END_OF_LINE ')'

    INT          shift, and go to state 61
    DOUBLE       shift, and go to state 62
    STRING       shift, and go to state 63
    BOOLEAN      shift, and go to state 64
    END_OF_LINE  shift, and go to state 65
    '+'          shift, and go to state 66
    '-'          shift, and go to state 67

    expr           go to state 69
    basic_literal  go to state 70
    expr_list      go to state 283


State 255

  139 arguments_singleline: '(' . expr_list ')'
  140                     | '(' . ')'

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67
    ')'      shift, and go to state 68

    expr           go to state 69
    basic_literal  go to state 70
    expr_list      go to state 284


State 256

   26 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END . SUB

    SUB  shift, and go to state 285


State 257

   27 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list . END SUB
   47 stmt_list: stmt_list . stmt

    IDENTIFIER  shift, and go to state 103
    END         shift, and go to state 286
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 258

   21 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END . FUNCTION

    FUNCTION  shift, and go to state 287


State 259

   22 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION .

    $default  reduce using rule 22 (function)


State 260

   23 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr . END FUNCTION
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    END            shift, and go to state 288
    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99


State 261

   25 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB .

    $default  reduce using rule 25 (sub_bloc)


State 262

   75 var_name: IDENTIFIER '(' expr ')' .

    $default  reduce using rule 75 (var_name)


State 263

   65 decl_stmt: CONST var_name AS basic_literal '=' . END_OF_LINE expr
   69 decl_stmt_single_line: CONST var_name AS basic_literal '=' . expr

    INT          shift, and go to state 61
    DOUBLE       shift, and go to state 62
    STRING       shift, and go to state 63
    BOOLEAN      shift, and go to state 64
    END_OF_LINE  shift, and go to state 289
    '+'          shift, and go to state 66
    '-'          shift, and go to state 67

    expr           go to state 290
    basic_literal  go to state 70


State 264

   66 decl_stmt: DIM var_name AS basic_literal '=' . END_OF_LINE expr
   70 decl_stmt_single_line: DIM var_name AS basic_literal '=' . expr

    INT          shift, and go to state 61
    DOUBLE       shift, and go to state 62
    STRING       shift, and go to state 63
    BOOLEAN      shift, and go to state 64
    END_OF_LINE  shift, and go to state 291
    '+'          shift, and go to state 66
    '-'          shift, and go to state 67

    expr           go to state 292
    basic_literal  go to state 70


State 265

   74 decl_stmt_single_line: DIM var_name '=' NEW basic_literal . '(' ')' '{' expr_list '}'

    '('  shift, and go to state 293


State 266

   67 decl_stmt: DIM var_name '=' END_OF_LINE expr .
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 67 (decl_stmt)


State 267

   91 while_stmt: WHILE expr stmt_ends stmt_list END . WHILE

    WHILE  shift, and go to state 294


State 268

   83 assign_stmt_singleline: IDENTIFIER '=' . expr
   84                       | IDENTIFIER '=' . IDENTIFIER
   85                       | IDENTIFIER '=' . function_call_singleline

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 295
    '+'         shift, and go to state 66
    '-'         shift, and go to state 67

    function_call_singleline  go to state 201
    expr                      go to state 202
    basic_literal             go to state 70


State 269

   69 decl_stmt_single_line: CONST var_name . AS basic_literal '=' expr

    AS  shift, and go to state 296


State 270

   70 decl_stmt_single_line: DIM var_name . AS basic_literal '=' expr
   71                      | DIM var_name . AS basic_literal
   72                      | DIM var_name . '=' expr
   73                      | DIM var_name .
   74                      | DIM var_name . '=' NEW basic_literal '(' ')' '{' expr_list '}'

    AS   shift, and go to state 297
    '='  shift, and go to state 298

    $default  reduce using rule 73 (decl_stmt_single_line)


State 271

  105 if_stmt_single_line: IF expr . THEN single_line_stmt
  106                    | IF expr . THEN single_line_stmt ELSE single_line_stmt
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99
    THEN           shift, and go to state 299


State 272

  106 if_stmt_single_line: IF expr THEN single_line_stmt ELSE . single_line_stmt

    IDENTIFIER  shift, and go to state 240
    CONST       shift, and go to state 241
    DIM         shift, and go to state 242
    IF          shift, and go to state 243
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    single_line_stmt          go to state 300
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    if_stmt_single_line       go to state 127
    function_call_singleline  go to state 130


State 273

   47 stmt_list: stmt_list . stmt
   99 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list . END IF
  100                   | IF expr THEN stmt_ends stmt_list . ELSE stmt_list END IF
  101                   | IF expr THEN stmt_ends stmt_list . elseif_list END IF
  102                   | IF expr THEN stmt_ends stmt_list . elseif_list ELSE stmt_list END IF

    IDENTIFIER  shift, and go to state 103
    END         shift, and go to state 301
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    ELSEIF      shift, and go to state 302
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6
    ELSE        shift, and go to state 303

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    elseif_list               go to state 304
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 274

  110 case_stmt: CASE . expr stmt_ends stmt_list
  111          | CASE . IS expr stmt_ends stmt_list
  112          | CASE . expr TO expr stmt_ends stmt_list
  113          | CASE . ELSE stmt_ends stmt_list

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    IS       shift, and go to state 305
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67
    ELSE     shift, and go to state 306

    expr           go to state 307
    basic_literal  go to state 70


State 275

  107 select_stmt: SELECT CASE expr stmt_ends case_list . END SELECT
  109 case_list: case_list . case_stmt

    END   shift, and go to state 308
    CASE  shift, and go to state 274

    case_stmt  go to state 309


State 276

  108 case_list: case_stmt .

    $default  reduce using rule 108 (case_list)


State 277

   93 do_loop_stmt: DO stmt_ends stmt_list LOOP do_loop_condition .

    $default  reduce using rule 93 (do_loop_stmt)


State 278

   92 do_loop_stmt: DO do_loop_condition stmt_ends stmt_list LOOP .

    $default  reduce using rule 92 (do_loop_stmt)


State 279

   96 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' . basic_literal TO basic_literal stmt_ends stmt_list NEXT
   97              | FOR IDENTIFIER AS basic_literal '=' . basic_literal TO basic_literal STEP basic_literal stmt_ends stmt_list NEXT

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 310


State 280

   98 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal . IN IDENTIFIER stmt_ends stmt_list NEXT

    IN  shift, and go to state 311


State 281

   19 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION .

    $default  reduce using rule 19 (function)


State 282

   68 decl_stmt_single_line: access SUB var_name stmt_list END . SUB

    SUB  shift, and go to state 312


State 283

  138 arguments_multiline: '(' expr_list . END_OF_LINE ')'
  144 expr_list: expr_list . ',' expr

    END_OF_LINE  shift, and go to state 100
    ','          shift, and go to state 102


State 284

  139 arguments_singleline: '(' expr_list . ')'
  144 expr_list: expr_list . ',' expr

    ')'  shift, and go to state 101
    ','  shift, and go to state 102


State 285

   26 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB .

    $default  reduce using rule 26 (sub_bloc)


State 286

   27 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END . SUB

    SUB  shift, and go to state 313


State 287

   21 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION .

    $default  reduce using rule 21 (function)


State 288

   23 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END . FUNCTION

    FUNCTION  shift, and go to state 314


State 289

   65 decl_stmt: CONST var_name AS basic_literal '=' END_OF_LINE . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 315
    basic_literal  go to state 70


State 290

   69 decl_stmt_single_line: CONST var_name AS basic_literal '=' expr .
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 69 (decl_stmt_single_line)


State 291

   66 decl_stmt: DIM var_name AS basic_literal '=' END_OF_LINE . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 316
    basic_literal  go to state 70


State 292

   70 decl_stmt_single_line: DIM var_name AS basic_literal '=' expr .
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 70 (decl_stmt_single_line)


State 293

   74 decl_stmt_single_line: DIM var_name '=' NEW basic_literal '(' . ')' '{' expr_list '}'

    ')'  shift, and go to state 317


State 294

   91 while_stmt: WHILE expr stmt_ends stmt_list END WHILE .

    $default  reduce using rule 91 (while_stmt)


State 295

   84 assign_stmt_singleline: IDENTIFIER '=' IDENTIFIER .
  115 function_call_singleline: IDENTIFIER . arguments_singleline

    '('  shift, and go to state 255

    $default  reduce using rule 84 (assign_stmt_singleline)

    arguments_singleline  go to state 162


State 296

   69 decl_stmt_single_line: CONST var_name AS . basic_literal '=' expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 318


State 297

   70 decl_stmt_single_line: DIM var_name AS . basic_literal '=' expr
   71                      | DIM var_name AS . basic_literal

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 319


State 298

   72 decl_stmt_single_line: DIM var_name '=' . expr
   74                      | DIM var_name '=' . NEW basic_literal '(' ')' '{' expr_list '}'

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    NEW      shift, and go to state 236
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 238
    basic_literal  go to state 70


State 299

  105 if_stmt_single_line: IF expr THEN . single_line_stmt
  106                    | IF expr THEN . single_line_stmt ELSE single_line_stmt

    IDENTIFIER  shift, and go to state 240
    CONST       shift, and go to state 241
    DIM         shift, and go to state 242
    IF          shift, and go to state 243
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    single_line_stmt          go to state 244
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    if_stmt_single_line       go to state 127
    function_call_singleline  go to state 130


State 300

  106 if_stmt_single_line: IF expr THEN single_line_stmt ELSE single_line_stmt .

    $default  reduce using rule 106 (if_stmt_single_line)


State 301

   99 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list END . IF

    IF  shift, and go to state 320


State 302

  103 elseif_list: ELSEIF . expr THEN stmt_list

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 321
    basic_literal  go to state 70


State 303

  100 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list ELSE . stmt_list END IF

    IDENTIFIER  shift, and go to state 103
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt_list                 go to state 322
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 304

  101 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list . END IF
  102                   | IF expr THEN stmt_ends stmt_list elseif_list . ELSE stmt_list END IF
  104 elseif_list: elseif_list . ELSEIF expr THEN stmt_list

    END     shift, and go to state 323
    ELSEIF  shift, and go to state 324
    ELSE    shift, and go to state 325


State 305

  111 case_stmt: CASE IS . expr stmt_ends stmt_list

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 326
    basic_literal  go to state 70


State 306

  113 case_stmt: CASE ELSE . stmt_ends stmt_list

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 327


State 307

  110 case_stmt: CASE expr . stmt_ends stmt_list
  112          | CASE expr . TO expr stmt_ends stmt_list
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    TO             shift, and go to state 328
    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    stmt_ends  go to state 329


State 308

  107 select_stmt: SELECT CASE expr stmt_ends case_list END . SELECT

    SELECT  shift, and go to state 330


State 309

  109 case_list: case_list case_stmt .

    $default  reduce using rule 109 (case_list)


State 310

   96 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal . TO basic_literal stmt_ends stmt_list NEXT
   97              | FOR IDENTIFIER AS basic_literal '=' basic_literal . TO basic_literal STEP basic_literal stmt_ends stmt_list NEXT

    TO  shift, and go to state 331


State 311

   98 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN . IDENTIFIER stmt_ends stmt_list NEXT

    IDENTIFIER  shift, and go to state 332


State 312

   68 decl_stmt_single_line: access SUB var_name stmt_list END SUB .

    $default  reduce using rule 68 (decl_stmt_single_line)


State 313

   27 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB .

    $default  reduce using rule 27 (sub_bloc)


State 314

   23 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION .

    $default  reduce using rule 23 (function)


State 315

   65 decl_stmt: CONST var_name AS basic_literal '=' END_OF_LINE expr .
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 65 (decl_stmt)


State 316

   66 decl_stmt: DIM var_name AS basic_literal '=' END_OF_LINE expr .
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    $default  reduce using rule 66 (decl_stmt)


State 317

   74 decl_stmt_single_line: DIM var_name '=' NEW basic_literal '(' ')' . '{' expr_list '}'

    '{'  shift, and go to state 333


State 318

   69 decl_stmt_single_line: CONST var_name AS basic_literal . '=' expr

    '='  shift, and go to state 334


State 319

   70 decl_stmt_single_line: DIM var_name AS basic_literal . '=' expr
   71                      | DIM var_name AS basic_literal .

    '='  shift, and go to state 335

    $default  reduce using rule 71 (decl_stmt_single_line)


State 320

   99 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list END IF .

    $default  reduce using rule 99 (if_stmt_multi_line)


State 321

  103 elseif_list: ELSEIF expr . THEN stmt_list
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99
    THEN           shift, and go to state 336


State 322

   47 stmt_list: stmt_list . stmt
  100 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list ELSE stmt_list . END IF

    IDENTIFIER  shift, and go to state 103
    END         shift, and go to state 337
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 323

  101 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list END . IF

    IF  shift, and go to state 338


State 324

  104 elseif_list: elseif_list ELSEIF . expr THEN stmt_list

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 339
    basic_literal  go to state 70


State 325

  102 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list ELSE . stmt_list END IF

    IDENTIFIER  shift, and go to state 103
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt_list                 go to state 340
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 326

  111 case_stmt: CASE IS expr . stmt_ends stmt_list
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    stmt_ends  go to state 341


State 327

   64 stmt_ends: stmt_ends . END_OF_LINE
  113 case_stmt: CASE ELSE stmt_ends . stmt_list

    IDENTIFIER   shift, and go to state 103
    CONST        shift, and go to state 105
    DIM          shift, and go to state 106
    WHILE        shift, and go to state 107
    IF           shift, and go to state 108
    SELECT       shift, and go to state 109
    DO           shift, and go to state 111
    FOR          shift, and go to state 112
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    stmt_list                 go to state 342
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 328

  112 case_stmt: CASE expr TO . expr stmt_ends stmt_list

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 343
    basic_literal  go to state 70


State 329

   64 stmt_ends: stmt_ends . END_OF_LINE
  110 case_stmt: CASE expr stmt_ends . stmt_list

    IDENTIFIER   shift, and go to state 103
    CONST        shift, and go to state 105
    DIM          shift, and go to state 106
    WHILE        shift, and go to state 107
    IF           shift, and go to state 108
    SELECT       shift, and go to state 109
    DO           shift, and go to state 111
    FOR          shift, and go to state 112
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    stmt_list                 go to state 344
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 330

  107 select_stmt: SELECT CASE expr stmt_ends case_list END SELECT .

    $default  reduce using rule 107 (select_stmt)


State 331

   96 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO . basic_literal stmt_ends stmt_list NEXT
   97              | FOR IDENTIFIER AS basic_literal '=' basic_literal TO . basic_literal STEP basic_literal stmt_ends stmt_list NEXT

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 345


State 332

   98 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER . stmt_ends stmt_list NEXT

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 346


State 333

   74 decl_stmt_single_line: DIM var_name '=' NEW basic_literal '(' ')' '{' . expr_list '}'

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 69
    basic_literal  go to state 70
    expr_list      go to state 347


State 334

   69 decl_stmt_single_line: CONST var_name AS basic_literal '=' . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 290
    basic_literal  go to state 70


State 335

   70 decl_stmt_single_line: DIM var_name AS basic_literal '=' . expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64
    '+'      shift, and go to state 66
    '-'      shift, and go to state 67

    expr           go to state 292
    basic_literal  go to state 70


State 336

  103 elseif_list: ELSEIF expr THEN . stmt_list

    IDENTIFIER  shift, and go to state 103
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt_list                 go to state 348
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 337

  100 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list ELSE stmt_list END . IF

    IF  shift, and go to state 349


State 338

  101 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list END IF .

    $default  reduce using rule 101 (if_stmt_multi_line)


State 339

  104 elseif_list: elseif_list ELSEIF expr . THEN stmt_list
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99
    THEN           shift, and go to state 350


State 340

   47 stmt_list: stmt_list . stmt
  102 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list ELSE stmt_list . END IF

    IDENTIFIER  shift, and go to state 103
    END         shift, and go to state 351
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 341

   64 stmt_ends: stmt_ends . END_OF_LINE
  111 case_stmt: CASE IS expr stmt_ends . stmt_list

    IDENTIFIER   shift, and go to state 103
    CONST        shift, and go to state 105
    DIM          shift, and go to state 106
    WHILE        shift, and go to state 107
    IF           shift, and go to state 108
    SELECT       shift, and go to state 109
    DO           shift, and go to state 111
    FOR          shift, and go to state 112
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    stmt_list                 go to state 352
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 342

   47 stmt_list: stmt_list . stmt
  113 case_stmt: CASE ELSE stmt_ends stmt_list .

    IDENTIFIER  shift, and go to state 103
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    $default  reduce using rule 113 (case_stmt)

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 343

  112 case_stmt: CASE expr TO expr . stmt_ends stmt_list
  119 expr: expr . '+' expr
  120     | expr . '-' expr
  121     | expr . '*' expr
  122     | expr . '/' expr
  123     | expr . INT_DIV expr
  124     | expr . '=' expr
  125     | expr . '<' expr
  126     | expr . '>' expr
  127     | expr . '^' expr
  128     | expr . NOT_EQUAL expr
  129     | expr . LESS_OR_EQUAL expr
  130     | expr . MORE_OR_EQUAL expr
  131     | expr . '&' expr

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 87
    '*'            shift, and go to state 88
    '/'            shift, and go to state 89
    INT_DIV        shift, and go to state 90
    '+'            shift, and go to state 91
    '-'            shift, and go to state 92
    '='            shift, and go to state 93
    NOT_EQUAL      shift, and go to state 94
    LESS_OR_EQUAL  shift, and go to state 95
    MORE_OR_EQUAL  shift, and go to state 96
    '>'            shift, and go to state 97
    '<'            shift, and go to state 98
    '&'            shift, and go to state 99

    stmt_ends  go to state 353


State 344

   47 stmt_list: stmt_list . stmt
  110 case_stmt: CASE expr stmt_ends stmt_list .

    IDENTIFIER  shift, and go to state 103
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    $default  reduce using rule 110 (case_stmt)

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 345

   96 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal . stmt_ends stmt_list NEXT
   97              | FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal . STEP basic_literal stmt_ends stmt_list NEXT

    STEP         shift, and go to state 354
    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 355


State 346

   64 stmt_ends: stmt_ends . END_OF_LINE
   98 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends . stmt_list NEXT

    IDENTIFIER   shift, and go to state 103
    CONST        shift, and go to state 105
    DIM          shift, and go to state 106
    WHILE        shift, and go to state 107
    IF           shift, and go to state 108
    SELECT       shift, and go to state 109
    DO           shift, and go to state 111
    FOR          shift, and go to state 112
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    stmt_list                 go to state 356
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 347

   74 decl_stmt_single_line: DIM var_name '=' NEW basic_literal '(' ')' '{' expr_list . '}'
  144 expr_list: expr_list . ',' expr

    ','  shift, and go to state 102
    '}'  shift, and go to state 357


State 348

   47 stmt_list: stmt_list . stmt
  103 elseif_list: ELSEIF expr THEN stmt_list .

    IDENTIFIER  shift, and go to state 103
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    $default  reduce using rule 103 (elseif_list)

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 349

  100 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list ELSE stmt_list END IF .

    $default  reduce using rule 100 (if_stmt_multi_line)


State 350

  104 elseif_list: elseif_list ELSEIF expr THEN . stmt_list

    IDENTIFIER  shift, and go to state 103
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt_list                 go to state 358
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 351

  102 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list ELSE stmt_list END . IF

    IF  shift, and go to state 359


State 352

   47 stmt_list: stmt_list . stmt
  111 case_stmt: CASE IS expr stmt_ends stmt_list .

    IDENTIFIER  shift, and go to state 103
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    $default  reduce using rule 111 (case_stmt)

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 353

   64 stmt_ends: stmt_ends . END_OF_LINE
  112 case_stmt: CASE expr TO expr stmt_ends . stmt_list

    IDENTIFIER   shift, and go to state 103
    CONST        shift, and go to state 105
    DIM          shift, and go to state 106
    WHILE        shift, and go to state 107
    IF           shift, and go to state 108
    SELECT       shift, and go to state 109
    DO           shift, and go to state 111
    FOR          shift, and go to state 112
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    stmt_list                 go to state 360
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 354

   97 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal STEP . basic_literal stmt_ends stmt_list NEXT

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 361


State 355

   64 stmt_ends: stmt_ends . END_OF_LINE
   96 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal stmt_ends . stmt_list NEXT

    IDENTIFIER   shift, and go to state 103
    CONST        shift, and go to state 105
    DIM          shift, and go to state 106
    WHILE        shift, and go to state 107
    IF           shift, and go to state 108
    SELECT       shift, and go to state 109
    DO           shift, and go to state 111
    FOR          shift, and go to state 112
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    stmt_list                 go to state 362
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 356

   47 stmt_list: stmt_list . stmt
   98 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list . NEXT

    IDENTIFIER  shift, and go to state 103
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    NEXT        shift, and go to state 363
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 357

   74 decl_stmt_single_line: DIM var_name '=' NEW basic_literal '(' ')' '{' expr_list '}' .

    $default  reduce using rule 74 (decl_stmt_single_line)


State 358

   47 stmt_list: stmt_list . stmt
  104 elseif_list: elseif_list ELSEIF expr THEN stmt_list .

    IDENTIFIER  shift, and go to state 103
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    $default  reduce using rule 104 (elseif_list)

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 359

  102 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF .

    $default  reduce using rule 102 (if_stmt_multi_line)


State 360

   47 stmt_list: stmt_list . stmt
  112 case_stmt: CASE expr TO expr stmt_ends stmt_list .

    IDENTIFIER  shift, and go to state 103
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    $default  reduce using rule 112 (case_stmt)

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 361

   97 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal STEP basic_literal . stmt_ends stmt_list NEXT

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 364


State 362

   47 stmt_list: stmt_list . stmt
   96 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal stmt_ends stmt_list . NEXT

    IDENTIFIER  shift, and go to state 103
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    NEXT        shift, and go to state 365
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 363

   98 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT .

    $default  reduce using rule 98 (for_each_loop_stmt)


State 364

   64 stmt_ends: stmt_ends . END_OF_LINE
   97 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal STEP basic_literal stmt_ends . stmt_list NEXT

    IDENTIFIER   shift, and go to state 103
    CONST        shift, and go to state 105
    DIM          shift, and go to state 106
    WHILE        shift, and go to state 107
    IF           shift, and go to state 108
    SELECT       shift, and go to state 109
    DO           shift, and go to state 111
    FOR          shift, and go to state 112
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    stmt_list                 go to state 366
    stmt                      go to state 114
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 365

   96 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal stmt_ends stmt_list NEXT .

    $default  reduce using rule 96 (for_loop_stmt)


State 366

   47 stmt_list: stmt_list . stmt
   97 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal STEP basic_literal stmt_ends stmt_list . NEXT

    IDENTIFIER  shift, and go to state 103
    CONST       shift, and go to state 105
    DIM         shift, and go to state 106
    WHILE       shift, and go to state 107
    IF          shift, and go to state 108
    SELECT      shift, and go to state 109
    DO          shift, and go to state 111
    FOR         shift, and go to state 112
    NEXT        shift, and go to state 367
    PRIVATE     shift, and go to state 3
    PROTECTED   shift, and go to state 4
    PUBLIC      shift, and go to state 5
    FRIEND      shift, and go to state 6

    stmt                      go to state 179
    single_line_stmt          go to state 115
    multi_line_stmt           go to state 116
    decl_stmt                 go to state 117
    decl_stmt_single_line     go to state 118
    access                    go to state 119
    assign_stmt_singleline    go to state 120
    assign_stmt_multiline     go to state 121
    while_stmt                go to state 122
    do_loop_stmt              go to state 123
    for_loop_stmt             go to state 124
    for_each_loop_stmt        go to state 125
    if_stmt_multi_line        go to state 126
    if_stmt_single_line       go to state 127
    select_stmt               go to state 128
    function_call_multiline   go to state 129
    function_call_singleline  go to state 130


State 367

   97 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal STEP basic_literal stmt_ends stmt_list NEXT .

    $default  reduce using rule 97 (for_loop_stmt)
