Terminals unused in grammar

    ENDL
    ASSIGN_CONSTRUCT
    ASSIGN_MULT
    ASSIGN_ORD_DIV
    ASSIGN_INT_DIV
    ASSIGN_ADD
    ASSIGN_SUB
    ASSIGN_LSHIFT
    ASSIGN_RSHIFT
    ASSIGN_CONCAT


State 47 conflicts: 1 shift/reduce
State 48 conflicts: 1 shift/reduce
State 49 conflicts: 1 shift/reduce


Grammar

    0 $accept: root $end

    1 root: program_items_list

    2 program_items_list: %empty
    3                   | program_items_list_not_empty

    4 program_items_list_not_empty: program_item
    5                             | program_items_list_not_empty program_item

    6 program_item: stmt
    7             | IMPORTS IDENTIFIER stmt_ends

    8 stmt_ends: END_OF_LINE
    9          | stmt_ends END_OF_LINE

   10 stmt: decl_stmt stmt_ends
   11     | exec_stmt stmt_ends

   12 decl_stmt: ACCESS SUB var_name stmt END SUB
   13          | CONST var_name AS basic_literal '=' expr
   14          | DIM var_name AS basic_literal '=' expr
   15          | DIM var_name AS basic_literal
   16          | DIM var_name '=' expr
   17          | DIM var_name

   18 var_name: IDENTIFIER '(' expr ')'
   19         | IDENTIFIER

   20 exec_stmt: assign_stmt
   21          | while_stmt
   22          | if_stmt
   23          | select_stmt
   24          | case_stmt

   25 assign_stmt: IDENTIFIER '=' expr
   26            | IDENTIFIER '=' IDENTIFIER

   27 while_stmt: WHILE expr stmt_ends stmt END WHILE

   28 if_stmt: IF expr THEN stmt
   29        | IF expr THEN stmt_ends stmt ELSE stmt END IF
   30        | IF expr THEN stmt_ends stmt elseif_list ELSE stmt END IF

   31 elseif_list: ELSEIF expr THEN stmt
   32            | elseif_list ELSEIF expr THEN stmt

   33 select_stmt: SELECT CASE expr case_stmt END SELECT

   34 case_stmt: CASE expr stmt
   35          | CASE IS expr stmt
   36          | CASE expr TO expr stmt
   37          | CASE ELSE stmt
   38          | case_stmt case_stmt

   39 expr: operand
   40     | '-' expr
   41     | '+' expr
   42     | expr '+' expr
   43     | expr '-' expr
   44     | expr '*' expr
   45     | expr '/' expr
   46     | expr INT_DIV expr
   47     | expr '=' expr
   48     | expr '<' expr
   49     | expr '>' expr
   50     | expr '^' expr
   51     | expr NOT_EQUAL expr
   52     | expr LESS_OR_EQUAL expr
   53     | expr MORE_OR_EQUAL expr
   54     | expr '&' expr

   55 operand: basic_literal
   56        | function_literal

   57 basic_literal: INT
   58              | STRING
   59              | BOOLEAN
   60              | DOUBLE

   61 function_literal: IDENTIFIER arguments

   62 arguments: '(' expr_list ')'
   63          | '(' ')'

   64 expr_list: expr
   65          | expr_list ',' expr


Terminals, with rules where they appear

    $end (0) 0
    '&' (38) 54
    '(' (40) 18 62 63
    ')' (41) 18 62 63
    '*' (42) 44
    '+' (43) 41 42
    ',' (44) 65
    '-' (45) 40 43
    '/' (47) 45
    '<' (60) 48
    '=' (61) 13 14 16 25 26 47
    '>' (62) 49
    '^' (94) 50
    error (256)
    INT <int_val> (258) 57
    DOUBLE <double_val> (259) 60
    STRING <str_val> (260) 58
    BOOLEAN <bool_val> (261) 59
    IDENTIFIER <id_name> (262) 7 18 19 25 26 61
    ENDL (263)
    ACCESS (264) 12
    SUB (265) 12
    END (266) 12 27 29 30 33
    CONST (267) 13
    DIM (268) 14 15 16 17
    AS (269) 13 14 15
    WHILE (270) 27
    IF (271) 28 29 30
    THEN (272) 28 29 30 31 32
    ELSE (273) 29 30 37
    ELSEIF (274) 31 32
    SELECT (275) 33
    CASE (276) 33 34 35 36 37
    IS (277) 35
    TO (278) 36
    IMPORTS (279) 7
    END_OF_LINE (280) 8 9
    UNARY_MINUS (281)
    UNARY_PLUS (282)
    ASSIGN_CONSTRUCT (283)
    ASSIGN_MULT (284)
    ASSIGN_ORD_DIV (285)
    ASSIGN_INT_DIV (286)
    ASSIGN_ADD (287)
    ASSIGN_SUB (288)
    ASSIGN_LSHIFT (289)
    ASSIGN_RSHIFT (290)
    ASSIGN_CONCAT (291)
    INT_DIV (292) 46
    NOT_EQUAL (293) 51
    LESS_OR_EQUAL (294) 52
    MORE_OR_EQUAL (295) 53


Nonterminals, with rules where they appear

    $accept (53)
        on left: 0
    root (54)
        on left: 1
        on right: 0
    program_items_list (55)
        on left: 2 3
        on right: 1
    program_items_list_not_empty (56)
        on left: 4 5
        on right: 3 5
    program_item (57)
        on left: 6 7
        on right: 4 5
    stmt_ends (58)
        on left: 8 9
        on right: 7 9 10 11 27 29 30
    stmt (59)
        on left: 10 11
        on right: 6 12 27 28 29 30 31 32 34 35 36 37
    decl_stmt (60)
        on left: 12 13 14 15 16 17
        on right: 10
    var_name (61)
        on left: 18 19
        on right: 12 13 14 15 16 17
    exec_stmt (62)
        on left: 20 21 22 23 24
        on right: 11
    assign_stmt (63)
        on left: 25 26
        on right: 20
    while_stmt (64)
        on left: 27
        on right: 21
    if_stmt (65)
        on left: 28 29 30
        on right: 22
    elseif_list (66)
        on left: 31 32
        on right: 30 32
    select_stmt (67)
        on left: 33
        on right: 23
    case_stmt (68)
        on left: 34 35 36 37 38
        on right: 24 33 38
    expr (69)
        on left: 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54
        on right: 13 14 16 18 25 27 28 29 30 31 32 33 34 35 36 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 64 65
    operand (70)
        on left: 55 56
        on right: 39
    basic_literal (71)
        on left: 57 58 59 60
        on right: 13 14 15 55
    function_literal (72)
        on left: 61
        on right: 56
    arguments (73)
        on left: 62 63
        on right: 61
    expr_list (74)
        on left: 64 65
        on right: 62 65


State 0

    0 $accept: . root $end

    IDENTIFIER  shift, and go to state 1
    ACCESS      shift, and go to state 2
    CONST       shift, and go to state 3
    DIM         shift, and go to state 4
    WHILE       shift, and go to state 5
    IF          shift, and go to state 6
    SELECT      shift, and go to state 7
    CASE        shift, and go to state 8
    IMPORTS     shift, and go to state 9

    $default  reduce using rule 2 (program_items_list)

    root                          go to state 10
    program_items_list            go to state 11
    program_items_list_not_empty  go to state 12
    program_item                  go to state 13
    stmt                          go to state 14
    decl_stmt                     go to state 15
    exec_stmt                     go to state 16
    assign_stmt                   go to state 17
    while_stmt                    go to state 18
    if_stmt                       go to state 19
    select_stmt                   go to state 20
    case_stmt                     go to state 21


State 1

   25 assign_stmt: IDENTIFIER . '=' expr
   26            | IDENTIFIER . '=' IDENTIFIER

    '='  shift, and go to state 22


State 2

   12 decl_stmt: ACCESS . SUB var_name stmt END SUB

    SUB  shift, and go to state 23


State 3

   13 decl_stmt: CONST . var_name AS basic_literal '=' expr

    IDENTIFIER  shift, and go to state 24

    var_name  go to state 25


State 4

   14 decl_stmt: DIM . var_name AS basic_literal '=' expr
   15          | DIM . var_name AS basic_literal
   16          | DIM . var_name '=' expr
   17          | DIM . var_name

    IDENTIFIER  shift, and go to state 24

    var_name  go to state 26


State 5

   27 while_stmt: WHILE . expr stmt_ends stmt END WHILE

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 34
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 6

   28 if_stmt: IF . expr THEN stmt
   29        | IF . expr THEN stmt_ends stmt ELSE stmt END IF
   30        | IF . expr THEN stmt_ends stmt elseif_list ELSE stmt END IF

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 38
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 7

   33 select_stmt: SELECT . CASE expr case_stmt END SELECT

    CASE  shift, and go to state 39


State 8

   34 case_stmt: CASE . expr stmt
   35          | CASE . IS expr stmt
   36          | CASE . expr TO expr stmt
   37          | CASE . ELSE stmt

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    ELSE        shift, and go to state 40
    IS          shift, and go to state 41
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 42
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 9

    7 program_item: IMPORTS . IDENTIFIER stmt_ends

    IDENTIFIER  shift, and go to state 43


State 10

    0 $accept: root . $end

    $end  shift, and go to state 44


State 11

    1 root: program_items_list .

    $default  reduce using rule 1 (root)


State 12

    3 program_items_list: program_items_list_not_empty .
    5 program_items_list_not_empty: program_items_list_not_empty . program_item

    IDENTIFIER  shift, and go to state 1
    ACCESS      shift, and go to state 2
    CONST       shift, and go to state 3
    DIM         shift, and go to state 4
    WHILE       shift, and go to state 5
    IF          shift, and go to state 6
    SELECT      shift, and go to state 7
    CASE        shift, and go to state 8
    IMPORTS     shift, and go to state 9

    $default  reduce using rule 3 (program_items_list)

    program_item  go to state 45
    stmt          go to state 14
    decl_stmt     go to state 15
    exec_stmt     go to state 16
    assign_stmt   go to state 17
    while_stmt    go to state 18
    if_stmt       go to state 19
    select_stmt   go to state 20
    case_stmt     go to state 21


State 13

    4 program_items_list_not_empty: program_item .

    $default  reduce using rule 4 (program_items_list_not_empty)


State 14

    6 program_item: stmt .

    $default  reduce using rule 6 (program_item)


State 15

   10 stmt: decl_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 46

    stmt_ends  go to state 47


State 16

   11 stmt: exec_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 46

    stmt_ends  go to state 48


State 17

   20 exec_stmt: assign_stmt .

    $default  reduce using rule 20 (exec_stmt)


State 18

   21 exec_stmt: while_stmt .

    $default  reduce using rule 21 (exec_stmt)


State 19

   22 exec_stmt: if_stmt .

    $default  reduce using rule 22 (exec_stmt)


State 20

   23 exec_stmt: select_stmt .

    $default  reduce using rule 23 (exec_stmt)


State 21

   24 exec_stmt: case_stmt .
   38 case_stmt: case_stmt . case_stmt

    CASE  shift, and go to state 8

    $default  reduce using rule 24 (exec_stmt)

    case_stmt  go to state 49


State 22

   25 assign_stmt: IDENTIFIER '=' . expr
   26            | IDENTIFIER '=' . IDENTIFIER

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 50
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 51
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 23

   12 decl_stmt: ACCESS SUB . var_name stmt END SUB

    IDENTIFIER  shift, and go to state 24

    var_name  go to state 52


State 24

   18 var_name: IDENTIFIER . '(' expr ')'
   19         | IDENTIFIER .

    '('  shift, and go to state 53

    $default  reduce using rule 19 (var_name)


State 25

   13 decl_stmt: CONST var_name . AS basic_literal '=' expr

    AS  shift, and go to state 54


State 26

   14 decl_stmt: DIM var_name . AS basic_literal '=' expr
   15          | DIM var_name . AS basic_literal
   16          | DIM var_name . '=' expr
   17          | DIM var_name .

    AS   shift, and go to state 55
    '='  shift, and go to state 56

    $default  reduce using rule 17 (decl_stmt)


State 27

   57 basic_literal: INT .

    $default  reduce using rule 57 (basic_literal)


State 28

   60 basic_literal: DOUBLE .

    $default  reduce using rule 60 (basic_literal)


State 29

   58 basic_literal: STRING .

    $default  reduce using rule 58 (basic_literal)


State 30

   59 basic_literal: BOOLEAN .

    $default  reduce using rule 59 (basic_literal)


State 31

   61 function_literal: IDENTIFIER . arguments

    '('  shift, and go to state 57

    arguments  go to state 58


State 32

   41 expr: '+' . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 59
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 33

   40 expr: '-' . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 60
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 34

   27 while_stmt: WHILE expr . stmt_ends stmt END WHILE
   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    END_OF_LINE    shift, and go to state 46
    '^'            shift, and go to state 61
    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    stmt_ends  go to state 74


State 35

   39 expr: operand .

    $default  reduce using rule 39 (expr)


State 36

   55 operand: basic_literal .

    $default  reduce using rule 55 (operand)


State 37

   56 operand: function_literal .

    $default  reduce using rule 56 (operand)


State 38

   28 if_stmt: IF expr . THEN stmt
   29        | IF expr . THEN stmt_ends stmt ELSE stmt END IF
   30        | IF expr . THEN stmt_ends stmt elseif_list ELSE stmt END IF
   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    THEN           shift, and go to state 75
    '^'            shift, and go to state 61
    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73


State 39

   33 select_stmt: SELECT CASE . expr case_stmt END SELECT

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 76
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 40

   37 case_stmt: CASE ELSE . stmt

    IDENTIFIER  shift, and go to state 1
    ACCESS      shift, and go to state 2
    CONST       shift, and go to state 3
    DIM         shift, and go to state 4
    WHILE       shift, and go to state 5
    IF          shift, and go to state 6
    SELECT      shift, and go to state 7
    CASE        shift, and go to state 8

    stmt         go to state 77
    decl_stmt    go to state 15
    exec_stmt    go to state 16
    assign_stmt  go to state 17
    while_stmt   go to state 18
    if_stmt      go to state 19
    select_stmt  go to state 20
    case_stmt    go to state 21


State 41

   35 case_stmt: CASE IS . expr stmt

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 78
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 42

   34 case_stmt: CASE expr . stmt
   36          | CASE expr . TO expr stmt
   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    IDENTIFIER     shift, and go to state 1
    ACCESS         shift, and go to state 2
    CONST          shift, and go to state 3
    DIM            shift, and go to state 4
    WHILE          shift, and go to state 5
    IF             shift, and go to state 6
    SELECT         shift, and go to state 7
    CASE           shift, and go to state 8
    TO             shift, and go to state 79
    '^'            shift, and go to state 61
    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    stmt         go to state 80
    decl_stmt    go to state 15
    exec_stmt    go to state 16
    assign_stmt  go to state 17
    while_stmt   go to state 18
    if_stmt      go to state 19
    select_stmt  go to state 20
    case_stmt    go to state 21


State 43

    7 program_item: IMPORTS IDENTIFIER . stmt_ends

    END_OF_LINE  shift, and go to state 46

    stmt_ends  go to state 81


State 44

    0 $accept: root $end .

    $default  accept


State 45

    5 program_items_list_not_empty: program_items_list_not_empty program_item .

    $default  reduce using rule 5 (program_items_list_not_empty)


State 46

    8 stmt_ends: END_OF_LINE .

    $default  reduce using rule 8 (stmt_ends)


State 47

    9 stmt_ends: stmt_ends . END_OF_LINE
   10 stmt: decl_stmt stmt_ends .

    END_OF_LINE  shift, and go to state 82

    END_OF_LINE  [reduce using rule 10 (stmt)]
    $default     reduce using rule 10 (stmt)


State 48

    9 stmt_ends: stmt_ends . END_OF_LINE
   11 stmt: exec_stmt stmt_ends .

    END_OF_LINE  shift, and go to state 82

    END_OF_LINE  [reduce using rule 11 (stmt)]
    $default     reduce using rule 11 (stmt)


State 49

   38 case_stmt: case_stmt . case_stmt
   38          | case_stmt case_stmt .

    CASE  shift, and go to state 8

    CASE      [reduce using rule 38 (case_stmt)]
    $default  reduce using rule 38 (case_stmt)

    case_stmt  go to state 49


State 50

   26 assign_stmt: IDENTIFIER '=' IDENTIFIER .
   61 function_literal: IDENTIFIER . arguments

    '('  shift, and go to state 57

    $default  reduce using rule 26 (assign_stmt)

    arguments  go to state 58


State 51

   25 assign_stmt: IDENTIFIER '=' expr .
   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    '^'            shift, and go to state 61
    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    $default  reduce using rule 25 (assign_stmt)


State 52

   12 decl_stmt: ACCESS SUB var_name . stmt END SUB

    IDENTIFIER  shift, and go to state 1
    ACCESS      shift, and go to state 2
    CONST       shift, and go to state 3
    DIM         shift, and go to state 4
    WHILE       shift, and go to state 5
    IF          shift, and go to state 6
    SELECT      shift, and go to state 7
    CASE        shift, and go to state 8

    stmt         go to state 83
    decl_stmt    go to state 15
    exec_stmt    go to state 16
    assign_stmt  go to state 17
    while_stmt   go to state 18
    if_stmt      go to state 19
    select_stmt  go to state 20
    case_stmt    go to state 21


State 53

   18 var_name: IDENTIFIER '(' . expr ')'

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 84
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 54

   13 decl_stmt: CONST var_name AS . basic_literal '=' expr

    INT      shift, and go to state 27
    DOUBLE   shift, and go to state 28
    STRING   shift, and go to state 29
    BOOLEAN  shift, and go to state 30

    basic_literal  go to state 85


State 55

   14 decl_stmt: DIM var_name AS . basic_literal '=' expr
   15          | DIM var_name AS . basic_literal

    INT      shift, and go to state 27
    DOUBLE   shift, and go to state 28
    STRING   shift, and go to state 29
    BOOLEAN  shift, and go to state 30

    basic_literal  go to state 86


State 56

   16 decl_stmt: DIM var_name '=' . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 87
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 57

   62 arguments: '(' . expr_list ')'
   63          | '(' . ')'

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33
    ')'         shift, and go to state 88

    expr              go to state 89
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37
    expr_list         go to state 90


State 58

   61 function_literal: IDENTIFIER arguments .

    $default  reduce using rule 61 (function_literal)


State 59

   41 expr: '+' expr .
   42     | expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    '^'            shift, and go to state 61
    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    $default  reduce using rule 41 (expr)


State 60

   40 expr: '-' expr .
   42     | expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    '^'            shift, and go to state 61
    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    $default  reduce using rule 40 (expr)


State 61

   50 expr: expr '^' . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 91
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 62

   44 expr: expr '*' . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 92
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 63

   45 expr: expr '/' . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 93
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 64

   46 expr: expr INT_DIV . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 94
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 65

   42 expr: expr '+' . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 95
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 66

   43 expr: expr '-' . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 96
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 67

   47 expr: expr '=' . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 97
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 68

   51 expr: expr NOT_EQUAL . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 98
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 69

   52 expr: expr LESS_OR_EQUAL . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 99
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 70

   53 expr: expr MORE_OR_EQUAL . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 100
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 71

   49 expr: expr '>' . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 101
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 72

   48 expr: expr '<' . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 102
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 73

   54 expr: expr '&' . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 103
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 74

    9 stmt_ends: stmt_ends . END_OF_LINE
   27 while_stmt: WHILE expr stmt_ends . stmt END WHILE

    IDENTIFIER   shift, and go to state 1
    ACCESS       shift, and go to state 2
    CONST        shift, and go to state 3
    DIM          shift, and go to state 4
    WHILE        shift, and go to state 5
    IF           shift, and go to state 6
    SELECT       shift, and go to state 7
    CASE         shift, and go to state 8
    END_OF_LINE  shift, and go to state 82

    stmt         go to state 104
    decl_stmt    go to state 15
    exec_stmt    go to state 16
    assign_stmt  go to state 17
    while_stmt   go to state 18
    if_stmt      go to state 19
    select_stmt  go to state 20
    case_stmt    go to state 21


State 75

   28 if_stmt: IF expr THEN . stmt
   29        | IF expr THEN . stmt_ends stmt ELSE stmt END IF
   30        | IF expr THEN . stmt_ends stmt elseif_list ELSE stmt END IF

    IDENTIFIER   shift, and go to state 1
    ACCESS       shift, and go to state 2
    CONST        shift, and go to state 3
    DIM          shift, and go to state 4
    WHILE        shift, and go to state 5
    IF           shift, and go to state 6
    SELECT       shift, and go to state 7
    CASE         shift, and go to state 8
    END_OF_LINE  shift, and go to state 46

    stmt_ends    go to state 105
    stmt         go to state 106
    decl_stmt    go to state 15
    exec_stmt    go to state 16
    assign_stmt  go to state 17
    while_stmt   go to state 18
    if_stmt      go to state 19
    select_stmt  go to state 20
    case_stmt    go to state 21


State 76

   33 select_stmt: SELECT CASE expr . case_stmt END SELECT
   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    CASE           shift, and go to state 8
    '^'            shift, and go to state 61
    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    case_stmt  go to state 107


State 77

   37 case_stmt: CASE ELSE stmt .

    $default  reduce using rule 37 (case_stmt)


State 78

   35 case_stmt: CASE IS expr . stmt
   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    IDENTIFIER     shift, and go to state 1
    ACCESS         shift, and go to state 2
    CONST          shift, and go to state 3
    DIM            shift, and go to state 4
    WHILE          shift, and go to state 5
    IF             shift, and go to state 6
    SELECT         shift, and go to state 7
    CASE           shift, and go to state 8
    '^'            shift, and go to state 61
    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    stmt         go to state 108
    decl_stmt    go to state 15
    exec_stmt    go to state 16
    assign_stmt  go to state 17
    while_stmt   go to state 18
    if_stmt      go to state 19
    select_stmt  go to state 20
    case_stmt    go to state 21


State 79

   36 case_stmt: CASE expr TO . expr stmt

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 109
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 80

   34 case_stmt: CASE expr stmt .

    $default  reduce using rule 34 (case_stmt)


State 81

    7 program_item: IMPORTS IDENTIFIER stmt_ends .
    9 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 82

    $default  reduce using rule 7 (program_item)


State 82

    9 stmt_ends: stmt_ends END_OF_LINE .

    $default  reduce using rule 9 (stmt_ends)


State 83

   12 decl_stmt: ACCESS SUB var_name stmt . END SUB

    END  shift, and go to state 110


State 84

   18 var_name: IDENTIFIER '(' expr . ')'
   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    '^'            shift, and go to state 61
    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73
    ')'            shift, and go to state 111


State 85

   13 decl_stmt: CONST var_name AS basic_literal . '=' expr

    '='  shift, and go to state 112


State 86

   14 decl_stmt: DIM var_name AS basic_literal . '=' expr
   15          | DIM var_name AS basic_literal .

    '='  shift, and go to state 113

    $default  reduce using rule 15 (decl_stmt)


State 87

   16 decl_stmt: DIM var_name '=' expr .
   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    '^'            shift, and go to state 61
    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    $default  reduce using rule 16 (decl_stmt)


State 88

   63 arguments: '(' ')' .

    $default  reduce using rule 63 (arguments)


State 89

   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr
   64 expr_list: expr .

    '^'            shift, and go to state 61
    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    $default  reduce using rule 64 (expr_list)


State 90

   62 arguments: '(' expr_list . ')'
   65 expr_list: expr_list . ',' expr

    ')'  shift, and go to state 114
    ','  shift, and go to state 115


State 91

   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   50     | expr '^' expr .
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    $default  reduce using rule 50 (expr)


State 92

   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   44     | expr '*' expr .
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    $default  reduce using rule 44 (expr)


State 93

   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   45     | expr '/' expr .
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    $default  reduce using rule 45 (expr)


State 94

   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   46     | expr INT_DIV expr .
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    $default  reduce using rule 46 (expr)


State 95

   42 expr: expr . '+' expr
   42     | expr '+' expr .
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    $default  reduce using rule 42 (expr)


State 96

   42 expr: expr . '+' expr
   43     | expr . '-' expr
   43     | expr '-' expr .
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    $default  reduce using rule 43 (expr)


State 97

   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   47     | expr '=' expr .
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    '&'  shift, and go to state 73

    $default  reduce using rule 47 (expr)


State 98

   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   51     | expr NOT_EQUAL expr .
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    '&'  shift, and go to state 73

    $default  reduce using rule 51 (expr)


State 99

   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   52     | expr LESS_OR_EQUAL expr .
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    '&'  shift, and go to state 73

    $default  reduce using rule 52 (expr)


State 100

   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   53     | expr MORE_OR_EQUAL expr .
   54     | expr . '&' expr

    '&'  shift, and go to state 73

    $default  reduce using rule 53 (expr)


State 101

   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   49     | expr '>' expr .
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    '&'  shift, and go to state 73

    $default  reduce using rule 49 (expr)


State 102

   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   48     | expr '<' expr .
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    '&'  shift, and go to state 73

    $default  reduce using rule 48 (expr)


State 103

   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr
   54     | expr '&' expr .

    $default  reduce using rule 54 (expr)


State 104

   27 while_stmt: WHILE expr stmt_ends stmt . END WHILE

    END  shift, and go to state 116


State 105

    9 stmt_ends: stmt_ends . END_OF_LINE
   29 if_stmt: IF expr THEN stmt_ends . stmt ELSE stmt END IF
   30        | IF expr THEN stmt_ends . stmt elseif_list ELSE stmt END IF

    IDENTIFIER   shift, and go to state 1
    ACCESS       shift, and go to state 2
    CONST        shift, and go to state 3
    DIM          shift, and go to state 4
    WHILE        shift, and go to state 5
    IF           shift, and go to state 6
    SELECT       shift, and go to state 7
    CASE         shift, and go to state 8
    END_OF_LINE  shift, and go to state 82

    stmt         go to state 117
    decl_stmt    go to state 15
    exec_stmt    go to state 16
    assign_stmt  go to state 17
    while_stmt   go to state 18
    if_stmt      go to state 19
    select_stmt  go to state 20
    case_stmt    go to state 21


State 106

   28 if_stmt: IF expr THEN stmt .

    $default  reduce using rule 28 (if_stmt)


State 107

   33 select_stmt: SELECT CASE expr case_stmt . END SELECT
   38 case_stmt: case_stmt . case_stmt

    END   shift, and go to state 118
    CASE  shift, and go to state 8

    case_stmt  go to state 49


State 108

   35 case_stmt: CASE IS expr stmt .

    $default  reduce using rule 35 (case_stmt)


State 109

   36 case_stmt: CASE expr TO expr . stmt
   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    IDENTIFIER     shift, and go to state 1
    ACCESS         shift, and go to state 2
    CONST          shift, and go to state 3
    DIM            shift, and go to state 4
    WHILE          shift, and go to state 5
    IF             shift, and go to state 6
    SELECT         shift, and go to state 7
    CASE           shift, and go to state 8
    '^'            shift, and go to state 61
    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    stmt         go to state 119
    decl_stmt    go to state 15
    exec_stmt    go to state 16
    assign_stmt  go to state 17
    while_stmt   go to state 18
    if_stmt      go to state 19
    select_stmt  go to state 20
    case_stmt    go to state 21


State 110

   12 decl_stmt: ACCESS SUB var_name stmt END . SUB

    SUB  shift, and go to state 120


State 111

   18 var_name: IDENTIFIER '(' expr ')' .

    $default  reduce using rule 18 (var_name)


State 112

   13 decl_stmt: CONST var_name AS basic_literal '=' . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 121
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 113

   14 decl_stmt: DIM var_name AS basic_literal '=' . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 122
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 114

   62 arguments: '(' expr_list ')' .

    $default  reduce using rule 62 (arguments)


State 115

   65 expr_list: expr_list ',' . expr

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 123
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 116

   27 while_stmt: WHILE expr stmt_ends stmt END . WHILE

    WHILE  shift, and go to state 124


State 117

   29 if_stmt: IF expr THEN stmt_ends stmt . ELSE stmt END IF
   30        | IF expr THEN stmt_ends stmt . elseif_list ELSE stmt END IF

    ELSE    shift, and go to state 125
    ELSEIF  shift, and go to state 126

    elseif_list  go to state 127


State 118

   33 select_stmt: SELECT CASE expr case_stmt END . SELECT

    SELECT  shift, and go to state 128


State 119

   36 case_stmt: CASE expr TO expr stmt .

    $default  reduce using rule 36 (case_stmt)


State 120

   12 decl_stmt: ACCESS SUB var_name stmt END SUB .

    $default  reduce using rule 12 (decl_stmt)


State 121

   13 decl_stmt: CONST var_name AS basic_literal '=' expr .
   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    '^'            shift, and go to state 61
    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    $default  reduce using rule 13 (decl_stmt)


State 122

   14 decl_stmt: DIM var_name AS basic_literal '=' expr .
   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    '^'            shift, and go to state 61
    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    $default  reduce using rule 14 (decl_stmt)


State 123

   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr
   65 expr_list: expr_list ',' expr .

    '^'            shift, and go to state 61
    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73

    $default  reduce using rule 65 (expr_list)


State 124

   27 while_stmt: WHILE expr stmt_ends stmt END WHILE .

    $default  reduce using rule 27 (while_stmt)


State 125

   29 if_stmt: IF expr THEN stmt_ends stmt ELSE . stmt END IF

    IDENTIFIER  shift, and go to state 1
    ACCESS      shift, and go to state 2
    CONST       shift, and go to state 3
    DIM         shift, and go to state 4
    WHILE       shift, and go to state 5
    IF          shift, and go to state 6
    SELECT      shift, and go to state 7
    CASE        shift, and go to state 8

    stmt         go to state 129
    decl_stmt    go to state 15
    exec_stmt    go to state 16
    assign_stmt  go to state 17
    while_stmt   go to state 18
    if_stmt      go to state 19
    select_stmt  go to state 20
    case_stmt    go to state 21


State 126

   31 elseif_list: ELSEIF . expr THEN stmt

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 130
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 127

   30 if_stmt: IF expr THEN stmt_ends stmt elseif_list . ELSE stmt END IF
   32 elseif_list: elseif_list . ELSEIF expr THEN stmt

    ELSE    shift, and go to state 131
    ELSEIF  shift, and go to state 132


State 128

   33 select_stmt: SELECT CASE expr case_stmt END SELECT .

    $default  reduce using rule 33 (select_stmt)


State 129

   29 if_stmt: IF expr THEN stmt_ends stmt ELSE stmt . END IF

    END  shift, and go to state 133


State 130

   31 elseif_list: ELSEIF expr . THEN stmt
   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    THEN           shift, and go to state 134
    '^'            shift, and go to state 61
    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73


State 131

   30 if_stmt: IF expr THEN stmt_ends stmt elseif_list ELSE . stmt END IF

    IDENTIFIER  shift, and go to state 1
    ACCESS      shift, and go to state 2
    CONST       shift, and go to state 3
    DIM         shift, and go to state 4
    WHILE       shift, and go to state 5
    IF          shift, and go to state 6
    SELECT      shift, and go to state 7
    CASE        shift, and go to state 8

    stmt         go to state 135
    decl_stmt    go to state 15
    exec_stmt    go to state 16
    assign_stmt  go to state 17
    while_stmt   go to state 18
    if_stmt      go to state 19
    select_stmt  go to state 20
    case_stmt    go to state 21


State 132

   32 elseif_list: elseif_list ELSEIF . expr THEN stmt

    INT         shift, and go to state 27
    DOUBLE      shift, and go to state 28
    STRING      shift, and go to state 29
    BOOLEAN     shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '+'         shift, and go to state 32
    '-'         shift, and go to state 33

    expr              go to state 136
    operand           go to state 35
    basic_literal     go to state 36
    function_literal  go to state 37


State 133

   29 if_stmt: IF expr THEN stmt_ends stmt ELSE stmt END . IF

    IF  shift, and go to state 137


State 134

   31 elseif_list: ELSEIF expr THEN . stmt

    IDENTIFIER  shift, and go to state 1
    ACCESS      shift, and go to state 2
    CONST       shift, and go to state 3
    DIM         shift, and go to state 4
    WHILE       shift, and go to state 5
    IF          shift, and go to state 6
    SELECT      shift, and go to state 7
    CASE        shift, and go to state 8

    stmt         go to state 138
    decl_stmt    go to state 15
    exec_stmt    go to state 16
    assign_stmt  go to state 17
    while_stmt   go to state 18
    if_stmt      go to state 19
    select_stmt  go to state 20
    case_stmt    go to state 21


State 135

   30 if_stmt: IF expr THEN stmt_ends stmt elseif_list ELSE stmt . END IF

    END  shift, and go to state 139


State 136

   32 elseif_list: elseif_list ELSEIF expr . THEN stmt
   42 expr: expr . '+' expr
   43     | expr . '-' expr
   44     | expr . '*' expr
   45     | expr . '/' expr
   46     | expr . INT_DIV expr
   47     | expr . '=' expr
   48     | expr . '<' expr
   49     | expr . '>' expr
   50     | expr . '^' expr
   51     | expr . NOT_EQUAL expr
   52     | expr . LESS_OR_EQUAL expr
   53     | expr . MORE_OR_EQUAL expr
   54     | expr . '&' expr

    THEN           shift, and go to state 140
    '^'            shift, and go to state 61
    '*'            shift, and go to state 62
    '/'            shift, and go to state 63
    INT_DIV        shift, and go to state 64
    '+'            shift, and go to state 65
    '-'            shift, and go to state 66
    '='            shift, and go to state 67
    NOT_EQUAL      shift, and go to state 68
    LESS_OR_EQUAL  shift, and go to state 69
    MORE_OR_EQUAL  shift, and go to state 70
    '>'            shift, and go to state 71
    '<'            shift, and go to state 72
    '&'            shift, and go to state 73


State 137

   29 if_stmt: IF expr THEN stmt_ends stmt ELSE stmt END IF .

    $default  reduce using rule 29 (if_stmt)


State 138

   31 elseif_list: ELSEIF expr THEN stmt .

    $default  reduce using rule 31 (elseif_list)


State 139

   30 if_stmt: IF expr THEN stmt_ends stmt elseif_list ELSE stmt END . IF

    IF  shift, and go to state 141


State 140

   32 elseif_list: elseif_list ELSEIF expr THEN . stmt

    IDENTIFIER  shift, and go to state 1
    ACCESS      shift, and go to state 2
    CONST       shift, and go to state 3
    DIM         shift, and go to state 4
    WHILE       shift, and go to state 5
    IF          shift, and go to state 6
    SELECT      shift, and go to state 7
    CASE        shift, and go to state 8

    stmt         go to state 142
    decl_stmt    go to state 15
    exec_stmt    go to state 16
    assign_stmt  go to state 17
    while_stmt   go to state 18
    if_stmt      go to state 19
    select_stmt  go to state 20
    case_stmt    go to state 21


State 141

   30 if_stmt: IF expr THEN stmt_ends stmt elseif_list ELSE stmt END IF .

    $default  reduce using rule 30 (if_stmt)


State 142

   32 elseif_list: elseif_list ELSEIF expr THEN stmt .

    $default  reduce using rule 32 (elseif_list)
