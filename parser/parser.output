Terminals unused in grammar

    ENDL
    OF
    ASSIGN_CONSTRUCT
    ASSIGN_MULT
    ASSIGN_ORD_DIV
    ASSIGN_INT_DIV
    ASSIGN_ADD
    ASSIGN_SUB
    ASSIGN_LSHIFT
    ASSIGN_RSHIFT
    ASSIGN_CONCAT


Grammar

    0 $accept: root $end

    1 root: program_items_list

    2 program_items_list: %empty
    3                   | program_items_list_not_empty

    4 program_items_list_not_empty: program_item
    5                             | program_items_list_not_empty program_item

    6 program_item: module
    7             | IMPORTS IDENTIFIER stmt_ends

    8 module: MODULE IDENTIFIER stmt_ends END MODULE
    9       | MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE
   10       | access MODULE IDENTIFIER stmt_ends END MODULE
   11       | access MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE

   12 functions_and_sub_list: function_or_sub
   13                       | functions_and_sub_list stmt_ends function_or_sub

   14 function_or_sub: function
   15                | sub_bloc

   16 function: FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION
   17         | FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION
   18         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   19         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION
   20         | access FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION
   21         | access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION
   22         | access FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   23         | access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   25         | SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB
   26         | access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   27         | access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

   28 parameterlist_or_empty: %empty
   29                       | parameterlist_with_type
   30                       | END_OF_LINE parameterlist_with_type END_OF_LINE
   31                       | END_OF_LINE parameterlist_with_type
   32                       | parameterlist_with_type END_OF_LINE
   33                       | parameterlist_without_type
   34                       | END_OF_LINE parameterlist_without_type END_OF_LINE
   35                       | parameterlist_without_type END_OF_LINE
   36                       | END_OF_LINE parameterlist_without_type

   37 parameterlist_with_type: parameter_with_type
   38                        | parameterlist_with_type ',' parameter_with_type
   39                        | parameterlist_with_type ',' END_OF_LINE parameter_with_type

   40 parameterlist_without_type: parameter_without_type
   41                           | parameterlist_without_type ',' parameter_without_type
   42                           | parameterlist_without_type ',' END_OF_LINE parameter_without_type

   43 parameter_with_type: IDENTIFIER AS basic_literal
   44                    | IDENTIFIER AS basic_literal '(' ')'

   45 parameter_without_type: IDENTIFIER

   46 stmt_list: stmt
   47          | stmt_list stmt

   48 stmt: multi_line_stmt
   49     | single_line_stmt stmt_ends

   50 single_line_stmt: if_stmt_single_line
   51                 | decl_stmt_single_line
   52                 | function_call_singleline
   53                 | assign_stmt_singleline

   54 multi_line_stmt: decl_stmt stmt_ends
   55                | assign_stmt_multiline stmt_ends
   56                | while_stmt stmt_ends
   57                | do_loop_stmt
   58                | for_loop_stmt
   59                | for_each_loop_stmt
   60                | select_stmt stmt_ends
   61                | if_stmt_multi_line stmt_ends
   62                | function_call_multiline

   63 stmt_ends: END_OF_LINE
   64          | stmt_ends END_OF_LINE

   65 decl_stmt: CONST var_name AS basic_literal '=' END_OF_LINE expr
   66          | DIM var_name AS basic_literal '=' END_OF_LINE expr
   67          | DIM var_name '=' END_OF_LINE expr

   68 decl_stmt_single_line: CONST var_name AS basic_literal '=' expr
   69                      | DIM var_name AS basic_literal '=' expr
   70                      | DIM var_name AS basic_literal
   71                      | DIM var_name '=' expr
   72                      | DIM var_name
   73                      | DIM var_name '=' NEW basic_literal '(' ')' '{' expr_list '}'

   74 var_name: IDENTIFIER '(' expr ')'
   75         | IDENTIFIER

   76 access: PUBLIC
   77       | PROTECTED
   78       | FRIEND
   79       | PRIVATE
   80       | PROTECTED FRIEND
   81       | PRIVATE FRIEND

   82 assign_stmt_singleline: IDENTIFIER '=' expr
   83                       | IDENTIFIER '=' IDENTIFIER

   84 assign_stmt_multiline: IDENTIFIER '=' function_call_multiline
   85                      | function_call_multiline '=' function_call_multiline

   86 while_stmt: WHILE expr stmt_ends stmt_list END WHILE

   87 do_loop_stmt: DO do_loop_condition stmt_ends stmt_list LOOP
   88             | DO stmt_ends stmt_list LOOP do_loop_condition

   89 do_loop_condition: UNTIL expr
   90                  | WHILE expr

   91 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal stmt_ends stmt_list NEXT
   92              | FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal STEP basic_literal stmt_ends stmt_list NEXT

   93 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

   94 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list END IF
   95                   | IF expr THEN stmt_ends stmt_list ELSE stmt_list END IF
   96                   | IF expr THEN stmt_ends stmt_list elseif_list END IF
   97                   | IF expr THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF

   98 elseif_list: ELSEIF expr THEN stmt_list
   99            | elseif_list ELSEIF expr THEN stmt_list

  100 if_stmt_single_line: IF expr THEN single_line_stmt
  101                    | IF expr THEN single_line_stmt ELSE single_line_stmt

  102 select_stmt: SELECT CASE expr stmt_ends case_list END SELECT

  103 case_list: case_stmt
  104          | case_list case_stmt

  105 case_stmt: CASE expr stmt_ends stmt_list
  106          | CASE IS expr stmt_ends stmt_list
  107          | CASE expr TO expr stmt_ends stmt_list
  108          | CASE ELSE stmt_ends stmt_list

  109 function_call_multiline: IDENTIFIER arguments_multiline

  110 function_call_singleline: IDENTIFIER arguments_singleline

  111 expr: basic_literal
  112     | function_call_singleline
  113     | '-' expr
  114     | '+' expr
  115     | expr '+' expr
  116     | expr '-' expr
  117     | expr '*' expr
  118     | expr '/' expr
  119     | expr INT_DIV expr
  120     | expr '=' expr
  121     | expr '<' expr
  122     | expr '>' expr
  123     | expr '^' expr
  124     | expr NOT_EQUAL expr
  125     | expr LESS_OR_EQUAL expr
  126     | expr MORE_OR_EQUAL expr
  127     | expr '&' expr

  128 basic_literal: INT
  129              | STRING
  130              | BOOLEAN
  131              | DOUBLE

  132 arguments_multiline: '(' END_OF_LINE expr_list ')'
  133                    | '(' END_OF_LINE expr_list END_OF_LINE ')'
  134                    | '(' expr_list END_OF_LINE ')'

  135 arguments_singleline: '(' expr_list ')'
  136                     | '(' ')'

  137 arguments: arguments_multiline
  138          | arguments_singleline

  139 expr_list: expr
  140          | expr_list ',' expr


Terminals, with rules where they appear

    $end (0) 0
    '&' (38) 127
    '(' (40) 24 25 26 27 44 73 74 132 133 134 135 136
    ')' (41) 24 25 26 27 44 73 74 132 133 134 135 136
    '*' (42) 117
    '+' (43) 114 115
    ',' (44) 38 39 41 42 140
    '-' (45) 113 116
    '/' (47) 118
    '<' (60) 121
    '=' (61) 65 66 67 68 69 71 73 82 83 84 85 91 92 120
    '>' (62) 122
    '^' (94) 123
    '{' (123) 73
    '}' (125) 73
    error (256)
    INT <int_val> (258) 128
    DOUBLE <double_val> (259) 131
    STRING <str_val> (260) 129
    BOOLEAN <bool_val> (261) 130
    IDENTIFIER <id_name> (262) 7 8 9 10 11 16 17 18 19 20 21 22 23 24 25 26 27 43 44 45 74 75 82 83 84 91 92 93 109 110
    ENDL (263)
    SUB (264) 24 25 26 27
    END (265) 8 9 10 11 16 17 18 19 20 21 22 23 24 25 26 27 86 94 95 96 97 102
    CONST (266) 65 68
    DIM (267) 66 67 69 70 71 72 73
    AS (268) 43 44 65 66 68 69 70 91 92 93
    WHILE (269) 86 90
    IF (270) 94 95 96 97 100 101
    NEW (271) 73
    ELSEIF (272) 98 99
    SELECT (273) 102
    CASE (274) 102 105 106 107 108
    IS (275) 106
    TO (276) 91 92 107
    IMPORTS (277) 7
    MODULE (278) 8 9 10 11
    FUNCTION (279) 16 17 18 19 20 21 22 23
    RETURN (280) 17 19 21 23
    DO (281) 87 88
    LOOP (282) 87 88
    UNTIL (283) 89
    FOR (284) 91 92 93
    NEXT (285) 91 92 93
    STEP (286) 92
    OF (287)
    IN (288) 93
    EACH (289) 93
    END_OF_LINE (290) 30 31 32 34 35 36 39 42 63 64 65 66 67 132 133 134
    UNARY_MINUS (291)
    UNARY_PLUS (292)
    ASSIGN_CONSTRUCT (293)
    ASSIGN_MULT (294)
    ASSIGN_ORD_DIV (295)
    ASSIGN_INT_DIV (296)
    ASSIGN_ADD (297)
    ASSIGN_SUB (298)
    ASSIGN_LSHIFT (299)
    ASSIGN_RSHIFT (300)
    ASSIGN_CONCAT (301)
    PRIVATE (302) 79 81
    PROTECTED (303) 77 80
    PUBLIC (304) 76
    FRIEND (305) 78 80 81
    INT_DIV (306) 119
    NOT_EQUAL (307) 124
    LESS_OR_EQUAL (308) 125
    MORE_OR_EQUAL (309) 126
    THEN (310) 94 95 96 97 98 99 100 101
    ELSE (311) 95 97 101 108


Nonterminals, with rules where they appear

    $accept (71)
        on left: 0
    root (72)
        on left: 1
        on right: 0
    program_items_list (73)
        on left: 2 3
        on right: 1
    program_items_list_not_empty (74)
        on left: 4 5
        on right: 3 5
    program_item (75)
        on left: 6 7
        on right: 4 5
    module (76)
        on left: 8 9 10 11
        on right: 6
    functions_and_sub_list (77)
        on left: 12 13
        on right: 9 11 13
    function_or_sub (78)
        on left: 14 15
        on right: 12 13
    function (79)
        on left: 16 17 18 19 20 21 22 23
        on right: 14
    sub_bloc (80)
        on left: 24 25 26 27
        on right: 15
    parameterlist_or_empty (81)
        on left: 28 29 30 31 32 33 34 35 36
        on right: 24 25 26 27
    parameterlist_with_type (82)
        on left: 37 38 39
        on right: 29 30 31 32 38 39
    parameterlist_without_type (83)
        on left: 40 41 42
        on right: 33 34 35 36 41 42
    parameter_with_type (84)
        on left: 43 44
        on right: 37 38 39
    parameter_without_type (85)
        on left: 45
        on right: 40 41 42
    stmt_list (86)
        on left: 46 47
        on right: 18 19 22 23 25 27 47 86 87 88 91 92 93 94 95 96 97 98 99 105 106 107 108
    stmt (87)
        on left: 48 49
        on right: 46 47
    single_line_stmt (88)
        on left: 50 51 52 53
        on right: 49 100 101
    multi_line_stmt (89)
        on left: 54 55 56 57 58 59 60 61 62
        on right: 48
    stmt_ends (90)
        on left: 63 64
        on right: 7 8 9 10 11 13 16 17 18 19 20 21 22 23 24 25 26 27 49 54 55 56 60 61 64 86 87 88 91 92 93 94 95 96 97 102 105 106 107 108
    decl_stmt (91)
        on left: 65 66 67
        on right: 54
    decl_stmt_single_line (92)
        on left: 68 69 70 71 72 73
        on right: 51
    var_name (93)
        on left: 74 75
        on right: 65 66 67 68 69 70 71 72 73
    access (94)
        on left: 76 77 78 79 80 81
        on right: 10 11 20 21 22 23 26 27
    assign_stmt_singleline (95)
        on left: 82 83
        on right: 53
    assign_stmt_multiline (96)
        on left: 84 85
        on right: 55
    while_stmt (97)
        on left: 86
        on right: 56
    do_loop_stmt (98)
        on left: 87 88
        on right: 57
    do_loop_condition (99)
        on left: 89 90
        on right: 87 88
    for_loop_stmt (100)
        on left: 91 92
        on right: 58
    for_each_loop_stmt (101)
        on left: 93
        on right: 59
    if_stmt_multi_line (102)
        on left: 94 95 96 97
        on right: 61
    elseif_list (103)
        on left: 98 99
        on right: 96 97 99
    if_stmt_single_line (104)
        on left: 100 101
        on right: 50
    select_stmt (105)
        on left: 102
        on right: 60
    case_list (106)
        on left: 103 104
        on right: 102 104
    case_stmt (107)
        on left: 105 106 107 108
        on right: 103 104
    function_call_multiline (108)
        on left: 109
        on right: 62 84 85
    function_call_singleline (109)
        on left: 110
        on right: 52 112
    expr (110)
        on left: 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127
        on right: 17 19 21 23 65 66 67 68 69 71 74 82 86 89 90 94 95 96 97 98 99 100 101 102 105 106 107 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 139 140
    basic_literal (111)
        on left: 128 129 130 131
        on right: 43 44 65 66 68 69 70 73 91 92 93 111
    arguments_multiline (112)
        on left: 132 133 134
        on right: 109 137
    arguments_singleline (113)
        on left: 135 136
        on right: 110 138
    arguments (114)
        on left: 137 138
        on right: 16 17 18 19 20 21 22 23
    expr_list (115)
        on left: 139 140
        on right: 73 132 133 134 135 140


State 0

    0 $accept: . root $end

    IMPORTS    shift, and go to state 1
    MODULE     shift, and go to state 2
    PRIVATE    shift, and go to state 3
    PROTECTED  shift, and go to state 4
    PUBLIC     shift, and go to state 5
    FRIEND     shift, and go to state 6

    $default  reduce using rule 2 (program_items_list)

    root                          go to state 7
    program_items_list            go to state 8
    program_items_list_not_empty  go to state 9
    program_item                  go to state 10
    module                        go to state 11
    access                        go to state 12


State 1

    7 program_item: IMPORTS . IDENTIFIER stmt_ends

    IDENTIFIER  shift, and go to state 13


State 2

    8 module: MODULE . IDENTIFIER stmt_ends END MODULE
    9       | MODULE . IDENTIFIER stmt_ends functions_and_sub_list END MODULE

    IDENTIFIER  shift, and go to state 14


State 3

   79 access: PRIVATE .
   81       | PRIVATE . FRIEND

    FRIEND  shift, and go to state 15

    $default  reduce using rule 79 (access)


State 4

   77 access: PROTECTED .
   80       | PROTECTED . FRIEND

    FRIEND  shift, and go to state 16

    $default  reduce using rule 77 (access)


State 5

   76 access: PUBLIC .

    $default  reduce using rule 76 (access)


State 6

   78 access: FRIEND .

    $default  reduce using rule 78 (access)


State 7

    0 $accept: root . $end

    $end  shift, and go to state 17


State 8

    1 root: program_items_list .

    $default  reduce using rule 1 (root)


State 9

    3 program_items_list: program_items_list_not_empty .
    5 program_items_list_not_empty: program_items_list_not_empty . program_item

    IMPORTS    shift, and go to state 1
    MODULE     shift, and go to state 2
    PRIVATE    shift, and go to state 3
    PROTECTED  shift, and go to state 4
    PUBLIC     shift, and go to state 5
    FRIEND     shift, and go to state 6

    $default  reduce using rule 3 (program_items_list)

    program_item  go to state 18
    module        go to state 11
    access        go to state 12


State 10

    4 program_items_list_not_empty: program_item .

    $default  reduce using rule 4 (program_items_list_not_empty)


State 11

    6 program_item: module .

    $default  reduce using rule 6 (program_item)


State 12

   10 module: access . MODULE IDENTIFIER stmt_ends END MODULE
   11       | access . MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE

    MODULE  shift, and go to state 19


State 13

    7 program_item: IMPORTS IDENTIFIER . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 21


State 14

    8 module: MODULE IDENTIFIER . stmt_ends END MODULE
    9       | MODULE IDENTIFIER . stmt_ends functions_and_sub_list END MODULE

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 22


State 15

   81 access: PRIVATE FRIEND .

    $default  reduce using rule 81 (access)


State 16

   80 access: PROTECTED FRIEND .

    $default  reduce using rule 80 (access)


State 17

    0 $accept: root $end .

    $default  accept


State 18

    5 program_items_list_not_empty: program_items_list_not_empty program_item .

    $default  reduce using rule 5 (program_items_list_not_empty)


State 19

   10 module: access MODULE . IDENTIFIER stmt_ends END MODULE
   11       | access MODULE . IDENTIFIER stmt_ends functions_and_sub_list END MODULE

    IDENTIFIER  shift, and go to state 23


State 20

   63 stmt_ends: END_OF_LINE .

    $default  reduce using rule 63 (stmt_ends)


State 21

    7 program_item: IMPORTS IDENTIFIER stmt_ends .
   64 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 7 (program_item)


State 22

    8 module: MODULE IDENTIFIER stmt_ends . END MODULE
    9       | MODULE IDENTIFIER stmt_ends . functions_and_sub_list END MODULE
   64 stmt_ends: stmt_ends . END_OF_LINE

    SUB          shift, and go to state 25
    END          shift, and go to state 26
    FUNCTION     shift, and go to state 27
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    functions_and_sub_list  go to state 28
    function_or_sub         go to state 29
    function                go to state 30
    sub_bloc                go to state 31
    access                  go to state 32


State 23

   10 module: access MODULE IDENTIFIER . stmt_ends END MODULE
   11       | access MODULE IDENTIFIER . stmt_ends functions_and_sub_list END MODULE

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 33


State 24

   64 stmt_ends: stmt_ends END_OF_LINE .

    $default  reduce using rule 64 (stmt_ends)


State 25

   24 sub_bloc: SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   25         | SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER  shift, and go to state 34


State 26

    8 module: MODULE IDENTIFIER stmt_ends END . MODULE

    MODULE  shift, and go to state 35


State 27

   16 function: FUNCTION . IDENTIFIER arguments stmt_ends END FUNCTION
   17         | FUNCTION . IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION
   18         | FUNCTION . IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   19         | FUNCTION . IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION

    IDENTIFIER  shift, and go to state 36


State 28

    9 module: MODULE IDENTIFIER stmt_ends functions_and_sub_list . END MODULE
   13 functions_and_sub_list: functions_and_sub_list . stmt_ends function_or_sub

    END          shift, and go to state 37
    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 38


State 29

   12 functions_and_sub_list: function_or_sub .

    $default  reduce using rule 12 (functions_and_sub_list)


State 30

   14 function_or_sub: function .

    $default  reduce using rule 14 (function_or_sub)


State 31

   15 function_or_sub: sub_bloc .

    $default  reduce using rule 15 (function_or_sub)


State 32

   20 function: access . FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION
   21         | access . FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION
   22         | access . FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   23         | access . FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION
   26 sub_bloc: access . SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   27         | access . SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    SUB       shift, and go to state 39
    FUNCTION  shift, and go to state 40


State 33

   10 module: access MODULE IDENTIFIER stmt_ends . END MODULE
   11       | access MODULE IDENTIFIER stmt_ends . functions_and_sub_list END MODULE
   64 stmt_ends: stmt_ends . END_OF_LINE

    SUB          shift, and go to state 25
    END          shift, and go to state 41
    FUNCTION     shift, and go to state 27
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    functions_and_sub_list  go to state 42
    function_or_sub         go to state 29
    function                go to state 30
    sub_bloc                go to state 31
    access                  go to state 32


State 34

   24 sub_bloc: SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends END SUB
   25         | SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    '('  shift, and go to state 43


State 35

    8 module: MODULE IDENTIFIER stmt_ends END MODULE .

    $default  reduce using rule 8 (module)


State 36

   16 function: FUNCTION IDENTIFIER . arguments stmt_ends END FUNCTION
   17         | FUNCTION IDENTIFIER . arguments stmt_ends RETURN expr END FUNCTION
   18         | FUNCTION IDENTIFIER . arguments stmt_ends stmt_list END FUNCTION
   19         | FUNCTION IDENTIFIER . arguments stmt_ends stmt_list RETURN expr END FUNCTION

    '('  shift, and go to state 44

    arguments_multiline   go to state 45
    arguments_singleline  go to state 46
    arguments             go to state 47


State 37

    9 module: MODULE IDENTIFIER stmt_ends functions_and_sub_list END . MODULE

    MODULE  shift, and go to state 48


State 38

   13 functions_and_sub_list: functions_and_sub_list stmt_ends . function_or_sub
   64 stmt_ends: stmt_ends . END_OF_LINE

    SUB          shift, and go to state 25
    FUNCTION     shift, and go to state 27
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    function_or_sub  go to state 49
    function         go to state 30
    sub_bloc         go to state 31
    access           go to state 32


State 39

   26 sub_bloc: access SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   27         | access SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER  shift, and go to state 50


State 40

   20 function: access FUNCTION . IDENTIFIER arguments stmt_ends END FUNCTION
   21         | access FUNCTION . IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION
   22         | access FUNCTION . IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   23         | access FUNCTION . IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION

    IDENTIFIER  shift, and go to state 51


State 41

   10 module: access MODULE IDENTIFIER stmt_ends END . MODULE

    MODULE  shift, and go to state 52


State 42

   11 module: access MODULE IDENTIFIER stmt_ends functions_and_sub_list . END MODULE
   13 functions_and_sub_list: functions_and_sub_list . stmt_ends function_or_sub

    END          shift, and go to state 53
    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 38


State 43

   24 sub_bloc: SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends END SUB
   25         | SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER   shift, and go to state 54
    END_OF_LINE  shift, and go to state 55

    $default  reduce using rule 28 (parameterlist_or_empty)

    parameterlist_or_empty      go to state 56
    parameterlist_with_type     go to state 57
    parameterlist_without_type  go to state 58
    parameter_with_type         go to state 59
    parameter_without_type      go to state 60


State 44

  132 arguments_multiline: '(' . END_OF_LINE expr_list ')'
  133                    | '(' . END_OF_LINE expr_list END_OF_LINE ')'
  134                    | '(' . expr_list END_OF_LINE ')'
  135 arguments_singleline: '(' . expr_list ')'
  136                     | '(' . ')'

    INT          shift, and go to state 61
    DOUBLE       shift, and go to state 62
    STRING       shift, and go to state 63
    BOOLEAN      shift, and go to state 64
    IDENTIFIER   shift, and go to state 65
    END_OF_LINE  shift, and go to state 66
    '+'          shift, and go to state 67
    '-'          shift, and go to state 68
    ')'          shift, and go to state 69

    function_call_singleline  go to state 70
    expr                      go to state 71
    basic_literal             go to state 72
    expr_list                 go to state 73


State 45

  137 arguments: arguments_multiline .

    $default  reduce using rule 137 (arguments)


State 46

  138 arguments: arguments_singleline .

    $default  reduce using rule 138 (arguments)


State 47

   16 function: FUNCTION IDENTIFIER arguments . stmt_ends END FUNCTION
   17         | FUNCTION IDENTIFIER arguments . stmt_ends RETURN expr END FUNCTION
   18         | FUNCTION IDENTIFIER arguments . stmt_ends stmt_list END FUNCTION
   19         | FUNCTION IDENTIFIER arguments . stmt_ends stmt_list RETURN expr END FUNCTION

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 74


State 48

    9 module: MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE .

    $default  reduce using rule 9 (module)


State 49

   13 functions_and_sub_list: functions_and_sub_list stmt_ends function_or_sub .

    $default  reduce using rule 13 (functions_and_sub_list)


State 50

   26 sub_bloc: access SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends END SUB
   27         | access SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    '('  shift, and go to state 75


State 51

   20 function: access FUNCTION IDENTIFIER . arguments stmt_ends END FUNCTION
   21         | access FUNCTION IDENTIFIER . arguments stmt_ends RETURN expr END FUNCTION
   22         | access FUNCTION IDENTIFIER . arguments stmt_ends stmt_list END FUNCTION
   23         | access FUNCTION IDENTIFIER . arguments stmt_ends stmt_list RETURN expr END FUNCTION

    '('  shift, and go to state 44

    arguments_multiline   go to state 45
    arguments_singleline  go to state 46
    arguments             go to state 76


State 52

   10 module: access MODULE IDENTIFIER stmt_ends END MODULE .

    $default  reduce using rule 10 (module)


State 53

   11 module: access MODULE IDENTIFIER stmt_ends functions_and_sub_list END . MODULE

    MODULE  shift, and go to state 77


State 54

   43 parameter_with_type: IDENTIFIER . AS basic_literal
   44                    | IDENTIFIER . AS basic_literal '(' ')'
   45 parameter_without_type: IDENTIFIER .

    AS  shift, and go to state 78

    $default  reduce using rule 45 (parameter_without_type)


State 55

   30 parameterlist_or_empty: END_OF_LINE . parameterlist_with_type END_OF_LINE
   31                       | END_OF_LINE . parameterlist_with_type
   34                       | END_OF_LINE . parameterlist_without_type END_OF_LINE
   36                       | END_OF_LINE . parameterlist_without_type

    IDENTIFIER  shift, and go to state 54

    parameterlist_with_type     go to state 79
    parameterlist_without_type  go to state 80
    parameter_with_type         go to state 59
    parameter_without_type      go to state 60


State 56

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends END SUB
   25         | SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends stmt_list END SUB

    ')'  shift, and go to state 81


State 57

   29 parameterlist_or_empty: parameterlist_with_type .
   32                       | parameterlist_with_type . END_OF_LINE
   38 parameterlist_with_type: parameterlist_with_type . ',' parameter_with_type
   39                        | parameterlist_with_type . ',' END_OF_LINE parameter_with_type

    END_OF_LINE  shift, and go to state 82
    ','          shift, and go to state 83

    $default  reduce using rule 29 (parameterlist_or_empty)


State 58

   33 parameterlist_or_empty: parameterlist_without_type .
   35                       | parameterlist_without_type . END_OF_LINE
   41 parameterlist_without_type: parameterlist_without_type . ',' parameter_without_type
   42                           | parameterlist_without_type . ',' END_OF_LINE parameter_without_type

    END_OF_LINE  shift, and go to state 84
    ','          shift, and go to state 85

    $default  reduce using rule 33 (parameterlist_or_empty)


State 59

   37 parameterlist_with_type: parameter_with_type .

    $default  reduce using rule 37 (parameterlist_with_type)


State 60

   40 parameterlist_without_type: parameter_without_type .

    $default  reduce using rule 40 (parameterlist_without_type)


State 61

  128 basic_literal: INT .

    $default  reduce using rule 128 (basic_literal)


State 62

  131 basic_literal: DOUBLE .

    $default  reduce using rule 131 (basic_literal)


State 63

  129 basic_literal: STRING .

    $default  reduce using rule 129 (basic_literal)


State 64

  130 basic_literal: BOOLEAN .

    $default  reduce using rule 130 (basic_literal)


State 65

  110 function_call_singleline: IDENTIFIER . arguments_singleline

    '('  shift, and go to state 86

    arguments_singleline  go to state 87


State 66

  132 arguments_multiline: '(' END_OF_LINE . expr_list ')'
  133                    | '(' END_OF_LINE . expr_list END_OF_LINE ')'

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 71
    basic_literal             go to state 72
    expr_list                 go to state 88


State 67

  114 expr: '+' . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 89
    basic_literal             go to state 72


State 68

  113 expr: '-' . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 90
    basic_literal             go to state 72


State 69

  136 arguments_singleline: '(' ')' .

    $default  reduce using rule 136 (arguments_singleline)


State 70

  112 expr: function_call_singleline .

    $default  reduce using rule 112 (expr)


State 71

  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr
  139 expr_list: expr .

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 139 (expr_list)


State 72

  111 expr: basic_literal .

    $default  reduce using rule 111 (expr)


State 73

  134 arguments_multiline: '(' expr_list . END_OF_LINE ')'
  135 arguments_singleline: '(' expr_list . ')'
  140 expr_list: expr_list . ',' expr

    END_OF_LINE  shift, and go to state 104
    ')'          shift, and go to state 105
    ','          shift, and go to state 106


State 74

   16 function: FUNCTION IDENTIFIER arguments stmt_ends . END FUNCTION
   17         | FUNCTION IDENTIFIER arguments stmt_ends . RETURN expr END FUNCTION
   18         | FUNCTION IDENTIFIER arguments stmt_ends . stmt_list END FUNCTION
   19         | FUNCTION IDENTIFIER arguments stmt_ends . stmt_list RETURN expr END FUNCTION
   64 stmt_ends: stmt_ends . END_OF_LINE

    IDENTIFIER   shift, and go to state 107
    END          shift, and go to state 108
    CONST        shift, and go to state 109
    DIM          shift, and go to state 110
    WHILE        shift, and go to state 111
    IF           shift, and go to state 112
    SELECT       shift, and go to state 113
    RETURN       shift, and go to state 114
    DO           shift, and go to state 115
    FOR          shift, and go to state 116
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 117
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 75

   26 sub_bloc: access SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends END SUB
   27         | access SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER   shift, and go to state 54
    END_OF_LINE  shift, and go to state 55

    $default  reduce using rule 28 (parameterlist_or_empty)

    parameterlist_or_empty      go to state 134
    parameterlist_with_type     go to state 57
    parameterlist_without_type  go to state 58
    parameter_with_type         go to state 59
    parameter_without_type      go to state 60


State 76

   20 function: access FUNCTION IDENTIFIER arguments . stmt_ends END FUNCTION
   21         | access FUNCTION IDENTIFIER arguments . stmt_ends RETURN expr END FUNCTION
   22         | access FUNCTION IDENTIFIER arguments . stmt_ends stmt_list END FUNCTION
   23         | access FUNCTION IDENTIFIER arguments . stmt_ends stmt_list RETURN expr END FUNCTION

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 135


State 77

   11 module: access MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE .

    $default  reduce using rule 11 (module)


State 78

   43 parameter_with_type: IDENTIFIER AS . basic_literal
   44                    | IDENTIFIER AS . basic_literal '(' ')'

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 136


State 79

   30 parameterlist_or_empty: END_OF_LINE parameterlist_with_type . END_OF_LINE
   31                       | END_OF_LINE parameterlist_with_type .
   38 parameterlist_with_type: parameterlist_with_type . ',' parameter_with_type
   39                        | parameterlist_with_type . ',' END_OF_LINE parameter_with_type

    END_OF_LINE  shift, and go to state 137
    ','          shift, and go to state 83

    $default  reduce using rule 31 (parameterlist_or_empty)


State 80

   34 parameterlist_or_empty: END_OF_LINE parameterlist_without_type . END_OF_LINE
   36                       | END_OF_LINE parameterlist_without_type .
   41 parameterlist_without_type: parameterlist_without_type . ',' parameter_without_type
   42                           | parameterlist_without_type . ',' END_OF_LINE parameter_without_type

    END_OF_LINE  shift, and go to state 138
    ','          shift, and go to state 85

    $default  reduce using rule 36 (parameterlist_or_empty)


State 81

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends END SUB
   25         | SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends stmt_list END SUB

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 139


State 82

   32 parameterlist_or_empty: parameterlist_with_type END_OF_LINE .

    $default  reduce using rule 32 (parameterlist_or_empty)


State 83

   38 parameterlist_with_type: parameterlist_with_type ',' . parameter_with_type
   39                        | parameterlist_with_type ',' . END_OF_LINE parameter_with_type

    IDENTIFIER   shift, and go to state 140
    END_OF_LINE  shift, and go to state 141

    parameter_with_type  go to state 142


State 84

   35 parameterlist_or_empty: parameterlist_without_type END_OF_LINE .

    $default  reduce using rule 35 (parameterlist_or_empty)


State 85

   41 parameterlist_without_type: parameterlist_without_type ',' . parameter_without_type
   42                           | parameterlist_without_type ',' . END_OF_LINE parameter_without_type

    IDENTIFIER   shift, and go to state 143
    END_OF_LINE  shift, and go to state 144

    parameter_without_type  go to state 145


State 86

  135 arguments_singleline: '(' . expr_list ')'
  136                     | '(' . ')'

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68
    ')'         shift, and go to state 69

    function_call_singleline  go to state 70
    expr                      go to state 71
    basic_literal             go to state 72
    expr_list                 go to state 146


State 87

  110 function_call_singleline: IDENTIFIER arguments_singleline .

    $default  reduce using rule 110 (function_call_singleline)


State 88

  132 arguments_multiline: '(' END_OF_LINE expr_list . ')'
  133                    | '(' END_OF_LINE expr_list . END_OF_LINE ')'
  140 expr_list: expr_list . ',' expr

    END_OF_LINE  shift, and go to state 147
    ')'          shift, and go to state 148
    ','          shift, and go to state 106


State 89

  114 expr: '+' expr .
  115     | expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 114 (expr)


State 90

  113 expr: '-' expr .
  115     | expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 113 (expr)


State 91

  123 expr: expr '^' . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 149
    basic_literal             go to state 72


State 92

  117 expr: expr '*' . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 150
    basic_literal             go to state 72


State 93

  118 expr: expr '/' . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 151
    basic_literal             go to state 72


State 94

  119 expr: expr INT_DIV . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 152
    basic_literal             go to state 72


State 95

  115 expr: expr '+' . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 153
    basic_literal             go to state 72


State 96

  116 expr: expr '-' . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 154
    basic_literal             go to state 72


State 97

  120 expr: expr '=' . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 155
    basic_literal             go to state 72


State 98

  124 expr: expr NOT_EQUAL . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 156
    basic_literal             go to state 72


State 99

  125 expr: expr LESS_OR_EQUAL . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 157
    basic_literal             go to state 72


State 100

  126 expr: expr MORE_OR_EQUAL . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 158
    basic_literal             go to state 72


State 101

  122 expr: expr '>' . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 159
    basic_literal             go to state 72


State 102

  121 expr: expr '<' . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 160
    basic_literal             go to state 72


State 103

  127 expr: expr '&' . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 161
    basic_literal             go to state 72


State 104

  134 arguments_multiline: '(' expr_list END_OF_LINE . ')'

    ')'  shift, and go to state 162


State 105

  135 arguments_singleline: '(' expr_list ')' .

    $default  reduce using rule 135 (arguments_singleline)


State 106

  140 expr_list: expr_list ',' . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 163
    basic_literal             go to state 72


State 107

   82 assign_stmt_singleline: IDENTIFIER . '=' expr
   83                       | IDENTIFIER . '=' IDENTIFIER
   84 assign_stmt_multiline: IDENTIFIER . '=' function_call_multiline
  109 function_call_multiline: IDENTIFIER . arguments_multiline
  110 function_call_singleline: IDENTIFIER . arguments_singleline

    '='  shift, and go to state 164
    '('  shift, and go to state 44

    arguments_multiline   go to state 165
    arguments_singleline  go to state 87


State 108

   16 function: FUNCTION IDENTIFIER arguments stmt_ends END . FUNCTION

    FUNCTION  shift, and go to state 166


State 109

   65 decl_stmt: CONST . var_name AS basic_literal '=' END_OF_LINE expr
   68 decl_stmt_single_line: CONST . var_name AS basic_literal '=' expr

    IDENTIFIER  shift, and go to state 167

    var_name  go to state 168


State 110

   66 decl_stmt: DIM . var_name AS basic_literal '=' END_OF_LINE expr
   67          | DIM . var_name '=' END_OF_LINE expr
   69 decl_stmt_single_line: DIM . var_name AS basic_literal '=' expr
   70                      | DIM . var_name AS basic_literal
   71                      | DIM . var_name '=' expr
   72                      | DIM . var_name
   73                      | DIM . var_name '=' NEW basic_literal '(' ')' '{' expr_list '}'

    IDENTIFIER  shift, and go to state 167

    var_name  go to state 169


State 111

   86 while_stmt: WHILE . expr stmt_ends stmt_list END WHILE

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 170
    basic_literal             go to state 72


State 112

   94 if_stmt_multi_line: IF . expr THEN stmt_ends stmt_list END IF
   95                   | IF . expr THEN stmt_ends stmt_list ELSE stmt_list END IF
   96                   | IF . expr THEN stmt_ends stmt_list elseif_list END IF
   97                   | IF . expr THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF
  100 if_stmt_single_line: IF . expr THEN single_line_stmt
  101                    | IF . expr THEN single_line_stmt ELSE single_line_stmt

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 171
    basic_literal             go to state 72


State 113

  102 select_stmt: SELECT . CASE expr stmt_ends case_list END SELECT

    CASE  shift, and go to state 172


State 114

   17 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN . expr END FUNCTION

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 173
    basic_literal             go to state 72


State 115

   87 do_loop_stmt: DO . do_loop_condition stmt_ends stmt_list LOOP
   88             | DO . stmt_ends stmt_list LOOP do_loop_condition

    WHILE        shift, and go to state 174
    UNTIL        shift, and go to state 175
    END_OF_LINE  shift, and go to state 20

    stmt_ends          go to state 176
    do_loop_condition  go to state 177


State 116

   91 for_loop_stmt: FOR . IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal stmt_ends stmt_list NEXT
   92              | FOR . IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal STEP basic_literal stmt_ends stmt_list NEXT
   93 for_each_loop_stmt: FOR . EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

    IDENTIFIER  shift, and go to state 178
    EACH        shift, and go to state 179


State 117

   18 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list . END FUNCTION
   19         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list . RETURN expr END FUNCTION
   47 stmt_list: stmt_list . stmt

    IDENTIFIER  shift, and go to state 107
    END         shift, and go to state 180
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    RETURN      shift, and go to state 181
    DO          shift, and go to state 115
    FOR         shift, and go to state 116

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 118

   46 stmt_list: stmt .

    $default  reduce using rule 46 (stmt_list)


State 119

   49 stmt: single_line_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 183


State 120

   48 stmt: multi_line_stmt .

    $default  reduce using rule 48 (stmt)


State 121

   54 multi_line_stmt: decl_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 184


State 122

   51 single_line_stmt: decl_stmt_single_line .

    $default  reduce using rule 51 (single_line_stmt)


State 123

   53 single_line_stmt: assign_stmt_singleline .

    $default  reduce using rule 53 (single_line_stmt)


State 124

   55 multi_line_stmt: assign_stmt_multiline . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 185


State 125

   56 multi_line_stmt: while_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 186


State 126

   57 multi_line_stmt: do_loop_stmt .

    $default  reduce using rule 57 (multi_line_stmt)


State 127

   58 multi_line_stmt: for_loop_stmt .

    $default  reduce using rule 58 (multi_line_stmt)


State 128

   59 multi_line_stmt: for_each_loop_stmt .

    $default  reduce using rule 59 (multi_line_stmt)


State 129

   61 multi_line_stmt: if_stmt_multi_line . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 187


State 130

   50 single_line_stmt: if_stmt_single_line .

    $default  reduce using rule 50 (single_line_stmt)


State 131

   60 multi_line_stmt: select_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 188


State 132

   62 multi_line_stmt: function_call_multiline .
   85 assign_stmt_multiline: function_call_multiline . '=' function_call_multiline

    '='  shift, and go to state 189

    $default  reduce using rule 62 (multi_line_stmt)


State 133

   52 single_line_stmt: function_call_singleline .

    $default  reduce using rule 52 (single_line_stmt)


State 134

   26 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends END SUB
   27         | access SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends stmt_list END SUB

    ')'  shift, and go to state 190


State 135

   20 function: access FUNCTION IDENTIFIER arguments stmt_ends . END FUNCTION
   21         | access FUNCTION IDENTIFIER arguments stmt_ends . RETURN expr END FUNCTION
   22         | access FUNCTION IDENTIFIER arguments stmt_ends . stmt_list END FUNCTION
   23         | access FUNCTION IDENTIFIER arguments stmt_ends . stmt_list RETURN expr END FUNCTION
   64 stmt_ends: stmt_ends . END_OF_LINE

    IDENTIFIER   shift, and go to state 107
    END          shift, and go to state 191
    CONST        shift, and go to state 109
    DIM          shift, and go to state 110
    WHILE        shift, and go to state 111
    IF           shift, and go to state 112
    SELECT       shift, and go to state 113
    RETURN       shift, and go to state 192
    DO           shift, and go to state 115
    FOR          shift, and go to state 116
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 193
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 136

   43 parameter_with_type: IDENTIFIER AS basic_literal .
   44                    | IDENTIFIER AS basic_literal . '(' ')'

    '('  shift, and go to state 194

    $default  reduce using rule 43 (parameter_with_type)


State 137

   30 parameterlist_or_empty: END_OF_LINE parameterlist_with_type END_OF_LINE .

    $default  reduce using rule 30 (parameterlist_or_empty)


State 138

   34 parameterlist_or_empty: END_OF_LINE parameterlist_without_type END_OF_LINE .

    $default  reduce using rule 34 (parameterlist_or_empty)


State 139

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . END SUB
   25         | SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . stmt_list END SUB
   64 stmt_ends: stmt_ends . END_OF_LINE

    IDENTIFIER   shift, and go to state 107
    END          shift, and go to state 195
    CONST        shift, and go to state 109
    DIM          shift, and go to state 110
    WHILE        shift, and go to state 111
    IF           shift, and go to state 112
    SELECT       shift, and go to state 113
    DO           shift, and go to state 115
    FOR          shift, and go to state 116
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 196
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 140

   43 parameter_with_type: IDENTIFIER . AS basic_literal
   44                    | IDENTIFIER . AS basic_literal '(' ')'

    AS  shift, and go to state 78


State 141

   39 parameterlist_with_type: parameterlist_with_type ',' END_OF_LINE . parameter_with_type

    IDENTIFIER  shift, and go to state 140

    parameter_with_type  go to state 197


State 142

   38 parameterlist_with_type: parameterlist_with_type ',' parameter_with_type .

    $default  reduce using rule 38 (parameterlist_with_type)


State 143

   45 parameter_without_type: IDENTIFIER .

    $default  reduce using rule 45 (parameter_without_type)


State 144

   42 parameterlist_without_type: parameterlist_without_type ',' END_OF_LINE . parameter_without_type

    IDENTIFIER  shift, and go to state 143

    parameter_without_type  go to state 198


State 145

   41 parameterlist_without_type: parameterlist_without_type ',' parameter_without_type .

    $default  reduce using rule 41 (parameterlist_without_type)


State 146

  135 arguments_singleline: '(' expr_list . ')'
  140 expr_list: expr_list . ',' expr

    ')'  shift, and go to state 105
    ','  shift, and go to state 106


State 147

  133 arguments_multiline: '(' END_OF_LINE expr_list END_OF_LINE . ')'

    ')'  shift, and go to state 199


State 148

  132 arguments_multiline: '(' END_OF_LINE expr_list ')' .

    $default  reduce using rule 132 (arguments_multiline)


State 149

  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  123     | expr '^' expr .
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 123 (expr)


State 150

  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  117     | expr '*' expr .
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 117 (expr)


State 151

  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  118     | expr '/' expr .
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 118 (expr)


State 152

  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  119     | expr INT_DIV expr .
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 119 (expr)


State 153

  115 expr: expr . '+' expr
  115     | expr '+' expr .
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 115 (expr)


State 154

  115 expr: expr . '+' expr
  116     | expr . '-' expr
  116     | expr '-' expr .
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 116 (expr)


State 155

  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  120     | expr '=' expr .
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '&'  shift, and go to state 103

    $default  reduce using rule 120 (expr)


State 156

  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  124     | expr NOT_EQUAL expr .
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '&'  shift, and go to state 103

    $default  reduce using rule 124 (expr)


State 157

  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  125     | expr LESS_OR_EQUAL expr .
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '&'  shift, and go to state 103

    $default  reduce using rule 125 (expr)


State 158

  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  126     | expr MORE_OR_EQUAL expr .
  127     | expr . '&' expr

    '&'  shift, and go to state 103

    $default  reduce using rule 126 (expr)


State 159

  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  122     | expr '>' expr .
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '&'  shift, and go to state 103

    $default  reduce using rule 122 (expr)


State 160

  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  121     | expr '<' expr .
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '&'  shift, and go to state 103

    $default  reduce using rule 121 (expr)


State 161

  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr
  127     | expr '&' expr .

    $default  reduce using rule 127 (expr)


State 162

  134 arguments_multiline: '(' expr_list END_OF_LINE ')' .

    $default  reduce using rule 134 (arguments_multiline)


State 163

  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr
  140 expr_list: expr_list ',' expr .

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 140 (expr_list)


State 164

   82 assign_stmt_singleline: IDENTIFIER '=' . expr
   83                       | IDENTIFIER '=' . IDENTIFIER
   84 assign_stmt_multiline: IDENTIFIER '=' . function_call_multiline

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 200
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_multiline   go to state 201
    function_call_singleline  go to state 70
    expr                      go to state 202
    basic_literal             go to state 72


State 165

  109 function_call_multiline: IDENTIFIER arguments_multiline .

    $default  reduce using rule 109 (function_call_multiline)


State 166

   16 function: FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION .

    $default  reduce using rule 16 (function)


State 167

   74 var_name: IDENTIFIER . '(' expr ')'
   75         | IDENTIFIER .

    '('  shift, and go to state 203

    $default  reduce using rule 75 (var_name)


State 168

   65 decl_stmt: CONST var_name . AS basic_literal '=' END_OF_LINE expr
   68 decl_stmt_single_line: CONST var_name . AS basic_literal '=' expr

    AS  shift, and go to state 204


State 169

   66 decl_stmt: DIM var_name . AS basic_literal '=' END_OF_LINE expr
   67          | DIM var_name . '=' END_OF_LINE expr
   69 decl_stmt_single_line: DIM var_name . AS basic_literal '=' expr
   70                      | DIM var_name . AS basic_literal
   71                      | DIM var_name . '=' expr
   72                      | DIM var_name .
   73                      | DIM var_name . '=' NEW basic_literal '(' ')' '{' expr_list '}'

    AS   shift, and go to state 205
    '='  shift, and go to state 206

    $default  reduce using rule 72 (decl_stmt_single_line)


State 170

   86 while_stmt: WHILE expr . stmt_ends stmt_list END WHILE
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    stmt_ends  go to state 207


State 171

   94 if_stmt_multi_line: IF expr . THEN stmt_ends stmt_list END IF
   95                   | IF expr . THEN stmt_ends stmt_list ELSE stmt_list END IF
   96                   | IF expr . THEN stmt_ends stmt_list elseif_list END IF
   97                   | IF expr . THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF
  100 if_stmt_single_line: IF expr . THEN single_line_stmt
  101                    | IF expr . THEN single_line_stmt ELSE single_line_stmt
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103
    THEN           shift, and go to state 208


State 172

  102 select_stmt: SELECT CASE . expr stmt_ends case_list END SELECT

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 209
    basic_literal             go to state 72


State 173

   17 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr . END FUNCTION
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    END            shift, and go to state 210
    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103


State 174

   90 do_loop_condition: WHILE . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 211
    basic_literal             go to state 72


State 175

   89 do_loop_condition: UNTIL . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 212
    basic_literal             go to state 72


State 176

   64 stmt_ends: stmt_ends . END_OF_LINE
   88 do_loop_stmt: DO stmt_ends . stmt_list LOOP do_loop_condition

    IDENTIFIER   shift, and go to state 107
    CONST        shift, and go to state 109
    DIM          shift, and go to state 110
    WHILE        shift, and go to state 111
    IF           shift, and go to state 112
    SELECT       shift, and go to state 113
    DO           shift, and go to state 115
    FOR          shift, and go to state 116
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 213
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 177

   87 do_loop_stmt: DO do_loop_condition . stmt_ends stmt_list LOOP

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 214


State 178

   91 for_loop_stmt: FOR IDENTIFIER . AS basic_literal '=' basic_literal TO basic_literal stmt_ends stmt_list NEXT
   92              | FOR IDENTIFIER . AS basic_literal '=' basic_literal TO basic_literal STEP basic_literal stmt_ends stmt_list NEXT

    AS  shift, and go to state 215


State 179

   93 for_each_loop_stmt: FOR EACH . IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

    IDENTIFIER  shift, and go to state 216


State 180

   18 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list END . FUNCTION

    FUNCTION  shift, and go to state 217


State 181

   19 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN . expr END FUNCTION

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 218
    basic_literal             go to state 72


State 182

   47 stmt_list: stmt_list stmt .

    $default  reduce using rule 47 (stmt_list)


State 183

   49 stmt: single_line_stmt stmt_ends .
   64 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 49 (stmt)


State 184

   54 multi_line_stmt: decl_stmt stmt_ends .
   64 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 54 (multi_line_stmt)


State 185

   55 multi_line_stmt: assign_stmt_multiline stmt_ends .
   64 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 55 (multi_line_stmt)


State 186

   56 multi_line_stmt: while_stmt stmt_ends .
   64 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 56 (multi_line_stmt)


State 187

   61 multi_line_stmt: if_stmt_multi_line stmt_ends .
   64 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 61 (multi_line_stmt)


State 188

   60 multi_line_stmt: select_stmt stmt_ends .
   64 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 60 (multi_line_stmt)


State 189

   85 assign_stmt_multiline: function_call_multiline '=' . function_call_multiline

    IDENTIFIER  shift, and go to state 219

    function_call_multiline  go to state 220


State 190

   26 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends END SUB
   27         | access SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends stmt_list END SUB

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 221


State 191

   20 function: access FUNCTION IDENTIFIER arguments stmt_ends END . FUNCTION

    FUNCTION  shift, and go to state 222


State 192

   21 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN . expr END FUNCTION

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 223
    basic_literal             go to state 72


State 193

   22 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list . END FUNCTION
   23         | access FUNCTION IDENTIFIER arguments stmt_ends stmt_list . RETURN expr END FUNCTION
   47 stmt_list: stmt_list . stmt

    IDENTIFIER  shift, and go to state 107
    END         shift, and go to state 224
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    RETURN      shift, and go to state 225
    DO          shift, and go to state 115
    FOR         shift, and go to state 116

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 194

   44 parameter_with_type: IDENTIFIER AS basic_literal '(' . ')'

    ')'  shift, and go to state 226


State 195

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END . SUB

    SUB  shift, and go to state 227


State 196

   25 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list . END SUB
   47 stmt_list: stmt_list . stmt

    IDENTIFIER  shift, and go to state 107
    END         shift, and go to state 228
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 197

   39 parameterlist_with_type: parameterlist_with_type ',' END_OF_LINE parameter_with_type .

    $default  reduce using rule 39 (parameterlist_with_type)


State 198

   42 parameterlist_without_type: parameterlist_without_type ',' END_OF_LINE parameter_without_type .

    $default  reduce using rule 42 (parameterlist_without_type)


State 199

  133 arguments_multiline: '(' END_OF_LINE expr_list END_OF_LINE ')' .

    $default  reduce using rule 133 (arguments_multiline)


State 200

   83 assign_stmt_singleline: IDENTIFIER '=' IDENTIFIER .
  109 function_call_multiline: IDENTIFIER . arguments_multiline
  110 function_call_singleline: IDENTIFIER . arguments_singleline

    '('  shift, and go to state 44

    $default  reduce using rule 83 (assign_stmt_singleline)

    arguments_multiline   go to state 165
    arguments_singleline  go to state 87


State 201

   84 assign_stmt_multiline: IDENTIFIER '=' function_call_multiline .

    $default  reduce using rule 84 (assign_stmt_multiline)


State 202

   82 assign_stmt_singleline: IDENTIFIER '=' expr .
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 82 (assign_stmt_singleline)


State 203

   74 var_name: IDENTIFIER '(' . expr ')'

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 229
    basic_literal             go to state 72


State 204

   65 decl_stmt: CONST var_name AS . basic_literal '=' END_OF_LINE expr
   68 decl_stmt_single_line: CONST var_name AS . basic_literal '=' expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 230


State 205

   66 decl_stmt: DIM var_name AS . basic_literal '=' END_OF_LINE expr
   69 decl_stmt_single_line: DIM var_name AS . basic_literal '=' expr
   70                      | DIM var_name AS . basic_literal

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 231


State 206

   67 decl_stmt: DIM var_name '=' . END_OF_LINE expr
   71 decl_stmt_single_line: DIM var_name '=' . expr
   73                      | DIM var_name '=' . NEW basic_literal '(' ')' '{' expr_list '}'

    INT          shift, and go to state 61
    DOUBLE       shift, and go to state 62
    STRING       shift, and go to state 63
    BOOLEAN      shift, and go to state 64
    IDENTIFIER   shift, and go to state 65
    NEW          shift, and go to state 232
    END_OF_LINE  shift, and go to state 233
    '+'          shift, and go to state 67
    '-'          shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 234
    basic_literal             go to state 72


State 207

   64 stmt_ends: stmt_ends . END_OF_LINE
   86 while_stmt: WHILE expr stmt_ends . stmt_list END WHILE

    IDENTIFIER   shift, and go to state 107
    CONST        shift, and go to state 109
    DIM          shift, and go to state 110
    WHILE        shift, and go to state 111
    IF           shift, and go to state 112
    SELECT       shift, and go to state 113
    DO           shift, and go to state 115
    FOR          shift, and go to state 116
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 235
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 208

   94 if_stmt_multi_line: IF expr THEN . stmt_ends stmt_list END IF
   95                   | IF expr THEN . stmt_ends stmt_list ELSE stmt_list END IF
   96                   | IF expr THEN . stmt_ends stmt_list elseif_list END IF
   97                   | IF expr THEN . stmt_ends stmt_list elseif_list ELSE stmt_list END IF
  100 if_stmt_single_line: IF expr THEN . single_line_stmt
  101                    | IF expr THEN . single_line_stmt ELSE single_line_stmt

    IDENTIFIER   shift, and go to state 236
    CONST        shift, and go to state 237
    DIM          shift, and go to state 238
    IF           shift, and go to state 239
    END_OF_LINE  shift, and go to state 20

    single_line_stmt          go to state 240
    stmt_ends                 go to state 241
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    if_stmt_single_line       go to state 130
    function_call_singleline  go to state 133


State 209

  102 select_stmt: SELECT CASE expr . stmt_ends case_list END SELECT
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    stmt_ends  go to state 242


State 210

   17 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END . FUNCTION

    FUNCTION  shift, and go to state 243


State 211

   90 do_loop_condition: WHILE expr .
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 90 (do_loop_condition)


State 212

   89 do_loop_condition: UNTIL expr .
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 89 (do_loop_condition)


State 213

   47 stmt_list: stmt_list . stmt
   88 do_loop_stmt: DO stmt_ends stmt_list . LOOP do_loop_condition

    IDENTIFIER  shift, and go to state 107
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    LOOP        shift, and go to state 244
    FOR         shift, and go to state 116

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 214

   64 stmt_ends: stmt_ends . END_OF_LINE
   87 do_loop_stmt: DO do_loop_condition stmt_ends . stmt_list LOOP

    IDENTIFIER   shift, and go to state 107
    CONST        shift, and go to state 109
    DIM          shift, and go to state 110
    WHILE        shift, and go to state 111
    IF           shift, and go to state 112
    SELECT       shift, and go to state 113
    DO           shift, and go to state 115
    FOR          shift, and go to state 116
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 245
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 215

   91 for_loop_stmt: FOR IDENTIFIER AS . basic_literal '=' basic_literal TO basic_literal stmt_ends stmt_list NEXT
   92              | FOR IDENTIFIER AS . basic_literal '=' basic_literal TO basic_literal STEP basic_literal stmt_ends stmt_list NEXT

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 246


State 216

   93 for_each_loop_stmt: FOR EACH IDENTIFIER . AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

    AS  shift, and go to state 247


State 217

   18 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION .

    $default  reduce using rule 18 (function)


State 218

   19 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr . END FUNCTION
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    END            shift, and go to state 248
    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103


State 219

  109 function_call_multiline: IDENTIFIER . arguments_multiline

    '('  shift, and go to state 249

    arguments_multiline  go to state 165


State 220

   85 assign_stmt_multiline: function_call_multiline '=' function_call_multiline .

    $default  reduce using rule 85 (assign_stmt_multiline)


State 221

   26 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . END SUB
   27         | access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . stmt_list END SUB
   64 stmt_ends: stmt_ends . END_OF_LINE

    IDENTIFIER   shift, and go to state 107
    END          shift, and go to state 250
    CONST        shift, and go to state 109
    DIM          shift, and go to state 110
    WHILE        shift, and go to state 111
    IF           shift, and go to state 112
    SELECT       shift, and go to state 113
    DO           shift, and go to state 115
    FOR          shift, and go to state 116
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 251
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 222

   20 function: access FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION .

    $default  reduce using rule 20 (function)


State 223

   21 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr . END FUNCTION
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    END            shift, and go to state 252
    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103


State 224

   22 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list END . FUNCTION

    FUNCTION  shift, and go to state 253


State 225

   23 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN . expr END FUNCTION

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 254
    basic_literal             go to state 72


State 226

   44 parameter_with_type: IDENTIFIER AS basic_literal '(' ')' .

    $default  reduce using rule 44 (parameter_with_type)


State 227

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB .

    $default  reduce using rule 24 (sub_bloc)


State 228

   25 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END . SUB

    SUB  shift, and go to state 255


State 229

   74 var_name: IDENTIFIER '(' expr . ')'
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103
    ')'            shift, and go to state 256


State 230

   65 decl_stmt: CONST var_name AS basic_literal . '=' END_OF_LINE expr
   68 decl_stmt_single_line: CONST var_name AS basic_literal . '=' expr

    '='  shift, and go to state 257


State 231

   66 decl_stmt: DIM var_name AS basic_literal . '=' END_OF_LINE expr
   69 decl_stmt_single_line: DIM var_name AS basic_literal . '=' expr
   70                      | DIM var_name AS basic_literal .

    '='  shift, and go to state 258

    $default  reduce using rule 70 (decl_stmt_single_line)


State 232

   73 decl_stmt_single_line: DIM var_name '=' NEW . basic_literal '(' ')' '{' expr_list '}'

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 259


State 233

   67 decl_stmt: DIM var_name '=' END_OF_LINE . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 260
    basic_literal             go to state 72


State 234

   71 decl_stmt_single_line: DIM var_name '=' expr .
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 71 (decl_stmt_single_line)


State 235

   47 stmt_list: stmt_list . stmt
   86 while_stmt: WHILE expr stmt_ends stmt_list . END WHILE

    IDENTIFIER  shift, and go to state 107
    END         shift, and go to state 261
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 236

   82 assign_stmt_singleline: IDENTIFIER . '=' expr
   83                       | IDENTIFIER . '=' IDENTIFIER
  110 function_call_singleline: IDENTIFIER . arguments_singleline

    '='  shift, and go to state 262
    '('  shift, and go to state 86

    arguments_singleline  go to state 87


State 237

   68 decl_stmt_single_line: CONST . var_name AS basic_literal '=' expr

    IDENTIFIER  shift, and go to state 167

    var_name  go to state 263


State 238

   69 decl_stmt_single_line: DIM . var_name AS basic_literal '=' expr
   70                      | DIM . var_name AS basic_literal
   71                      | DIM . var_name '=' expr
   72                      | DIM . var_name
   73                      | DIM . var_name '=' NEW basic_literal '(' ')' '{' expr_list '}'

    IDENTIFIER  shift, and go to state 167

    var_name  go to state 264


State 239

  100 if_stmt_single_line: IF . expr THEN single_line_stmt
  101                    | IF . expr THEN single_line_stmt ELSE single_line_stmt

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 265
    basic_literal             go to state 72


State 240

  100 if_stmt_single_line: IF expr THEN single_line_stmt .
  101                    | IF expr THEN single_line_stmt . ELSE single_line_stmt

    ELSE  shift, and go to state 266

    $default  reduce using rule 100 (if_stmt_single_line)


State 241

   64 stmt_ends: stmt_ends . END_OF_LINE
   94 if_stmt_multi_line: IF expr THEN stmt_ends . stmt_list END IF
   95                   | IF expr THEN stmt_ends . stmt_list ELSE stmt_list END IF
   96                   | IF expr THEN stmt_ends . stmt_list elseif_list END IF
   97                   | IF expr THEN stmt_ends . stmt_list elseif_list ELSE stmt_list END IF

    IDENTIFIER   shift, and go to state 107
    CONST        shift, and go to state 109
    DIM          shift, and go to state 110
    WHILE        shift, and go to state 111
    IF           shift, and go to state 112
    SELECT       shift, and go to state 113
    DO           shift, and go to state 115
    FOR          shift, and go to state 116
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 267
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 242

   64 stmt_ends: stmt_ends . END_OF_LINE
  102 select_stmt: SELECT CASE expr stmt_ends . case_list END SELECT

    CASE         shift, and go to state 268
    END_OF_LINE  shift, and go to state 24

    case_list  go to state 269
    case_stmt  go to state 270


State 243

   17 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION .

    $default  reduce using rule 17 (function)


State 244

   88 do_loop_stmt: DO stmt_ends stmt_list LOOP . do_loop_condition

    WHILE  shift, and go to state 174
    UNTIL  shift, and go to state 175

    do_loop_condition  go to state 271


State 245

   47 stmt_list: stmt_list . stmt
   87 do_loop_stmt: DO do_loop_condition stmt_ends stmt_list . LOOP

    IDENTIFIER  shift, and go to state 107
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    LOOP        shift, and go to state 272
    FOR         shift, and go to state 116

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 246

   91 for_loop_stmt: FOR IDENTIFIER AS basic_literal . '=' basic_literal TO basic_literal stmt_ends stmt_list NEXT
   92              | FOR IDENTIFIER AS basic_literal . '=' basic_literal TO basic_literal STEP basic_literal stmt_ends stmt_list NEXT

    '='  shift, and go to state 273


State 247

   93 for_each_loop_stmt: FOR EACH IDENTIFIER AS . basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 274


State 248

   19 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END . FUNCTION

    FUNCTION  shift, and go to state 275


State 249

  132 arguments_multiline: '(' . END_OF_LINE expr_list ')'
  133                    | '(' . END_OF_LINE expr_list END_OF_LINE ')'
  134                    | '(' . expr_list END_OF_LINE ')'

    INT          shift, and go to state 61
    DOUBLE       shift, and go to state 62
    STRING       shift, and go to state 63
    BOOLEAN      shift, and go to state 64
    IDENTIFIER   shift, and go to state 65
    END_OF_LINE  shift, and go to state 66
    '+'          shift, and go to state 67
    '-'          shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 71
    basic_literal             go to state 72
    expr_list                 go to state 276


State 250

   26 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END . SUB

    SUB  shift, and go to state 277


State 251

   27 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list . END SUB
   47 stmt_list: stmt_list . stmt

    IDENTIFIER  shift, and go to state 107
    END         shift, and go to state 278
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 252

   21 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END . FUNCTION

    FUNCTION  shift, and go to state 279


State 253

   22 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION .

    $default  reduce using rule 22 (function)


State 254

   23 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr . END FUNCTION
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    END            shift, and go to state 280
    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103


State 255

   25 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB .

    $default  reduce using rule 25 (sub_bloc)


State 256

   74 var_name: IDENTIFIER '(' expr ')' .

    $default  reduce using rule 74 (var_name)


State 257

   65 decl_stmt: CONST var_name AS basic_literal '=' . END_OF_LINE expr
   68 decl_stmt_single_line: CONST var_name AS basic_literal '=' . expr

    INT          shift, and go to state 61
    DOUBLE       shift, and go to state 62
    STRING       shift, and go to state 63
    BOOLEAN      shift, and go to state 64
    IDENTIFIER   shift, and go to state 65
    END_OF_LINE  shift, and go to state 281
    '+'          shift, and go to state 67
    '-'          shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 282
    basic_literal             go to state 72


State 258

   66 decl_stmt: DIM var_name AS basic_literal '=' . END_OF_LINE expr
   69 decl_stmt_single_line: DIM var_name AS basic_literal '=' . expr

    INT          shift, and go to state 61
    DOUBLE       shift, and go to state 62
    STRING       shift, and go to state 63
    BOOLEAN      shift, and go to state 64
    IDENTIFIER   shift, and go to state 65
    END_OF_LINE  shift, and go to state 283
    '+'          shift, and go to state 67
    '-'          shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 284
    basic_literal             go to state 72


State 259

   73 decl_stmt_single_line: DIM var_name '=' NEW basic_literal . '(' ')' '{' expr_list '}'

    '('  shift, and go to state 285


State 260

   67 decl_stmt: DIM var_name '=' END_OF_LINE expr .
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 67 (decl_stmt)


State 261

   86 while_stmt: WHILE expr stmt_ends stmt_list END . WHILE

    WHILE  shift, and go to state 286


State 262

   82 assign_stmt_singleline: IDENTIFIER '=' . expr
   83                       | IDENTIFIER '=' . IDENTIFIER

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 287
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 202
    basic_literal             go to state 72


State 263

   68 decl_stmt_single_line: CONST var_name . AS basic_literal '=' expr

    AS  shift, and go to state 288


State 264

   69 decl_stmt_single_line: DIM var_name . AS basic_literal '=' expr
   70                      | DIM var_name . AS basic_literal
   71                      | DIM var_name . '=' expr
   72                      | DIM var_name .
   73                      | DIM var_name . '=' NEW basic_literal '(' ')' '{' expr_list '}'

    AS   shift, and go to state 289
    '='  shift, and go to state 290

    $default  reduce using rule 72 (decl_stmt_single_line)


State 265

  100 if_stmt_single_line: IF expr . THEN single_line_stmt
  101                    | IF expr . THEN single_line_stmt ELSE single_line_stmt
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103
    THEN           shift, and go to state 291


State 266

  101 if_stmt_single_line: IF expr THEN single_line_stmt ELSE . single_line_stmt

    IDENTIFIER  shift, and go to state 236
    CONST       shift, and go to state 237
    DIM         shift, and go to state 238
    IF          shift, and go to state 239

    single_line_stmt          go to state 292
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    if_stmt_single_line       go to state 130
    function_call_singleline  go to state 133


State 267

   47 stmt_list: stmt_list . stmt
   94 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list . END IF
   95                   | IF expr THEN stmt_ends stmt_list . ELSE stmt_list END IF
   96                   | IF expr THEN stmt_ends stmt_list . elseif_list END IF
   97                   | IF expr THEN stmt_ends stmt_list . elseif_list ELSE stmt_list END IF

    IDENTIFIER  shift, and go to state 107
    END         shift, and go to state 293
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    ELSEIF      shift, and go to state 294
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116
    ELSE        shift, and go to state 295

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    elseif_list               go to state 296
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 268

  105 case_stmt: CASE . expr stmt_ends stmt_list
  106          | CASE . IS expr stmt_ends stmt_list
  107          | CASE . expr TO expr stmt_ends stmt_list
  108          | CASE . ELSE stmt_ends stmt_list

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    IS          shift, and go to state 297
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68
    ELSE        shift, and go to state 298

    function_call_singleline  go to state 70
    expr                      go to state 299
    basic_literal             go to state 72


State 269

  102 select_stmt: SELECT CASE expr stmt_ends case_list . END SELECT
  104 case_list: case_list . case_stmt

    END   shift, and go to state 300
    CASE  shift, and go to state 268

    case_stmt  go to state 301


State 270

  103 case_list: case_stmt .

    $default  reduce using rule 103 (case_list)


State 271

   88 do_loop_stmt: DO stmt_ends stmt_list LOOP do_loop_condition .

    $default  reduce using rule 88 (do_loop_stmt)


State 272

   87 do_loop_stmt: DO do_loop_condition stmt_ends stmt_list LOOP .

    $default  reduce using rule 87 (do_loop_stmt)


State 273

   91 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' . basic_literal TO basic_literal stmt_ends stmt_list NEXT
   92              | FOR IDENTIFIER AS basic_literal '=' . basic_literal TO basic_literal STEP basic_literal stmt_ends stmt_list NEXT

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 302


State 274

   93 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal . IN IDENTIFIER stmt_ends stmt_list NEXT

    IN  shift, and go to state 303


State 275

   19 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION .

    $default  reduce using rule 19 (function)


State 276

  134 arguments_multiline: '(' expr_list . END_OF_LINE ')'
  140 expr_list: expr_list . ',' expr

    END_OF_LINE  shift, and go to state 104
    ','          shift, and go to state 106


State 277

   26 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB .

    $default  reduce using rule 26 (sub_bloc)


State 278

   27 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END . SUB

    SUB  shift, and go to state 304


State 279

   21 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION .

    $default  reduce using rule 21 (function)


State 280

   23 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END . FUNCTION

    FUNCTION  shift, and go to state 305


State 281

   65 decl_stmt: CONST var_name AS basic_literal '=' END_OF_LINE . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 306
    basic_literal             go to state 72


State 282

   68 decl_stmt_single_line: CONST var_name AS basic_literal '=' expr .
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 68 (decl_stmt_single_line)


State 283

   66 decl_stmt: DIM var_name AS basic_literal '=' END_OF_LINE . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 307
    basic_literal             go to state 72


State 284

   69 decl_stmt_single_line: DIM var_name AS basic_literal '=' expr .
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 69 (decl_stmt_single_line)


State 285

   73 decl_stmt_single_line: DIM var_name '=' NEW basic_literal '(' . ')' '{' expr_list '}'

    ')'  shift, and go to state 308


State 286

   86 while_stmt: WHILE expr stmt_ends stmt_list END WHILE .

    $default  reduce using rule 86 (while_stmt)


State 287

   83 assign_stmt_singleline: IDENTIFIER '=' IDENTIFIER .
  110 function_call_singleline: IDENTIFIER . arguments_singleline

    '('  shift, and go to state 86

    $default  reduce using rule 83 (assign_stmt_singleline)

    arguments_singleline  go to state 87


State 288

   68 decl_stmt_single_line: CONST var_name AS . basic_literal '=' expr

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 309


State 289

   69 decl_stmt_single_line: DIM var_name AS . basic_literal '=' expr
   70                      | DIM var_name AS . basic_literal

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 310


State 290

   71 decl_stmt_single_line: DIM var_name '=' . expr
   73                      | DIM var_name '=' . NEW basic_literal '(' ')' '{' expr_list '}'

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    NEW         shift, and go to state 232
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 234
    basic_literal             go to state 72


State 291

  100 if_stmt_single_line: IF expr THEN . single_line_stmt
  101                    | IF expr THEN . single_line_stmt ELSE single_line_stmt

    IDENTIFIER  shift, and go to state 236
    CONST       shift, and go to state 237
    DIM         shift, and go to state 238
    IF          shift, and go to state 239

    single_line_stmt          go to state 240
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    if_stmt_single_line       go to state 130
    function_call_singleline  go to state 133


State 292

  101 if_stmt_single_line: IF expr THEN single_line_stmt ELSE single_line_stmt .

    $default  reduce using rule 101 (if_stmt_single_line)


State 293

   94 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list END . IF

    IF  shift, and go to state 311


State 294

   98 elseif_list: ELSEIF . expr THEN stmt_list

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 312
    basic_literal             go to state 72


State 295

   95 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list ELSE . stmt_list END IF

    IDENTIFIER  shift, and go to state 107
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116

    stmt_list                 go to state 313
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 296

   96 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list . END IF
   97                   | IF expr THEN stmt_ends stmt_list elseif_list . ELSE stmt_list END IF
   99 elseif_list: elseif_list . ELSEIF expr THEN stmt_list

    END     shift, and go to state 314
    ELSEIF  shift, and go to state 315
    ELSE    shift, and go to state 316


State 297

  106 case_stmt: CASE IS . expr stmt_ends stmt_list

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 317
    basic_literal             go to state 72


State 298

  108 case_stmt: CASE ELSE . stmt_ends stmt_list

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 318


State 299

  105 case_stmt: CASE expr . stmt_ends stmt_list
  107          | CASE expr . TO expr stmt_ends stmt_list
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    TO             shift, and go to state 319
    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    stmt_ends  go to state 320


State 300

  102 select_stmt: SELECT CASE expr stmt_ends case_list END . SELECT

    SELECT  shift, and go to state 321


State 301

  104 case_list: case_list case_stmt .

    $default  reduce using rule 104 (case_list)


State 302

   91 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal . TO basic_literal stmt_ends stmt_list NEXT
   92              | FOR IDENTIFIER AS basic_literal '=' basic_literal . TO basic_literal STEP basic_literal stmt_ends stmt_list NEXT

    TO  shift, and go to state 322


State 303

   93 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN . IDENTIFIER stmt_ends stmt_list NEXT

    IDENTIFIER  shift, and go to state 323


State 304

   27 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB .

    $default  reduce using rule 27 (sub_bloc)


State 305

   23 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION .

    $default  reduce using rule 23 (function)


State 306

   65 decl_stmt: CONST var_name AS basic_literal '=' END_OF_LINE expr .
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 65 (decl_stmt)


State 307

   66 decl_stmt: DIM var_name AS basic_literal '=' END_OF_LINE expr .
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 66 (decl_stmt)


State 308

   73 decl_stmt_single_line: DIM var_name '=' NEW basic_literal '(' ')' . '{' expr_list '}'

    '{'  shift, and go to state 324


State 309

   68 decl_stmt_single_line: CONST var_name AS basic_literal . '=' expr

    '='  shift, and go to state 325


State 310

   69 decl_stmt_single_line: DIM var_name AS basic_literal . '=' expr
   70                      | DIM var_name AS basic_literal .

    '='  shift, and go to state 326

    $default  reduce using rule 70 (decl_stmt_single_line)


State 311

   94 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list END IF .

    $default  reduce using rule 94 (if_stmt_multi_line)


State 312

   98 elseif_list: ELSEIF expr . THEN stmt_list
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103
    THEN           shift, and go to state 327


State 313

   47 stmt_list: stmt_list . stmt
   95 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list ELSE stmt_list . END IF

    IDENTIFIER  shift, and go to state 107
    END         shift, and go to state 328
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 314

   96 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list END . IF

    IF  shift, and go to state 329


State 315

   99 elseif_list: elseif_list ELSEIF . expr THEN stmt_list

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 330
    basic_literal             go to state 72


State 316

   97 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list ELSE . stmt_list END IF

    IDENTIFIER  shift, and go to state 107
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116

    stmt_list                 go to state 331
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 317

  106 case_stmt: CASE IS expr . stmt_ends stmt_list
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    stmt_ends  go to state 332


State 318

   64 stmt_ends: stmt_ends . END_OF_LINE
  108 case_stmt: CASE ELSE stmt_ends . stmt_list

    IDENTIFIER   shift, and go to state 107
    CONST        shift, and go to state 109
    DIM          shift, and go to state 110
    WHILE        shift, and go to state 111
    IF           shift, and go to state 112
    SELECT       shift, and go to state 113
    DO           shift, and go to state 115
    FOR          shift, and go to state 116
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 333
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 319

  107 case_stmt: CASE expr TO . expr stmt_ends stmt_list

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 334
    basic_literal             go to state 72


State 320

   64 stmt_ends: stmt_ends . END_OF_LINE
  105 case_stmt: CASE expr stmt_ends . stmt_list

    IDENTIFIER   shift, and go to state 107
    CONST        shift, and go to state 109
    DIM          shift, and go to state 110
    WHILE        shift, and go to state 111
    IF           shift, and go to state 112
    SELECT       shift, and go to state 113
    DO           shift, and go to state 115
    FOR          shift, and go to state 116
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 335
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 321

  102 select_stmt: SELECT CASE expr stmt_ends case_list END SELECT .

    $default  reduce using rule 102 (select_stmt)


State 322

   91 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO . basic_literal stmt_ends stmt_list NEXT
   92              | FOR IDENTIFIER AS basic_literal '=' basic_literal TO . basic_literal STEP basic_literal stmt_ends stmt_list NEXT

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 336


State 323

   93 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER . stmt_ends stmt_list NEXT

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 337


State 324

   73 decl_stmt_single_line: DIM var_name '=' NEW basic_literal '(' ')' '{' . expr_list '}'

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 71
    basic_literal             go to state 72
    expr_list                 go to state 338


State 325

   68 decl_stmt_single_line: CONST var_name AS basic_literal '=' . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 282
    basic_literal             go to state 72


State 326

   69 decl_stmt_single_line: DIM var_name AS basic_literal '=' . expr

    INT         shift, and go to state 61
    DOUBLE      shift, and go to state 62
    STRING      shift, and go to state 63
    BOOLEAN     shift, and go to state 64
    IDENTIFIER  shift, and go to state 65
    '+'         shift, and go to state 67
    '-'         shift, and go to state 68

    function_call_singleline  go to state 70
    expr                      go to state 284
    basic_literal             go to state 72


State 327

   98 elseif_list: ELSEIF expr THEN . stmt_list

    IDENTIFIER  shift, and go to state 107
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116

    stmt_list                 go to state 339
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 328

   95 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list ELSE stmt_list END . IF

    IF  shift, and go to state 340


State 329

   96 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list END IF .

    $default  reduce using rule 96 (if_stmt_multi_line)


State 330

   99 elseif_list: elseif_list ELSEIF expr . THEN stmt_list
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103
    THEN           shift, and go to state 341


State 331

   47 stmt_list: stmt_list . stmt
   97 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list ELSE stmt_list . END IF

    IDENTIFIER  shift, and go to state 107
    END         shift, and go to state 342
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 332

   64 stmt_ends: stmt_ends . END_OF_LINE
  106 case_stmt: CASE IS expr stmt_ends . stmt_list

    IDENTIFIER   shift, and go to state 107
    CONST        shift, and go to state 109
    DIM          shift, and go to state 110
    WHILE        shift, and go to state 111
    IF           shift, and go to state 112
    SELECT       shift, and go to state 113
    DO           shift, and go to state 115
    FOR          shift, and go to state 116
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 343
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 333

   47 stmt_list: stmt_list . stmt
  108 case_stmt: CASE ELSE stmt_ends stmt_list .

    IDENTIFIER  shift, and go to state 107
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116

    $default  reduce using rule 108 (case_stmt)

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 334

  107 case_stmt: CASE expr TO expr . stmt_ends stmt_list
  115 expr: expr . '+' expr
  116     | expr . '-' expr
  117     | expr . '*' expr
  118     | expr . '/' expr
  119     | expr . INT_DIV expr
  120     | expr . '=' expr
  121     | expr . '<' expr
  122     | expr . '>' expr
  123     | expr . '^' expr
  124     | expr . NOT_EQUAL expr
  125     | expr . LESS_OR_EQUAL expr
  126     | expr . MORE_OR_EQUAL expr
  127     | expr . '&' expr

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    stmt_ends  go to state 344


State 335

   47 stmt_list: stmt_list . stmt
  105 case_stmt: CASE expr stmt_ends stmt_list .

    IDENTIFIER  shift, and go to state 107
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116

    $default  reduce using rule 105 (case_stmt)

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 336

   91 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal . stmt_ends stmt_list NEXT
   92              | FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal . STEP basic_literal stmt_ends stmt_list NEXT

    STEP         shift, and go to state 345
    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 346


State 337

   64 stmt_ends: stmt_ends . END_OF_LINE
   93 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends . stmt_list NEXT

    IDENTIFIER   shift, and go to state 107
    CONST        shift, and go to state 109
    DIM          shift, and go to state 110
    WHILE        shift, and go to state 111
    IF           shift, and go to state 112
    SELECT       shift, and go to state 113
    DO           shift, and go to state 115
    FOR          shift, and go to state 116
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 347
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 338

   73 decl_stmt_single_line: DIM var_name '=' NEW basic_literal '(' ')' '{' expr_list . '}'
  140 expr_list: expr_list . ',' expr

    ','  shift, and go to state 106
    '}'  shift, and go to state 348


State 339

   47 stmt_list: stmt_list . stmt
   98 elseif_list: ELSEIF expr THEN stmt_list .

    IDENTIFIER  shift, and go to state 107
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116

    $default  reduce using rule 98 (elseif_list)

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 340

   95 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list ELSE stmt_list END IF .

    $default  reduce using rule 95 (if_stmt_multi_line)


State 341

   99 elseif_list: elseif_list ELSEIF expr THEN . stmt_list

    IDENTIFIER  shift, and go to state 107
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116

    stmt_list                 go to state 349
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 342

   97 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list ELSE stmt_list END . IF

    IF  shift, and go to state 350


State 343

   47 stmt_list: stmt_list . stmt
  106 case_stmt: CASE IS expr stmt_ends stmt_list .

    IDENTIFIER  shift, and go to state 107
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116

    $default  reduce using rule 106 (case_stmt)

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 344

   64 stmt_ends: stmt_ends . END_OF_LINE
  107 case_stmt: CASE expr TO expr stmt_ends . stmt_list

    IDENTIFIER   shift, and go to state 107
    CONST        shift, and go to state 109
    DIM          shift, and go to state 110
    WHILE        shift, and go to state 111
    IF           shift, and go to state 112
    SELECT       shift, and go to state 113
    DO           shift, and go to state 115
    FOR          shift, and go to state 116
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 351
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 345

   92 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal STEP . basic_literal stmt_ends stmt_list NEXT

    INT      shift, and go to state 61
    DOUBLE   shift, and go to state 62
    STRING   shift, and go to state 63
    BOOLEAN  shift, and go to state 64

    basic_literal  go to state 352


State 346

   64 stmt_ends: stmt_ends . END_OF_LINE
   91 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal stmt_ends . stmt_list NEXT

    IDENTIFIER   shift, and go to state 107
    CONST        shift, and go to state 109
    DIM          shift, and go to state 110
    WHILE        shift, and go to state 111
    IF           shift, and go to state 112
    SELECT       shift, and go to state 113
    DO           shift, and go to state 115
    FOR          shift, and go to state 116
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 353
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 347

   47 stmt_list: stmt_list . stmt
   93 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list . NEXT

    IDENTIFIER  shift, and go to state 107
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116
    NEXT        shift, and go to state 354

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 348

   73 decl_stmt_single_line: DIM var_name '=' NEW basic_literal '(' ')' '{' expr_list '}' .

    $default  reduce using rule 73 (decl_stmt_single_line)


State 349

   47 stmt_list: stmt_list . stmt
   99 elseif_list: elseif_list ELSEIF expr THEN stmt_list .

    IDENTIFIER  shift, and go to state 107
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116

    $default  reduce using rule 99 (elseif_list)

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 350

   97 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF .

    $default  reduce using rule 97 (if_stmt_multi_line)


State 351

   47 stmt_list: stmt_list . stmt
  107 case_stmt: CASE expr TO expr stmt_ends stmt_list .

    IDENTIFIER  shift, and go to state 107
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116

    $default  reduce using rule 107 (case_stmt)

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 352

   92 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal STEP basic_literal . stmt_ends stmt_list NEXT

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 355


State 353

   47 stmt_list: stmt_list . stmt
   91 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal stmt_ends stmt_list . NEXT

    IDENTIFIER  shift, and go to state 107
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116
    NEXT        shift, and go to state 356

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 354

   93 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT .

    $default  reduce using rule 93 (for_each_loop_stmt)


State 355

   64 stmt_ends: stmt_ends . END_OF_LINE
   92 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal STEP basic_literal stmt_ends . stmt_list NEXT

    IDENTIFIER   shift, and go to state 107
    CONST        shift, and go to state 109
    DIM          shift, and go to state 110
    WHILE        shift, and go to state 111
    IF           shift, and go to state 112
    SELECT       shift, and go to state 113
    DO           shift, and go to state 115
    FOR          shift, and go to state 116
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 357
    stmt                      go to state 118
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 356

   91 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal stmt_ends stmt_list NEXT .

    $default  reduce using rule 91 (for_loop_stmt)


State 357

   47 stmt_list: stmt_list . stmt
   92 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal STEP basic_literal stmt_ends stmt_list . NEXT

    IDENTIFIER  shift, and go to state 107
    CONST       shift, and go to state 109
    DIM         shift, and go to state 110
    WHILE       shift, and go to state 111
    IF          shift, and go to state 112
    SELECT      shift, and go to state 113
    DO          shift, and go to state 115
    FOR         shift, and go to state 116
    NEXT        shift, and go to state 358

    stmt                      go to state 182
    single_line_stmt          go to state 119
    multi_line_stmt           go to state 120
    decl_stmt                 go to state 121
    decl_stmt_single_line     go to state 122
    assign_stmt_singleline    go to state 123
    assign_stmt_multiline     go to state 124
    while_stmt                go to state 125
    do_loop_stmt              go to state 126
    for_loop_stmt             go to state 127
    for_each_loop_stmt        go to state 128
    if_stmt_multi_line        go to state 129
    if_stmt_single_line       go to state 130
    select_stmt               go to state 131
    function_call_multiline   go to state 132
    function_call_singleline  go to state 133


State 358

   92 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal TO basic_literal STEP basic_literal stmt_ends stmt_list NEXT .

    $default  reduce using rule 92 (for_loop_stmt)
