Terminals unused in grammar

    IDENTIFIER_VALUE
    ENDL
    OF
    ASSIGN_CONSTRUCT
    ASSIGN_MULT
    ASSIGN_ORD_DIV
    ASSIGN_INT_DIV
    ASSIGN_ADD
    ASSIGN_SUB
    ASSIGN_LSHIFT
    ASSIGN_RSHIFT
    ASSIGN_CONCAT


State 236 conflicts: 2 shift/reduce
State 237 conflicts: 2 shift/reduce


Grammar

    0 $accept: root $end

    1 root: program_items_list

    2 program_items_list: %empty
    3                   | program_items_list_not_empty

    4 program_items_list_not_empty: program_item
    5                             | program_items_list_not_empty program_item

    6 program_item: module
    7             | IMPORTS IDENTIFIER stmt_ends

    8 module: MODULE IDENTIFIER stmt_ends END MODULE
    9       | MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE
   10       | access MODULE IDENTIFIER stmt_ends END MODULE
   11       | access MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE

   12 functions_and_sub_list: function_or_sub
   13                       | functions_and_sub_list stmt_ends function_or_sub

   14 function_or_sub: function
   15                | sub_bloc

   16 function: FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION
   17         | FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_singleline stmt_ends END FUNCTION
   18         | FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_multiline stmt_ends END FUNCTION
   19         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   20         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_singleline stmt_ends END FUNCTION
   21         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_multiline stmt_ends END FUNCTION
   22         | access FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION
   23         | access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_singleline stmt_ends END FUNCTION
   24         | access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_multiline stmt_ends END FUNCTION
   25         | access FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   26         | access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_singleline stmt_ends END FUNCTION
   27         | access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_multiline stmt_ends END FUNCTION

   28 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   29         | SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB
   30         | access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   31         | access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

   32 parameterlist_or_empty: %empty
   33                       | parameterlist_with_type
   34                       | END_OF_LINE parameterlist_with_type END_OF_LINE
   35                       | END_OF_LINE parameterlist_with_type
   36                       | parameterlist_with_type END_OF_LINE
   37                       | parameterlist_without_type
   38                       | END_OF_LINE parameterlist_without_type END_OF_LINE
   39                       | parameterlist_without_type END_OF_LINE
   40                       | END_OF_LINE parameterlist_without_type

   41 parameterlist_with_type: parameter_with_type
   42                        | parameterlist_with_type ',' parameter_with_type
   43                        | parameterlist_with_type ',' END_OF_LINE parameter_with_type

   44 parameterlist_without_type: parameter_without_type
   45                           | parameterlist_without_type ',' parameter_without_type
   46                           | parameterlist_without_type ',' END_OF_LINE parameter_without_type

   47 parameter_with_type: IDENTIFIER AS basic_literal
   48                    | IDENTIFIER AS basic_literal '(' ')'

   49 parameter_without_type: IDENTIFIER

   50 stmt_list: stmt
   51          | stmt_list stmt

   52 stmt: multi_line_stmt
   53     | single_line_stmt stmt_ends

   54 single_line_stmt: if_stmt_single_line
   55                 | decl_stmt_single_line
   56                 | expr_singleline

   57 multi_line_stmt: decl_stmt stmt_ends
   58                | while_stmt stmt_ends
   59                | do_loop_stmt
   60                | for_loop_stmt
   61                | for_each_loop_stmt
   62                | select_stmt stmt_ends
   63                | if_stmt_multi_line stmt_ends
   64                | expr_multiline stmt_ends

   65 stmt_ends: END_OF_LINE
   66          | stmt_ends END_OF_LINE

   67 decl_stmt: CONST var_name AS basic_literal '=' END_OF_LINE expr_multiline
   68          | CONST var_name_singleline AS basic_literal '=' END_OF_LINE expr_multiline
   69          | DIM var_name AS basic_literal '=' END_OF_LINE expr_multiline
   70          | DIM var_name_singleline AS basic_literal '=' END_OF_LINE expr_multiline
   71          | DIM var_name '=' END_OF_LINE expr_multiline
   72          | DIM var_name_singleline '=' END_OF_LINE expr_multiline

   73 decl_stmt_single_line: CONST var_name_singleline AS basic_literal '=' expr_singleline
   74                      | DIM var_name_singleline AS basic_literal '=' expr_singleline
   75                      | DIM var_name_singleline AS basic_literal
   76                      | DIM var_name_singleline '=' expr_singleline
   77                      | DIM var_name_singleline
   78                      | DIM var_name_singleline '=' NEW basic_literal '(' ')' '{' expr_list '}'

   79 var_name: IDENTIFIER '(' expr_multiline ')'

   80 var_name_singleline: IDENTIFIER '(' expr_singleline ')'
   81                    | IDENTIFIER

   82 access: PUBLIC
   83       | PROTECTED
   84       | FRIEND
   85       | PRIVATE
   86       | PROTECTED FRIEND
   87       | PRIVATE FRIEND

   88 while_stmt: WHILE expr_multiline stmt_ends stmt_list END WHILE
   89           | WHILE expr_singleline stmt_ends stmt_list END WHILE

   90 do_loop_stmt: DO do_loop_condition stmt_ends stmt_list LOOP
   91             | DO stmt_ends stmt_list LOOP do_loop_condition

   92 do_loop_condition: UNTIL expr_singleline
   93                  | WHILE expr_singleline

   94 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value stmt_ends stmt_list NEXT
   95              | FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT

   96 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

   97 if_stmt_multi_line: IF expr_multiline THEN stmt_ends stmt_list END IF
   98                   | IF expr_singleline THEN stmt_ends stmt_list END IF
   99                   | IF expr_multiline THEN stmt_ends stmt_list ELSE stmt_list END IF
  100                   | IF expr_singleline THEN stmt_ends stmt_list ELSE stmt_list END IF
  101                   | IF expr_multiline THEN stmt_ends stmt_list elseif_list END IF
  102                   | IF expr_singleline THEN stmt_ends stmt_list elseif_list END IF
  103                   | IF expr_multiline THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF
  104                   | IF expr_singleline THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF

  105 elseif_list: ELSEIF expr_multiline THEN stmt_list
  106            | ELSEIF expr_singleline THEN stmt_list
  107            | elseif_list ELSEIF expr_multiline THEN stmt_list
  108            | elseif_list ELSEIF expr_singleline THEN stmt_list

  109 if_stmt_single_line: IF expr_singleline THEN single_line_stmt
  110                    | IF expr_singleline THEN single_line_stmt ELSE single_line_stmt

  111 select_stmt: SELECT CASE expr_singleline stmt_ends case_list END SELECT
  112            | SELECT CASE expr_multiline stmt_ends case_list END SELECT

  113 case_list: case_stmt
  114          | case_list case_stmt

  115 case_stmt: CASE expr_multiline stmt_ends stmt_list
  116          | CASE expr_singleline stmt_ends stmt_list
  117          | CASE IS expr_multiline stmt_ends stmt_list
  118          | CASE IS expr_singleline stmt_ends stmt_list
  119          | CASE expr_multiline TO expr_multiline stmt_ends stmt_list
  120          | CASE expr_multiline TO expr_singleline stmt_ends stmt_list
  121          | CASE expr_singleline TO expr_multiline stmt_ends stmt_list
  122          | CASE expr_singleline TO expr_singleline stmt_ends stmt_list
  123          | CASE ELSE stmt_ends stmt_list

  124 expr_singleline: basic_literal_value
  125                | '-' expr_singleline
  126                | '+' expr_singleline
  127                | expr_singleline '+' expr_singleline
  128                | expr_singleline '-' expr_singleline
  129                | expr_singleline '*' expr_singleline
  130                | expr_singleline '/' expr_singleline
  131                | expr_singleline INT_DIV expr_singleline
  132                | expr_singleline '=' expr_singleline
  133                | expr_singleline '<' expr_singleline
  134                | expr_singleline '>' expr_singleline
  135                | expr_singleline '^' expr_singleline
  136                | expr_singleline NOT_EQUAL expr_singleline
  137                | expr_singleline LESS_OR_EQUAL expr_singleline
  138                | expr_singleline MORE_OR_EQUAL expr_singleline
  139                | expr_singleline '&' expr_singleline
  140                | '(' expr_singleline ')'
  141                | IDENTIFIER
  142                | IDENTIFIER arguments_singleline

  143 expr_multiline: expr_singleline '+' END_OF_LINE expr_singleline
  144               | expr_singleline '-' END_OF_LINE expr_singleline
  145               | expr_singleline '*' END_OF_LINE expr_singleline
  146               | expr_singleline '/' END_OF_LINE expr_singleline
  147               | expr_singleline INT_DIV END_OF_LINE expr_singleline
  148               | expr_singleline '=' END_OF_LINE expr_singleline
  149               | expr_singleline '<' END_OF_LINE expr_singleline
  150               | expr_singleline '>' END_OF_LINE expr_singleline
  151               | expr_singleline '^' END_OF_LINE expr_singleline
  152               | expr_singleline NOT_EQUAL END_OF_LINE expr_singleline
  153               | expr_singleline LESS_OR_EQUAL END_OF_LINE expr_singleline
  154               | expr_singleline MORE_OR_EQUAL END_OF_LINE expr_singleline
  155               | expr_singleline '&' END_OF_LINE expr_singleline
  156               | '(' END_OF_LINE expr_singleline ')'
  157               | '(' END_OF_LINE expr_singleline END_OF_LINE ')'
  158               | '(' expr_singleline END_OF_LINE ')'
  159               | IDENTIFIER arguments_multiline

  160 basic_literal: INT
  161              | STRING
  162              | BOOLEAN
  163              | DOUBLE

  164 basic_literal_value: INT_VALUE
  165                    | STRING_VALUE
  166                    | BOOLEAN_VALUE
  167                    | DOUBLE_VALUE

  168 arguments_multiline: '(' END_OF_LINE expr_list ')'
  169                    | '(' END_OF_LINE expr_list END_OF_LINE ')'
  170                    | '(' expr_list END_OF_LINE ')'

  171 arguments_singleline: '(' expr_list ')'
  172                     | '(' ')'

  173 arguments: arguments_multiline
  174          | arguments_singleline

  175 expr_list: expr_singleline
  176          | expr_list ',' expr_singleline


Terminals, with rules where they appear

    $end (0) 0
    '&' (38) 139 155
    '(' (40) 28 29 30 31 48 78 79 80 140 156 157 158 168 169 170 171 172
    ')' (41) 28 29 30 31 48 78 79 80 140 156 157 158 168 169 170 171 172
    '*' (42) 129 145
    '+' (43) 126 127 143
    ',' (44) 42 43 45 46 176
    '-' (45) 125 128 144
    '/' (47) 130 146
    '<' (60) 133 149
    '=' (61) 67 68 69 70 71 72 73 74 76 78 94 95 132 148
    '>' (62) 134 150
    '^' (94) 135 151
    '{' (123) 78
    '}' (125) 78
    error (256)
    INT_VALUE <int_val> (258) 164
    DOUBLE_VALUE <double_val> (259) 167
    STRING_VALUE <str_val> (260) 165
    BOOLEAN_VALUE <bool_val> (261) 166
    IDENTIFIER_VALUE <id_name> (262)
    INT (263) 160
    DOUBLE (264) 163
    STRING (265) 161
    BOOLEAN (266) 162
    IDENTIFIER (267) 7 8 9 10 11 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 47 48 49 79 80 81 94 95 96 141 142 159
    ENDL (268)
    SUB (269) 28 29 30 31
    END (270) 8 9 10 11 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 88 89 97 98 99 100 101 102 103 104 111 112
    CONST (271) 67 68 73
    DIM (272) 69 70 71 72 74 75 76 77 78
    AS (273) 47 48 67 68 69 70 73 74 75 94 95 96
    WHILE (274) 88 89 93
    IF (275) 97 98 99 100 101 102 103 104 109 110
    NEW (276) 78
    ELSEIF (277) 105 106 107 108
    SELECT (278) 111 112
    CASE (279) 111 112 115 116 117 118 119 120 121 122 123
    IS (280) 117 118
    TO (281) 94 95 119 120 121 122
    IMPORTS (282) 7
    MODULE (283) 8 9 10 11
    FUNCTION (284) 16 17 18 19 20 21 22 23 24 25 26 27
    RETURN (285) 17 18 20 21 23 24 26 27
    DO (286) 90 91
    LOOP (287) 90 91
    UNTIL (288) 92
    FOR (289) 94 95 96
    NEXT (290) 94 95 96
    STEP (291) 95
    OF (292)
    IN (293) 96
    EACH (294) 96
    END_OF_LINE (295) 34 35 36 38 39 40 43 46 65 66 67 68 69 70 71 72 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 168 169 170
    UNARY_MINUS (296)
    UNARY_PLUS (297)
    ASSIGN_CONSTRUCT (298)
    ASSIGN_MULT (299)
    ASSIGN_ORD_DIV (300)
    ASSIGN_INT_DIV (301)
    ASSIGN_ADD (302)
    ASSIGN_SUB (303)
    ASSIGN_LSHIFT (304)
    ASSIGN_RSHIFT (305)
    ASSIGN_CONCAT (306)
    PRIVATE (307) 85 87
    PROTECTED (308) 83 86
    PUBLIC (309) 82
    FRIEND (310) 84 86 87
    INT_DIV (311) 131 147
    NOT_EQUAL (312) 136 152
    LESS_OR_EQUAL (313) 137 153
    MORE_OR_EQUAL (314) 138 154
    THEN (315) 97 98 99 100 101 102 103 104 105 106 107 108 109 110
    ELSE (316) 99 100 103 104 110 123


Nonterminals, with rules where they appear

    $accept (76)
        on left: 0
    root (77)
        on left: 1
        on right: 0
    program_items_list (78)
        on left: 2 3
        on right: 1
    program_items_list_not_empty (79)
        on left: 4 5
        on right: 3 5
    program_item (80)
        on left: 6 7
        on right: 4 5
    module (81)
        on left: 8 9 10 11
        on right: 6
    functions_and_sub_list (82)
        on left: 12 13
        on right: 9 11 13
    function_or_sub (83)
        on left: 14 15
        on right: 12 13
    function (84)
        on left: 16 17 18 19 20 21 22 23 24 25 26 27
        on right: 14
    sub_bloc (85)
        on left: 28 29 30 31
        on right: 15
    parameterlist_or_empty (86)
        on left: 32 33 34 35 36 37 38 39 40
        on right: 28 29 30 31
    parameterlist_with_type (87)
        on left: 41 42 43
        on right: 33 34 35 36 42 43
    parameterlist_without_type (88)
        on left: 44 45 46
        on right: 37 38 39 40 45 46
    parameter_with_type (89)
        on left: 47 48
        on right: 41 42 43
    parameter_without_type (90)
        on left: 49
        on right: 44 45 46
    stmt_list (91)
        on left: 50 51
        on right: 19 20 21 25 26 27 29 31 51 88 89 90 91 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 115 116 117 118 119 120 121 122 123
    stmt (92)
        on left: 52 53
        on right: 50 51
    single_line_stmt (93)
        on left: 54 55 56
        on right: 53 109 110
    multi_line_stmt (94)
        on left: 57 58 59 60 61 62 63 64
        on right: 52
    stmt_ends (95)
        on left: 65 66
        on right: 7 8 9 10 11 13 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 53 57 58 62 63 64 66 88 89 90 91 94 95 96 97 98 99 100 101 102 103 104 111 112 115 116 117 118 119 120 121 122 123
    decl_stmt (96)
        on left: 67 68 69 70 71 72
        on right: 57
    decl_stmt_single_line (97)
        on left: 73 74 75 76 77 78
        on right: 55
    var_name (98)
        on left: 79
        on right: 67 69 71
    var_name_singleline (99)
        on left: 80 81
        on right: 68 70 72 73 74 75 76 77 78
    access (100)
        on left: 82 83 84 85 86 87
        on right: 10 11 22 23 24 25 26 27 30 31
    while_stmt (101)
        on left: 88 89
        on right: 58
    do_loop_stmt (102)
        on left: 90 91
        on right: 59
    do_loop_condition (103)
        on left: 92 93
        on right: 90 91
    for_loop_stmt (104)
        on left: 94 95
        on right: 60
    for_each_loop_stmt (105)
        on left: 96
        on right: 61
    if_stmt_multi_line (106)
        on left: 97 98 99 100 101 102 103 104
        on right: 63
    elseif_list (107)
        on left: 105 106 107 108
        on right: 101 102 103 104 107 108
    if_stmt_single_line (108)
        on left: 109 110
        on right: 54
    select_stmt (109)
        on left: 111 112
        on right: 62
    case_list (110)
        on left: 113 114
        on right: 111 112 114
    case_stmt (111)
        on left: 115 116 117 118 119 120 121 122 123
        on right: 113 114
    expr_singleline (112)
        on left: 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142
        on right: 17 20 23 26 56 73 74 76 80 89 92 93 98 100 102 104 106 108 109 110 111 116 118 120 121 122 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 175 176
    expr_multiline (113)
        on left: 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159
        on right: 18 21 24 27 64 67 68 69 70 71 72 79 88 97 99 101 103 105 107 112 115 117 119 120 121
    basic_literal (114)
        on left: 160 161 162 163
        on right: 47 48 67 68 69 70 73 74 75 78 94 95 96
    basic_literal_value (115)
        on left: 164 165 166 167
        on right: 94 95 124
    arguments_multiline (116)
        on left: 168 169 170
        on right: 159 173
    arguments_singleline (117)
        on left: 171 172
        on right: 142 174
    arguments (118)
        on left: 173 174
        on right: 16 17 18 19 20 21 22 23 24 25 26 27
    expr_list (119)
        on left: 175 176
        on right: 78 168 169 170 171 176


State 0

    0 $accept: . root $end

    IMPORTS    shift, and go to state 1
    MODULE     shift, and go to state 2
    PRIVATE    shift, and go to state 3
    PROTECTED  shift, and go to state 4
    PUBLIC     shift, and go to state 5
    FRIEND     shift, and go to state 6

    $default  reduce using rule 2 (program_items_list)

    root                          go to state 7
    program_items_list            go to state 8
    program_items_list_not_empty  go to state 9
    program_item                  go to state 10
    module                        go to state 11
    access                        go to state 12


State 1

    7 program_item: IMPORTS . IDENTIFIER stmt_ends

    IDENTIFIER  shift, and go to state 13


State 2

    8 module: MODULE . IDENTIFIER stmt_ends END MODULE
    9       | MODULE . IDENTIFIER stmt_ends functions_and_sub_list END MODULE

    IDENTIFIER  shift, and go to state 14


State 3

   85 access: PRIVATE .
   87       | PRIVATE . FRIEND

    FRIEND  shift, and go to state 15

    $default  reduce using rule 85 (access)


State 4

   83 access: PROTECTED .
   86       | PROTECTED . FRIEND

    FRIEND  shift, and go to state 16

    $default  reduce using rule 83 (access)


State 5

   82 access: PUBLIC .

    $default  reduce using rule 82 (access)


State 6

   84 access: FRIEND .

    $default  reduce using rule 84 (access)


State 7

    0 $accept: root . $end

    $end  shift, and go to state 17


State 8

    1 root: program_items_list .

    $default  reduce using rule 1 (root)


State 9

    3 program_items_list: program_items_list_not_empty .
    5 program_items_list_not_empty: program_items_list_not_empty . program_item

    IMPORTS    shift, and go to state 1
    MODULE     shift, and go to state 2
    PRIVATE    shift, and go to state 3
    PROTECTED  shift, and go to state 4
    PUBLIC     shift, and go to state 5
    FRIEND     shift, and go to state 6

    $default  reduce using rule 3 (program_items_list)

    program_item  go to state 18
    module        go to state 11
    access        go to state 12


State 10

    4 program_items_list_not_empty: program_item .

    $default  reduce using rule 4 (program_items_list_not_empty)


State 11

    6 program_item: module .

    $default  reduce using rule 6 (program_item)


State 12

   10 module: access . MODULE IDENTIFIER stmt_ends END MODULE
   11       | access . MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE

    MODULE  shift, and go to state 19


State 13

    7 program_item: IMPORTS IDENTIFIER . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 21


State 14

    8 module: MODULE IDENTIFIER . stmt_ends END MODULE
    9       | MODULE IDENTIFIER . stmt_ends functions_and_sub_list END MODULE

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 22


State 15

   87 access: PRIVATE FRIEND .

    $default  reduce using rule 87 (access)


State 16

   86 access: PROTECTED FRIEND .

    $default  reduce using rule 86 (access)


State 17

    0 $accept: root $end .

    $default  accept


State 18

    5 program_items_list_not_empty: program_items_list_not_empty program_item .

    $default  reduce using rule 5 (program_items_list_not_empty)


State 19

   10 module: access MODULE . IDENTIFIER stmt_ends END MODULE
   11       | access MODULE . IDENTIFIER stmt_ends functions_and_sub_list END MODULE

    IDENTIFIER  shift, and go to state 23


State 20

   65 stmt_ends: END_OF_LINE .

    $default  reduce using rule 65 (stmt_ends)


State 21

    7 program_item: IMPORTS IDENTIFIER stmt_ends .
   66 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 7 (program_item)


State 22

    8 module: MODULE IDENTIFIER stmt_ends . END MODULE
    9       | MODULE IDENTIFIER stmt_ends . functions_and_sub_list END MODULE
   66 stmt_ends: stmt_ends . END_OF_LINE

    SUB          shift, and go to state 25
    END          shift, and go to state 26
    FUNCTION     shift, and go to state 27
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    functions_and_sub_list  go to state 28
    function_or_sub         go to state 29
    function                go to state 30
    sub_bloc                go to state 31
    access                  go to state 32


State 23

   10 module: access MODULE IDENTIFIER . stmt_ends END MODULE
   11       | access MODULE IDENTIFIER . stmt_ends functions_and_sub_list END MODULE

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 33


State 24

   66 stmt_ends: stmt_ends END_OF_LINE .

    $default  reduce using rule 66 (stmt_ends)


State 25

   28 sub_bloc: SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   29         | SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER  shift, and go to state 34


State 26

    8 module: MODULE IDENTIFIER stmt_ends END . MODULE

    MODULE  shift, and go to state 35


State 27

   16 function: FUNCTION . IDENTIFIER arguments stmt_ends END FUNCTION
   17         | FUNCTION . IDENTIFIER arguments stmt_ends RETURN expr_singleline stmt_ends END FUNCTION
   18         | FUNCTION . IDENTIFIER arguments stmt_ends RETURN expr_multiline stmt_ends END FUNCTION
   19         | FUNCTION . IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   20         | FUNCTION . IDENTIFIER arguments stmt_ends stmt_list RETURN expr_singleline stmt_ends END FUNCTION
   21         | FUNCTION . IDENTIFIER arguments stmt_ends stmt_list RETURN expr_multiline stmt_ends END FUNCTION

    IDENTIFIER  shift, and go to state 36


State 28

    9 module: MODULE IDENTIFIER stmt_ends functions_and_sub_list . END MODULE
   13 functions_and_sub_list: functions_and_sub_list . stmt_ends function_or_sub

    END          shift, and go to state 37
    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 38


State 29

   12 functions_and_sub_list: function_or_sub .

    $default  reduce using rule 12 (functions_and_sub_list)


State 30

   14 function_or_sub: function .

    $default  reduce using rule 14 (function_or_sub)


State 31

   15 function_or_sub: sub_bloc .

    $default  reduce using rule 15 (function_or_sub)


State 32

   22 function: access . FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION
   23         | access . FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_singleline stmt_ends END FUNCTION
   24         | access . FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_multiline stmt_ends END FUNCTION
   25         | access . FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   26         | access . FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_singleline stmt_ends END FUNCTION
   27         | access . FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_multiline stmt_ends END FUNCTION
   30 sub_bloc: access . SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   31         | access . SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    SUB       shift, and go to state 39
    FUNCTION  shift, and go to state 40


State 33

   10 module: access MODULE IDENTIFIER stmt_ends . END MODULE
   11       | access MODULE IDENTIFIER stmt_ends . functions_and_sub_list END MODULE
   66 stmt_ends: stmt_ends . END_OF_LINE

    SUB          shift, and go to state 25
    END          shift, and go to state 41
    FUNCTION     shift, and go to state 27
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    functions_and_sub_list  go to state 42
    function_or_sub         go to state 29
    function                go to state 30
    sub_bloc                go to state 31
    access                  go to state 32


State 34

   28 sub_bloc: SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends END SUB
   29         | SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    '('  shift, and go to state 43


State 35

    8 module: MODULE IDENTIFIER stmt_ends END MODULE .

    $default  reduce using rule 8 (module)


State 36

   16 function: FUNCTION IDENTIFIER . arguments stmt_ends END FUNCTION
   17         | FUNCTION IDENTIFIER . arguments stmt_ends RETURN expr_singleline stmt_ends END FUNCTION
   18         | FUNCTION IDENTIFIER . arguments stmt_ends RETURN expr_multiline stmt_ends END FUNCTION
   19         | FUNCTION IDENTIFIER . arguments stmt_ends stmt_list END FUNCTION
   20         | FUNCTION IDENTIFIER . arguments stmt_ends stmt_list RETURN expr_singleline stmt_ends END FUNCTION
   21         | FUNCTION IDENTIFIER . arguments stmt_ends stmt_list RETURN expr_multiline stmt_ends END FUNCTION

    '('  shift, and go to state 44

    arguments_multiline   go to state 45
    arguments_singleline  go to state 46
    arguments             go to state 47


State 37

    9 module: MODULE IDENTIFIER stmt_ends functions_and_sub_list END . MODULE

    MODULE  shift, and go to state 48


State 38

   13 functions_and_sub_list: functions_and_sub_list stmt_ends . function_or_sub
   66 stmt_ends: stmt_ends . END_OF_LINE

    SUB          shift, and go to state 25
    FUNCTION     shift, and go to state 27
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    function_or_sub  go to state 49
    function         go to state 30
    sub_bloc         go to state 31
    access           go to state 32


State 39

   30 sub_bloc: access SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   31         | access SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER  shift, and go to state 50


State 40

   22 function: access FUNCTION . IDENTIFIER arguments stmt_ends END FUNCTION
   23         | access FUNCTION . IDENTIFIER arguments stmt_ends RETURN expr_singleline stmt_ends END FUNCTION
   24         | access FUNCTION . IDENTIFIER arguments stmt_ends RETURN expr_multiline stmt_ends END FUNCTION
   25         | access FUNCTION . IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   26         | access FUNCTION . IDENTIFIER arguments stmt_ends stmt_list RETURN expr_singleline stmt_ends END FUNCTION
   27         | access FUNCTION . IDENTIFIER arguments stmt_ends stmt_list RETURN expr_multiline stmt_ends END FUNCTION

    IDENTIFIER  shift, and go to state 51


State 41

   10 module: access MODULE IDENTIFIER stmt_ends END . MODULE

    MODULE  shift, and go to state 52


State 42

   11 module: access MODULE IDENTIFIER stmt_ends functions_and_sub_list . END MODULE
   13 functions_and_sub_list: functions_and_sub_list . stmt_ends function_or_sub

    END          shift, and go to state 53
    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 38


State 43

   28 sub_bloc: SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends END SUB
   29         | SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER   shift, and go to state 54
    END_OF_LINE  shift, and go to state 55

    $default  reduce using rule 32 (parameterlist_or_empty)

    parameterlist_or_empty      go to state 56
    parameterlist_with_type     go to state 57
    parameterlist_without_type  go to state 58
    parameter_with_type         go to state 59
    parameter_without_type      go to state 60


State 44

  168 arguments_multiline: '(' . END_OF_LINE expr_list ')'
  169                    | '(' . END_OF_LINE expr_list END_OF_LINE ')'
  170                    | '(' . expr_list END_OF_LINE ')'
  171 arguments_singleline: '(' . expr_list ')'
  172                     | '(' . ')'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 66
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69
    ')'            shift, and go to state 70

    expr_singleline      go to state 71
    basic_literal_value  go to state 72
    expr_list            go to state 73


State 45

  173 arguments: arguments_multiline .

    $default  reduce using rule 173 (arguments)


State 46

  174 arguments: arguments_singleline .

    $default  reduce using rule 174 (arguments)


State 47

   16 function: FUNCTION IDENTIFIER arguments . stmt_ends END FUNCTION
   17         | FUNCTION IDENTIFIER arguments . stmt_ends RETURN expr_singleline stmt_ends END FUNCTION
   18         | FUNCTION IDENTIFIER arguments . stmt_ends RETURN expr_multiline stmt_ends END FUNCTION
   19         | FUNCTION IDENTIFIER arguments . stmt_ends stmt_list END FUNCTION
   20         | FUNCTION IDENTIFIER arguments . stmt_ends stmt_list RETURN expr_singleline stmt_ends END FUNCTION
   21         | FUNCTION IDENTIFIER arguments . stmt_ends stmt_list RETURN expr_multiline stmt_ends END FUNCTION

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 74


State 48

    9 module: MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE .

    $default  reduce using rule 9 (module)


State 49

   13 functions_and_sub_list: functions_and_sub_list stmt_ends function_or_sub .

    $default  reduce using rule 13 (functions_and_sub_list)


State 50

   30 sub_bloc: access SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends END SUB
   31         | access SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    '('  shift, and go to state 75


State 51

   22 function: access FUNCTION IDENTIFIER . arguments stmt_ends END FUNCTION
   23         | access FUNCTION IDENTIFIER . arguments stmt_ends RETURN expr_singleline stmt_ends END FUNCTION
   24         | access FUNCTION IDENTIFIER . arguments stmt_ends RETURN expr_multiline stmt_ends END FUNCTION
   25         | access FUNCTION IDENTIFIER . arguments stmt_ends stmt_list END FUNCTION
   26         | access FUNCTION IDENTIFIER . arguments stmt_ends stmt_list RETURN expr_singleline stmt_ends END FUNCTION
   27         | access FUNCTION IDENTIFIER . arguments stmt_ends stmt_list RETURN expr_multiline stmt_ends END FUNCTION

    '('  shift, and go to state 44

    arguments_multiline   go to state 45
    arguments_singleline  go to state 46
    arguments             go to state 76


State 52

   10 module: access MODULE IDENTIFIER stmt_ends END MODULE .

    $default  reduce using rule 10 (module)


State 53

   11 module: access MODULE IDENTIFIER stmt_ends functions_and_sub_list END . MODULE

    MODULE  shift, and go to state 77


State 54

   47 parameter_with_type: IDENTIFIER . AS basic_literal
   48                    | IDENTIFIER . AS basic_literal '(' ')'
   49 parameter_without_type: IDENTIFIER .

    AS  shift, and go to state 78

    $default  reduce using rule 49 (parameter_without_type)


State 55

   34 parameterlist_or_empty: END_OF_LINE . parameterlist_with_type END_OF_LINE
   35                       | END_OF_LINE . parameterlist_with_type
   38                       | END_OF_LINE . parameterlist_without_type END_OF_LINE
   40                       | END_OF_LINE . parameterlist_without_type

    IDENTIFIER  shift, and go to state 54

    parameterlist_with_type     go to state 79
    parameterlist_without_type  go to state 80
    parameter_with_type         go to state 59
    parameter_without_type      go to state 60


State 56

   28 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends END SUB
   29         | SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends stmt_list END SUB

    ')'  shift, and go to state 81


State 57

   33 parameterlist_or_empty: parameterlist_with_type .
   36                       | parameterlist_with_type . END_OF_LINE
   42 parameterlist_with_type: parameterlist_with_type . ',' parameter_with_type
   43                        | parameterlist_with_type . ',' END_OF_LINE parameter_with_type

    END_OF_LINE  shift, and go to state 82
    ','          shift, and go to state 83

    $default  reduce using rule 33 (parameterlist_or_empty)


State 58

   37 parameterlist_or_empty: parameterlist_without_type .
   39                       | parameterlist_without_type . END_OF_LINE
   45 parameterlist_without_type: parameterlist_without_type . ',' parameter_without_type
   46                           | parameterlist_without_type . ',' END_OF_LINE parameter_without_type

    END_OF_LINE  shift, and go to state 84
    ','          shift, and go to state 85

    $default  reduce using rule 37 (parameterlist_or_empty)


State 59

   41 parameterlist_with_type: parameter_with_type .

    $default  reduce using rule 41 (parameterlist_with_type)


State 60

   44 parameterlist_without_type: parameter_without_type .

    $default  reduce using rule 44 (parameterlist_without_type)


State 61

  164 basic_literal_value: INT_VALUE .

    $default  reduce using rule 164 (basic_literal_value)


State 62

  167 basic_literal_value: DOUBLE_VALUE .

    $default  reduce using rule 167 (basic_literal_value)


State 63

  165 basic_literal_value: STRING_VALUE .

    $default  reduce using rule 165 (basic_literal_value)


State 64

  166 basic_literal_value: BOOLEAN_VALUE .

    $default  reduce using rule 166 (basic_literal_value)


State 65

  141 expr_singleline: IDENTIFIER .
  142                | IDENTIFIER . arguments_singleline

    $default  reduce using rule 141 (expr_singleline)

    arguments_singleline  go to state 86


State 66

  168 arguments_multiline: '(' END_OF_LINE . expr_list ')'
  169                    | '(' END_OF_LINE . expr_list END_OF_LINE ')'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 71
    basic_literal_value  go to state 72
    expr_list            go to state 87


State 67

  126 expr_singleline: '+' . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 88
    basic_literal_value  go to state 72


State 68

  125 expr_singleline: '-' . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 89
    basic_literal_value  go to state 72


State 69

  140 expr_singleline: '(' . expr_singleline ')'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 90
    basic_literal_value  go to state 72


State 70

  172 arguments_singleline: '(' ')' .

    $default  reduce using rule 172 (arguments_singleline)


State 71

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  175 expr_list: expr_singleline .

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 175 (expr_list)


State 72

  124 expr_singleline: basic_literal_value .

    $default  reduce using rule 124 (expr_singleline)


State 73

  170 arguments_multiline: '(' expr_list . END_OF_LINE ')'
  171 arguments_singleline: '(' expr_list . ')'
  176 expr_list: expr_list . ',' expr_singleline

    END_OF_LINE  shift, and go to state 104
    ')'          shift, and go to state 105
    ','          shift, and go to state 106


State 74

   16 function: FUNCTION IDENTIFIER arguments stmt_ends . END FUNCTION
   17         | FUNCTION IDENTIFIER arguments stmt_ends . RETURN expr_singleline stmt_ends END FUNCTION
   18         | FUNCTION IDENTIFIER arguments stmt_ends . RETURN expr_multiline stmt_ends END FUNCTION
   19         | FUNCTION IDENTIFIER arguments stmt_ends . stmt_list END FUNCTION
   20         | FUNCTION IDENTIFIER arguments stmt_ends . stmt_list RETURN expr_singleline stmt_ends END FUNCTION
   21         | FUNCTION IDENTIFIER arguments stmt_ends . stmt_list RETURN expr_multiline stmt_ends END FUNCTION
   66 stmt_ends: stmt_ends . END_OF_LINE

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    END            shift, and go to state 108
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    RETURN         shift, and go to state 114
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 118
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 75

   30 sub_bloc: access SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends END SUB
   31         | access SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER   shift, and go to state 54
    END_OF_LINE  shift, and go to state 55

    $default  reduce using rule 32 (parameterlist_or_empty)

    parameterlist_or_empty      go to state 133
    parameterlist_with_type     go to state 57
    parameterlist_without_type  go to state 58
    parameter_with_type         go to state 59
    parameter_without_type      go to state 60


State 76

   22 function: access FUNCTION IDENTIFIER arguments . stmt_ends END FUNCTION
   23         | access FUNCTION IDENTIFIER arguments . stmt_ends RETURN expr_singleline stmt_ends END FUNCTION
   24         | access FUNCTION IDENTIFIER arguments . stmt_ends RETURN expr_multiline stmt_ends END FUNCTION
   25         | access FUNCTION IDENTIFIER arguments . stmt_ends stmt_list END FUNCTION
   26         | access FUNCTION IDENTIFIER arguments . stmt_ends stmt_list RETURN expr_singleline stmt_ends END FUNCTION
   27         | access FUNCTION IDENTIFIER arguments . stmt_ends stmt_list RETURN expr_multiline stmt_ends END FUNCTION

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 134


State 77

   11 module: access MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE .

    $default  reduce using rule 11 (module)


State 78

   47 parameter_with_type: IDENTIFIER AS . basic_literal
   48                    | IDENTIFIER AS . basic_literal '(' ')'

    INT      shift, and go to state 135
    DOUBLE   shift, and go to state 136
    STRING   shift, and go to state 137
    BOOLEAN  shift, and go to state 138

    basic_literal  go to state 139


State 79

   34 parameterlist_or_empty: END_OF_LINE parameterlist_with_type . END_OF_LINE
   35                       | END_OF_LINE parameterlist_with_type .
   42 parameterlist_with_type: parameterlist_with_type . ',' parameter_with_type
   43                        | parameterlist_with_type . ',' END_OF_LINE parameter_with_type

    END_OF_LINE  shift, and go to state 140
    ','          shift, and go to state 83

    $default  reduce using rule 35 (parameterlist_or_empty)


State 80

   38 parameterlist_or_empty: END_OF_LINE parameterlist_without_type . END_OF_LINE
   40                       | END_OF_LINE parameterlist_without_type .
   45 parameterlist_without_type: parameterlist_without_type . ',' parameter_without_type
   46                           | parameterlist_without_type . ',' END_OF_LINE parameter_without_type

    END_OF_LINE  shift, and go to state 141
    ','          shift, and go to state 85

    $default  reduce using rule 40 (parameterlist_or_empty)


State 81

   28 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends END SUB
   29         | SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends stmt_list END SUB

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 142


State 82

   36 parameterlist_or_empty: parameterlist_with_type END_OF_LINE .

    $default  reduce using rule 36 (parameterlist_or_empty)


State 83

   42 parameterlist_with_type: parameterlist_with_type ',' . parameter_with_type
   43                        | parameterlist_with_type ',' . END_OF_LINE parameter_with_type

    IDENTIFIER   shift, and go to state 143
    END_OF_LINE  shift, and go to state 144

    parameter_with_type  go to state 145


State 84

   39 parameterlist_or_empty: parameterlist_without_type END_OF_LINE .

    $default  reduce using rule 39 (parameterlist_or_empty)


State 85

   45 parameterlist_without_type: parameterlist_without_type ',' . parameter_without_type
   46                           | parameterlist_without_type ',' . END_OF_LINE parameter_without_type

    IDENTIFIER   shift, and go to state 146
    END_OF_LINE  shift, and go to state 147

    parameter_without_type  go to state 148


State 86

  142 expr_singleline: IDENTIFIER arguments_singleline .

    $default  reduce using rule 142 (expr_singleline)


State 87

  168 arguments_multiline: '(' END_OF_LINE expr_list . ')'
  169                    | '(' END_OF_LINE expr_list . END_OF_LINE ')'
  176 expr_list: expr_list . ',' expr_singleline

    END_OF_LINE  shift, and go to state 149
    ')'          shift, and go to state 150
    ','          shift, and go to state 106


State 88

  126 expr_singleline: '+' expr_singleline .
  127                | expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 126 (expr_singleline)


State 89

  125 expr_singleline: '-' expr_singleline .
  127                | expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 125 (expr_singleline)


State 90

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  140                | '(' expr_singleline . ')'

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103
    ')'            shift, and go to state 151


State 91

  135 expr_singleline: expr_singleline '^' . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 152
    basic_literal_value  go to state 72


State 92

  129 expr_singleline: expr_singleline '*' . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 153
    basic_literal_value  go to state 72


State 93

  130 expr_singleline: expr_singleline '/' . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 154
    basic_literal_value  go to state 72


State 94

  131 expr_singleline: expr_singleline INT_DIV . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 155
    basic_literal_value  go to state 72


State 95

  127 expr_singleline: expr_singleline '+' . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 156
    basic_literal_value  go to state 72


State 96

  128 expr_singleline: expr_singleline '-' . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 157
    basic_literal_value  go to state 72


State 97

  132 expr_singleline: expr_singleline '=' . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 158
    basic_literal_value  go to state 72


State 98

  136 expr_singleline: expr_singleline NOT_EQUAL . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 159
    basic_literal_value  go to state 72


State 99

  137 expr_singleline: expr_singleline LESS_OR_EQUAL . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 160
    basic_literal_value  go to state 72


State 100

  138 expr_singleline: expr_singleline MORE_OR_EQUAL . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 161
    basic_literal_value  go to state 72


State 101

  134 expr_singleline: expr_singleline '>' . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 162
    basic_literal_value  go to state 72


State 102

  133 expr_singleline: expr_singleline '<' . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 163
    basic_literal_value  go to state 72


State 103

  139 expr_singleline: expr_singleline '&' . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 164
    basic_literal_value  go to state 72


State 104

  170 arguments_multiline: '(' expr_list END_OF_LINE . ')'

    ')'  shift, and go to state 165


State 105

  171 arguments_singleline: '(' expr_list ')' .

    $default  reduce using rule 171 (arguments_singleline)


State 106

  176 expr_list: expr_list ',' . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 166
    basic_literal_value  go to state 72


State 107

  141 expr_singleline: IDENTIFIER .
  142                | IDENTIFIER . arguments_singleline
  159 expr_multiline: IDENTIFIER . arguments_multiline

    '('  shift, and go to state 44

    $default  reduce using rule 141 (expr_singleline)

    arguments_multiline   go to state 167
    arguments_singleline  go to state 86


State 108

   16 function: FUNCTION IDENTIFIER arguments stmt_ends END . FUNCTION

    FUNCTION  shift, and go to state 168


State 109

   67 decl_stmt: CONST . var_name AS basic_literal '=' END_OF_LINE expr_multiline
   68          | CONST . var_name_singleline AS basic_literal '=' END_OF_LINE expr_multiline
   73 decl_stmt_single_line: CONST . var_name_singleline AS basic_literal '=' expr_singleline

    IDENTIFIER  shift, and go to state 169

    var_name             go to state 170
    var_name_singleline  go to state 171


State 110

   69 decl_stmt: DIM . var_name AS basic_literal '=' END_OF_LINE expr_multiline
   70          | DIM . var_name_singleline AS basic_literal '=' END_OF_LINE expr_multiline
   71          | DIM . var_name '=' END_OF_LINE expr_multiline
   72          | DIM . var_name_singleline '=' END_OF_LINE expr_multiline
   74 decl_stmt_single_line: DIM . var_name_singleline AS basic_literal '=' expr_singleline
   75                      | DIM . var_name_singleline AS basic_literal
   76                      | DIM . var_name_singleline '=' expr_singleline
   77                      | DIM . var_name_singleline
   78                      | DIM . var_name_singleline '=' NEW basic_literal '(' ')' '{' expr_list '}'

    IDENTIFIER  shift, and go to state 169

    var_name             go to state 172
    var_name_singleline  go to state 173


State 111

   88 while_stmt: WHILE . expr_multiline stmt_ends stmt_list END WHILE
   89           | WHILE . expr_singleline stmt_ends stmt_list END WHILE

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 174
    expr_multiline       go to state 175
    basic_literal_value  go to state 72


State 112

   97 if_stmt_multi_line: IF . expr_multiline THEN stmt_ends stmt_list END IF
   98                   | IF . expr_singleline THEN stmt_ends stmt_list END IF
   99                   | IF . expr_multiline THEN stmt_ends stmt_list ELSE stmt_list END IF
  100                   | IF . expr_singleline THEN stmt_ends stmt_list ELSE stmt_list END IF
  101                   | IF . expr_multiline THEN stmt_ends stmt_list elseif_list END IF
  102                   | IF . expr_singleline THEN stmt_ends stmt_list elseif_list END IF
  103                   | IF . expr_multiline THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF
  104                   | IF . expr_singleline THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF
  109 if_stmt_single_line: IF . expr_singleline THEN single_line_stmt
  110                    | IF . expr_singleline THEN single_line_stmt ELSE single_line_stmt

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 176
    expr_multiline       go to state 177
    basic_literal_value  go to state 72


State 113

  111 select_stmt: SELECT . CASE expr_singleline stmt_ends case_list END SELECT
  112            | SELECT . CASE expr_multiline stmt_ends case_list END SELECT

    CASE  shift, and go to state 178


State 114

   17 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN . expr_singleline stmt_ends END FUNCTION
   18         | FUNCTION IDENTIFIER arguments stmt_ends RETURN . expr_multiline stmt_ends END FUNCTION

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 179
    expr_multiline       go to state 180
    basic_literal_value  go to state 72


State 115

   90 do_loop_stmt: DO . do_loop_condition stmt_ends stmt_list LOOP
   91             | DO . stmt_ends stmt_list LOOP do_loop_condition

    WHILE        shift, and go to state 181
    UNTIL        shift, and go to state 182
    END_OF_LINE  shift, and go to state 20

    stmt_ends          go to state 183
    do_loop_condition  go to state 184


State 116

   94 for_loop_stmt: FOR . IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value stmt_ends stmt_list NEXT
   95              | FOR . IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT
   96 for_each_loop_stmt: FOR . EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

    IDENTIFIER  shift, and go to state 185
    EACH        shift, and go to state 186


State 117

  140 expr_singleline: '(' . expr_singleline ')'
  156 expr_multiline: '(' . END_OF_LINE expr_singleline ')'
  157               | '(' . END_OF_LINE expr_singleline END_OF_LINE ')'
  158               | '(' . expr_singleline END_OF_LINE ')'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 187
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 188
    basic_literal_value  go to state 72


State 118

   19 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list . END FUNCTION
   20         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list . RETURN expr_singleline stmt_ends END FUNCTION
   21         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list . RETURN expr_multiline stmt_ends END FUNCTION
   51 stmt_list: stmt_list . stmt

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    END            shift, and go to state 189
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    RETURN         shift, and go to state 190
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 119

   50 stmt_list: stmt .

    $default  reduce using rule 50 (stmt_list)


State 120

   53 stmt: single_line_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 192


State 121

   52 stmt: multi_line_stmt .

    $default  reduce using rule 52 (stmt)


State 122

   57 multi_line_stmt: decl_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 193


State 123

   55 single_line_stmt: decl_stmt_single_line .

    $default  reduce using rule 55 (single_line_stmt)


State 124

   58 multi_line_stmt: while_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 194


State 125

   59 multi_line_stmt: do_loop_stmt .

    $default  reduce using rule 59 (multi_line_stmt)


State 126

   60 multi_line_stmt: for_loop_stmt .

    $default  reduce using rule 60 (multi_line_stmt)


State 127

   61 multi_line_stmt: for_each_loop_stmt .

    $default  reduce using rule 61 (multi_line_stmt)


State 128

   63 multi_line_stmt: if_stmt_multi_line . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 195


State 129

   54 single_line_stmt: if_stmt_single_line .

    $default  reduce using rule 54 (single_line_stmt)


State 130

   62 multi_line_stmt: select_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 196


State 131

   56 single_line_stmt: expr_singleline .
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  143 expr_multiline: expr_singleline . '+' END_OF_LINE expr_singleline
  144               | expr_singleline . '-' END_OF_LINE expr_singleline
  145               | expr_singleline . '*' END_OF_LINE expr_singleline
  146               | expr_singleline . '/' END_OF_LINE expr_singleline
  147               | expr_singleline . INT_DIV END_OF_LINE expr_singleline
  148               | expr_singleline . '=' END_OF_LINE expr_singleline
  149               | expr_singleline . '<' END_OF_LINE expr_singleline
  150               | expr_singleline . '>' END_OF_LINE expr_singleline
  151               | expr_singleline . '^' END_OF_LINE expr_singleline
  152               | expr_singleline . NOT_EQUAL END_OF_LINE expr_singleline
  153               | expr_singleline . LESS_OR_EQUAL END_OF_LINE expr_singleline
  154               | expr_singleline . MORE_OR_EQUAL END_OF_LINE expr_singleline
  155               | expr_singleline . '&' END_OF_LINE expr_singleline

    '^'            shift, and go to state 197
    '*'            shift, and go to state 198
    '/'            shift, and go to state 199
    INT_DIV        shift, and go to state 200
    '+'            shift, and go to state 201
    '-'            shift, and go to state 202
    '='            shift, and go to state 203
    NOT_EQUAL      shift, and go to state 204
    LESS_OR_EQUAL  shift, and go to state 205
    MORE_OR_EQUAL  shift, and go to state 206
    '>'            shift, and go to state 207
    '<'            shift, and go to state 208
    '&'            shift, and go to state 209

    $default  reduce using rule 56 (single_line_stmt)


State 132

   64 multi_line_stmt: expr_multiline . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 210


State 133

   30 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends END SUB
   31         | access SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends stmt_list END SUB

    ')'  shift, and go to state 211


State 134

   22 function: access FUNCTION IDENTIFIER arguments stmt_ends . END FUNCTION
   23         | access FUNCTION IDENTIFIER arguments stmt_ends . RETURN expr_singleline stmt_ends END FUNCTION
   24         | access FUNCTION IDENTIFIER arguments stmt_ends . RETURN expr_multiline stmt_ends END FUNCTION
   25         | access FUNCTION IDENTIFIER arguments stmt_ends . stmt_list END FUNCTION
   26         | access FUNCTION IDENTIFIER arguments stmt_ends . stmt_list RETURN expr_singleline stmt_ends END FUNCTION
   27         | access FUNCTION IDENTIFIER arguments stmt_ends . stmt_list RETURN expr_multiline stmt_ends END FUNCTION
   66 stmt_ends: stmt_ends . END_OF_LINE

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    END            shift, and go to state 212
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    RETURN         shift, and go to state 213
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 214
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 135

  160 basic_literal: INT .

    $default  reduce using rule 160 (basic_literal)


State 136

  163 basic_literal: DOUBLE .

    $default  reduce using rule 163 (basic_literal)


State 137

  161 basic_literal: STRING .

    $default  reduce using rule 161 (basic_literal)


State 138

  162 basic_literal: BOOLEAN .

    $default  reduce using rule 162 (basic_literal)


State 139

   47 parameter_with_type: IDENTIFIER AS basic_literal .
   48                    | IDENTIFIER AS basic_literal . '(' ')'

    '('  shift, and go to state 215

    $default  reduce using rule 47 (parameter_with_type)


State 140

   34 parameterlist_or_empty: END_OF_LINE parameterlist_with_type END_OF_LINE .

    $default  reduce using rule 34 (parameterlist_or_empty)


State 141

   38 parameterlist_or_empty: END_OF_LINE parameterlist_without_type END_OF_LINE .

    $default  reduce using rule 38 (parameterlist_or_empty)


State 142

   28 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . END SUB
   29         | SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . stmt_list END SUB
   66 stmt_ends: stmt_ends . END_OF_LINE

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    END            shift, and go to state 216
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 217
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 143

   47 parameter_with_type: IDENTIFIER . AS basic_literal
   48                    | IDENTIFIER . AS basic_literal '(' ')'

    AS  shift, and go to state 78


State 144

   43 parameterlist_with_type: parameterlist_with_type ',' END_OF_LINE . parameter_with_type

    IDENTIFIER  shift, and go to state 143

    parameter_with_type  go to state 218


State 145

   42 parameterlist_with_type: parameterlist_with_type ',' parameter_with_type .

    $default  reduce using rule 42 (parameterlist_with_type)


State 146

   49 parameter_without_type: IDENTIFIER .

    $default  reduce using rule 49 (parameter_without_type)


State 147

   46 parameterlist_without_type: parameterlist_without_type ',' END_OF_LINE . parameter_without_type

    IDENTIFIER  shift, and go to state 146

    parameter_without_type  go to state 219


State 148

   45 parameterlist_without_type: parameterlist_without_type ',' parameter_without_type .

    $default  reduce using rule 45 (parameterlist_without_type)


State 149

  169 arguments_multiline: '(' END_OF_LINE expr_list END_OF_LINE . ')'

    ')'  shift, and go to state 220


State 150

  168 arguments_multiline: '(' END_OF_LINE expr_list ')' .

    $default  reduce using rule 168 (arguments_multiline)


State 151

  140 expr_singleline: '(' expr_singleline ')' .

    $default  reduce using rule 140 (expr_singleline)


State 152

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  135                | expr_singleline '^' expr_singleline .
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 135 (expr_singleline)


State 153

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  129                | expr_singleline '*' expr_singleline .
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 129 (expr_singleline)


State 154

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  130                | expr_singleline '/' expr_singleline .
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 130 (expr_singleline)


State 155

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  131                | expr_singleline INT_DIV expr_singleline .
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 131 (expr_singleline)


State 156

  127 expr_singleline: expr_singleline . '+' expr_singleline
  127                | expr_singleline '+' expr_singleline .
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 127 (expr_singleline)


State 157

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  128                | expr_singleline '-' expr_singleline .
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 128 (expr_singleline)


State 158

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  132                | expr_singleline '=' expr_singleline .
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '&'  shift, and go to state 103

    $default  reduce using rule 132 (expr_singleline)


State 159

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  136                | expr_singleline NOT_EQUAL expr_singleline .
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '&'  shift, and go to state 103

    $default  reduce using rule 136 (expr_singleline)


State 160

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  137                | expr_singleline LESS_OR_EQUAL expr_singleline .
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '&'  shift, and go to state 103

    $default  reduce using rule 137 (expr_singleline)


State 161

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  138                | expr_singleline MORE_OR_EQUAL expr_singleline .
  139                | expr_singleline . '&' expr_singleline

    '&'  shift, and go to state 103

    $default  reduce using rule 138 (expr_singleline)


State 162

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  134                | expr_singleline '>' expr_singleline .
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '&'  shift, and go to state 103

    $default  reduce using rule 134 (expr_singleline)


State 163

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  133                | expr_singleline '<' expr_singleline .
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '&'  shift, and go to state 103

    $default  reduce using rule 133 (expr_singleline)


State 164

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  139                | expr_singleline '&' expr_singleline .

    $default  reduce using rule 139 (expr_singleline)


State 165

  170 arguments_multiline: '(' expr_list END_OF_LINE ')' .

    $default  reduce using rule 170 (arguments_multiline)


State 166

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  176 expr_list: expr_list ',' expr_singleline .

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 176 (expr_list)


State 167

  159 expr_multiline: IDENTIFIER arguments_multiline .

    $default  reduce using rule 159 (expr_multiline)


State 168

   16 function: FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION .

    $default  reduce using rule 16 (function)


State 169

   79 var_name: IDENTIFIER . '(' expr_multiline ')'
   80 var_name_singleline: IDENTIFIER . '(' expr_singleline ')'
   81                    | IDENTIFIER .

    '('  shift, and go to state 221

    $default  reduce using rule 81 (var_name_singleline)


State 170

   67 decl_stmt: CONST var_name . AS basic_literal '=' END_OF_LINE expr_multiline

    AS  shift, and go to state 222


State 171

   68 decl_stmt: CONST var_name_singleline . AS basic_literal '=' END_OF_LINE expr_multiline
   73 decl_stmt_single_line: CONST var_name_singleline . AS basic_literal '=' expr_singleline

    AS  shift, and go to state 223


State 172

   69 decl_stmt: DIM var_name . AS basic_literal '=' END_OF_LINE expr_multiline
   71          | DIM var_name . '=' END_OF_LINE expr_multiline

    AS   shift, and go to state 224
    '='  shift, and go to state 225


State 173

   70 decl_stmt: DIM var_name_singleline . AS basic_literal '=' END_OF_LINE expr_multiline
   72          | DIM var_name_singleline . '=' END_OF_LINE expr_multiline
   74 decl_stmt_single_line: DIM var_name_singleline . AS basic_literal '=' expr_singleline
   75                      | DIM var_name_singleline . AS basic_literal
   76                      | DIM var_name_singleline . '=' expr_singleline
   77                      | DIM var_name_singleline .
   78                      | DIM var_name_singleline . '=' NEW basic_literal '(' ')' '{' expr_list '}'

    AS   shift, and go to state 226
    '='  shift, and go to state 227

    $default  reduce using rule 77 (decl_stmt_single_line)


State 174

   89 while_stmt: WHILE expr_singleline . stmt_ends stmt_list END WHILE
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  143 expr_multiline: expr_singleline . '+' END_OF_LINE expr_singleline
  144               | expr_singleline . '-' END_OF_LINE expr_singleline
  145               | expr_singleline . '*' END_OF_LINE expr_singleline
  146               | expr_singleline . '/' END_OF_LINE expr_singleline
  147               | expr_singleline . INT_DIV END_OF_LINE expr_singleline
  148               | expr_singleline . '=' END_OF_LINE expr_singleline
  149               | expr_singleline . '<' END_OF_LINE expr_singleline
  150               | expr_singleline . '>' END_OF_LINE expr_singleline
  151               | expr_singleline . '^' END_OF_LINE expr_singleline
  152               | expr_singleline . NOT_EQUAL END_OF_LINE expr_singleline
  153               | expr_singleline . LESS_OR_EQUAL END_OF_LINE expr_singleline
  154               | expr_singleline . MORE_OR_EQUAL END_OF_LINE expr_singleline
  155               | expr_singleline . '&' END_OF_LINE expr_singleline

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 197
    '*'            shift, and go to state 198
    '/'            shift, and go to state 199
    INT_DIV        shift, and go to state 200
    '+'            shift, and go to state 201
    '-'            shift, and go to state 202
    '='            shift, and go to state 203
    NOT_EQUAL      shift, and go to state 204
    LESS_OR_EQUAL  shift, and go to state 205
    MORE_OR_EQUAL  shift, and go to state 206
    '>'            shift, and go to state 207
    '<'            shift, and go to state 208
    '&'            shift, and go to state 209

    stmt_ends  go to state 228


State 175

   88 while_stmt: WHILE expr_multiline . stmt_ends stmt_list END WHILE

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 229


State 176

   98 if_stmt_multi_line: IF expr_singleline . THEN stmt_ends stmt_list END IF
  100                   | IF expr_singleline . THEN stmt_ends stmt_list ELSE stmt_list END IF
  102                   | IF expr_singleline . THEN stmt_ends stmt_list elseif_list END IF
  104                   | IF expr_singleline . THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF
  109 if_stmt_single_line: IF expr_singleline . THEN single_line_stmt
  110                    | IF expr_singleline . THEN single_line_stmt ELSE single_line_stmt
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  143 expr_multiline: expr_singleline . '+' END_OF_LINE expr_singleline
  144               | expr_singleline . '-' END_OF_LINE expr_singleline
  145               | expr_singleline . '*' END_OF_LINE expr_singleline
  146               | expr_singleline . '/' END_OF_LINE expr_singleline
  147               | expr_singleline . INT_DIV END_OF_LINE expr_singleline
  148               | expr_singleline . '=' END_OF_LINE expr_singleline
  149               | expr_singleline . '<' END_OF_LINE expr_singleline
  150               | expr_singleline . '>' END_OF_LINE expr_singleline
  151               | expr_singleline . '^' END_OF_LINE expr_singleline
  152               | expr_singleline . NOT_EQUAL END_OF_LINE expr_singleline
  153               | expr_singleline . LESS_OR_EQUAL END_OF_LINE expr_singleline
  154               | expr_singleline . MORE_OR_EQUAL END_OF_LINE expr_singleline
  155               | expr_singleline . '&' END_OF_LINE expr_singleline

    '^'            shift, and go to state 197
    '*'            shift, and go to state 198
    '/'            shift, and go to state 199
    INT_DIV        shift, and go to state 200
    '+'            shift, and go to state 201
    '-'            shift, and go to state 202
    '='            shift, and go to state 203
    NOT_EQUAL      shift, and go to state 204
    LESS_OR_EQUAL  shift, and go to state 205
    MORE_OR_EQUAL  shift, and go to state 206
    '>'            shift, and go to state 207
    '<'            shift, and go to state 208
    '&'            shift, and go to state 209
    THEN           shift, and go to state 230


State 177

   97 if_stmt_multi_line: IF expr_multiline . THEN stmt_ends stmt_list END IF
   99                   | IF expr_multiline . THEN stmt_ends stmt_list ELSE stmt_list END IF
  101                   | IF expr_multiline . THEN stmt_ends stmt_list elseif_list END IF
  103                   | IF expr_multiline . THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF

    THEN  shift, and go to state 231


State 178

  111 select_stmt: SELECT CASE . expr_singleline stmt_ends case_list END SELECT
  112            | SELECT CASE . expr_multiline stmt_ends case_list END SELECT

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 232
    expr_multiline       go to state 233
    basic_literal_value  go to state 72


State 179

   17 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_singleline . stmt_ends END FUNCTION
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  143 expr_multiline: expr_singleline . '+' END_OF_LINE expr_singleline
  144               | expr_singleline . '-' END_OF_LINE expr_singleline
  145               | expr_singleline . '*' END_OF_LINE expr_singleline
  146               | expr_singleline . '/' END_OF_LINE expr_singleline
  147               | expr_singleline . INT_DIV END_OF_LINE expr_singleline
  148               | expr_singleline . '=' END_OF_LINE expr_singleline
  149               | expr_singleline . '<' END_OF_LINE expr_singleline
  150               | expr_singleline . '>' END_OF_LINE expr_singleline
  151               | expr_singleline . '^' END_OF_LINE expr_singleline
  152               | expr_singleline . NOT_EQUAL END_OF_LINE expr_singleline
  153               | expr_singleline . LESS_OR_EQUAL END_OF_LINE expr_singleline
  154               | expr_singleline . MORE_OR_EQUAL END_OF_LINE expr_singleline
  155               | expr_singleline . '&' END_OF_LINE expr_singleline

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 197
    '*'            shift, and go to state 198
    '/'            shift, and go to state 199
    INT_DIV        shift, and go to state 200
    '+'            shift, and go to state 201
    '-'            shift, and go to state 202
    '='            shift, and go to state 203
    NOT_EQUAL      shift, and go to state 204
    LESS_OR_EQUAL  shift, and go to state 205
    MORE_OR_EQUAL  shift, and go to state 206
    '>'            shift, and go to state 207
    '<'            shift, and go to state 208
    '&'            shift, and go to state 209

    stmt_ends  go to state 234


State 180

   18 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_multiline . stmt_ends END FUNCTION

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 235


State 181

   93 do_loop_condition: WHILE . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 236
    basic_literal_value  go to state 72


State 182

   92 do_loop_condition: UNTIL . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 237
    basic_literal_value  go to state 72


State 183

   66 stmt_ends: stmt_ends . END_OF_LINE
   91 do_loop_stmt: DO stmt_ends . stmt_list LOOP do_loop_condition

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 238
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 184

   90 do_loop_stmt: DO do_loop_condition . stmt_ends stmt_list LOOP

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 239


State 185

   94 for_loop_stmt: FOR IDENTIFIER . AS basic_literal '=' basic_literal_value TO basic_literal_value stmt_ends stmt_list NEXT
   95              | FOR IDENTIFIER . AS basic_literal '=' basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT

    AS  shift, and go to state 240


State 186

   96 for_each_loop_stmt: FOR EACH . IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

    IDENTIFIER  shift, and go to state 241


State 187

  156 expr_multiline: '(' END_OF_LINE . expr_singleline ')'
  157               | '(' END_OF_LINE . expr_singleline END_OF_LINE ')'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 242
    basic_literal_value  go to state 72


State 188

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  140                | '(' expr_singleline . ')'
  158 expr_multiline: '(' expr_singleline . END_OF_LINE ')'

    END_OF_LINE    shift, and go to state 243
    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103
    ')'            shift, and go to state 151


State 189

   19 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list END . FUNCTION

    FUNCTION  shift, and go to state 244


State 190

   20 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN . expr_singleline stmt_ends END FUNCTION
   21         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN . expr_multiline stmt_ends END FUNCTION

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 245
    expr_multiline       go to state 246
    basic_literal_value  go to state 72


State 191

   51 stmt_list: stmt_list stmt .

    $default  reduce using rule 51 (stmt_list)


State 192

   53 stmt: single_line_stmt stmt_ends .
   66 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 53 (stmt)


State 193

   57 multi_line_stmt: decl_stmt stmt_ends .
   66 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 57 (multi_line_stmt)


State 194

   58 multi_line_stmt: while_stmt stmt_ends .
   66 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 58 (multi_line_stmt)


State 195

   63 multi_line_stmt: if_stmt_multi_line stmt_ends .
   66 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 63 (multi_line_stmt)


State 196

   62 multi_line_stmt: select_stmt stmt_ends .
   66 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 62 (multi_line_stmt)


State 197

  135 expr_singleline: expr_singleline '^' . expr_singleline
  151 expr_multiline: expr_singleline '^' . END_OF_LINE expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 247
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 152
    basic_literal_value  go to state 72


State 198

  129 expr_singleline: expr_singleline '*' . expr_singleline
  145 expr_multiline: expr_singleline '*' . END_OF_LINE expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 248
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 153
    basic_literal_value  go to state 72


State 199

  130 expr_singleline: expr_singleline '/' . expr_singleline
  146 expr_multiline: expr_singleline '/' . END_OF_LINE expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 249
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 154
    basic_literal_value  go to state 72


State 200

  131 expr_singleline: expr_singleline INT_DIV . expr_singleline
  147 expr_multiline: expr_singleline INT_DIV . END_OF_LINE expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 250
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 155
    basic_literal_value  go to state 72


State 201

  127 expr_singleline: expr_singleline '+' . expr_singleline
  143 expr_multiline: expr_singleline '+' . END_OF_LINE expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 251
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 156
    basic_literal_value  go to state 72


State 202

  128 expr_singleline: expr_singleline '-' . expr_singleline
  144 expr_multiline: expr_singleline '-' . END_OF_LINE expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 252
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 157
    basic_literal_value  go to state 72


State 203

  132 expr_singleline: expr_singleline '=' . expr_singleline
  148 expr_multiline: expr_singleline '=' . END_OF_LINE expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 253
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 158
    basic_literal_value  go to state 72


State 204

  136 expr_singleline: expr_singleline NOT_EQUAL . expr_singleline
  152 expr_multiline: expr_singleline NOT_EQUAL . END_OF_LINE expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 254
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 159
    basic_literal_value  go to state 72


State 205

  137 expr_singleline: expr_singleline LESS_OR_EQUAL . expr_singleline
  153 expr_multiline: expr_singleline LESS_OR_EQUAL . END_OF_LINE expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 255
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 160
    basic_literal_value  go to state 72


State 206

  138 expr_singleline: expr_singleline MORE_OR_EQUAL . expr_singleline
  154 expr_multiline: expr_singleline MORE_OR_EQUAL . END_OF_LINE expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 256
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 161
    basic_literal_value  go to state 72


State 207

  134 expr_singleline: expr_singleline '>' . expr_singleline
  150 expr_multiline: expr_singleline '>' . END_OF_LINE expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 257
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 162
    basic_literal_value  go to state 72


State 208

  133 expr_singleline: expr_singleline '<' . expr_singleline
  149 expr_multiline: expr_singleline '<' . END_OF_LINE expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 258
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 163
    basic_literal_value  go to state 72


State 209

  139 expr_singleline: expr_singleline '&' . expr_singleline
  155 expr_multiline: expr_singleline '&' . END_OF_LINE expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 259
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 164
    basic_literal_value  go to state 72


State 210

   64 multi_line_stmt: expr_multiline stmt_ends .
   66 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 64 (multi_line_stmt)


State 211

   30 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends END SUB
   31         | access SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends stmt_list END SUB

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 260


State 212

   22 function: access FUNCTION IDENTIFIER arguments stmt_ends END . FUNCTION

    FUNCTION  shift, and go to state 261


State 213

   23 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN . expr_singleline stmt_ends END FUNCTION
   24         | access FUNCTION IDENTIFIER arguments stmt_ends RETURN . expr_multiline stmt_ends END FUNCTION

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 262
    expr_multiline       go to state 263
    basic_literal_value  go to state 72


State 214

   25 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list . END FUNCTION
   26         | access FUNCTION IDENTIFIER arguments stmt_ends stmt_list . RETURN expr_singleline stmt_ends END FUNCTION
   27         | access FUNCTION IDENTIFIER arguments stmt_ends stmt_list . RETURN expr_multiline stmt_ends END FUNCTION
   51 stmt_list: stmt_list . stmt

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    END            shift, and go to state 264
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    RETURN         shift, and go to state 265
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 215

   48 parameter_with_type: IDENTIFIER AS basic_literal '(' . ')'

    ')'  shift, and go to state 266


State 216

   28 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END . SUB

    SUB  shift, and go to state 267


State 217

   29 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list . END SUB
   51 stmt_list: stmt_list . stmt

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    END            shift, and go to state 268
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 218

   43 parameterlist_with_type: parameterlist_with_type ',' END_OF_LINE parameter_with_type .

    $default  reduce using rule 43 (parameterlist_with_type)


State 219

   46 parameterlist_without_type: parameterlist_without_type ',' END_OF_LINE parameter_without_type .

    $default  reduce using rule 46 (parameterlist_without_type)


State 220

  169 arguments_multiline: '(' END_OF_LINE expr_list END_OF_LINE ')' .

    $default  reduce using rule 169 (arguments_multiline)


State 221

   79 var_name: IDENTIFIER '(' . expr_multiline ')'
   80 var_name_singleline: IDENTIFIER '(' . expr_singleline ')'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 269
    expr_multiline       go to state 270
    basic_literal_value  go to state 72


State 222

   67 decl_stmt: CONST var_name AS . basic_literal '=' END_OF_LINE expr_multiline

    INT      shift, and go to state 135
    DOUBLE   shift, and go to state 136
    STRING   shift, and go to state 137
    BOOLEAN  shift, and go to state 138

    basic_literal  go to state 271


State 223

   68 decl_stmt: CONST var_name_singleline AS . basic_literal '=' END_OF_LINE expr_multiline
   73 decl_stmt_single_line: CONST var_name_singleline AS . basic_literal '=' expr_singleline

    INT      shift, and go to state 135
    DOUBLE   shift, and go to state 136
    STRING   shift, and go to state 137
    BOOLEAN  shift, and go to state 138

    basic_literal  go to state 272


State 224

   69 decl_stmt: DIM var_name AS . basic_literal '=' END_OF_LINE expr_multiline

    INT      shift, and go to state 135
    DOUBLE   shift, and go to state 136
    STRING   shift, and go to state 137
    BOOLEAN  shift, and go to state 138

    basic_literal  go to state 273


State 225

   71 decl_stmt: DIM var_name '=' . END_OF_LINE expr_multiline

    END_OF_LINE  shift, and go to state 274


State 226

   70 decl_stmt: DIM var_name_singleline AS . basic_literal '=' END_OF_LINE expr_multiline
   74 decl_stmt_single_line: DIM var_name_singleline AS . basic_literal '=' expr_singleline
   75                      | DIM var_name_singleline AS . basic_literal

    INT      shift, and go to state 135
    DOUBLE   shift, and go to state 136
    STRING   shift, and go to state 137
    BOOLEAN  shift, and go to state 138

    basic_literal  go to state 275


State 227

   72 decl_stmt: DIM var_name_singleline '=' . END_OF_LINE expr_multiline
   76 decl_stmt_single_line: DIM var_name_singleline '=' . expr_singleline
   78                      | DIM var_name_singleline '=' . NEW basic_literal '(' ')' '{' expr_list '}'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    NEW            shift, and go to state 276
    END_OF_LINE    shift, and go to state 277
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 278
    basic_literal_value  go to state 72


State 228

   66 stmt_ends: stmt_ends . END_OF_LINE
   89 while_stmt: WHILE expr_singleline stmt_ends . stmt_list END WHILE

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 279
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 229

   66 stmt_ends: stmt_ends . END_OF_LINE
   88 while_stmt: WHILE expr_multiline stmt_ends . stmt_list END WHILE

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 280
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 230

   98 if_stmt_multi_line: IF expr_singleline THEN . stmt_ends stmt_list END IF
  100                   | IF expr_singleline THEN . stmt_ends stmt_list ELSE stmt_list END IF
  102                   | IF expr_singleline THEN . stmt_ends stmt_list elseif_list END IF
  104                   | IF expr_singleline THEN . stmt_ends stmt_list elseif_list ELSE stmt_list END IF
  109 if_stmt_single_line: IF expr_singleline THEN . single_line_stmt
  110                    | IF expr_singleline THEN . single_line_stmt ELSE single_line_stmt

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    CONST          shift, and go to state 281
    DIM            shift, and go to state 282
    IF             shift, and go to state 283
    END_OF_LINE    shift, and go to state 20
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    single_line_stmt       go to state 284
    stmt_ends              go to state 285
    decl_stmt_single_line  go to state 123
    if_stmt_single_line    go to state 129
    expr_singleline        go to state 286
    basic_literal_value    go to state 72


State 231

   97 if_stmt_multi_line: IF expr_multiline THEN . stmt_ends stmt_list END IF
   99                   | IF expr_multiline THEN . stmt_ends stmt_list ELSE stmt_list END IF
  101                   | IF expr_multiline THEN . stmt_ends stmt_list elseif_list END IF
  103                   | IF expr_multiline THEN . stmt_ends stmt_list elseif_list ELSE stmt_list END IF

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 287


State 232

  111 select_stmt: SELECT CASE expr_singleline . stmt_ends case_list END SELECT
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  143 expr_multiline: expr_singleline . '+' END_OF_LINE expr_singleline
  144               | expr_singleline . '-' END_OF_LINE expr_singleline
  145               | expr_singleline . '*' END_OF_LINE expr_singleline
  146               | expr_singleline . '/' END_OF_LINE expr_singleline
  147               | expr_singleline . INT_DIV END_OF_LINE expr_singleline
  148               | expr_singleline . '=' END_OF_LINE expr_singleline
  149               | expr_singleline . '<' END_OF_LINE expr_singleline
  150               | expr_singleline . '>' END_OF_LINE expr_singleline
  151               | expr_singleline . '^' END_OF_LINE expr_singleline
  152               | expr_singleline . NOT_EQUAL END_OF_LINE expr_singleline
  153               | expr_singleline . LESS_OR_EQUAL END_OF_LINE expr_singleline
  154               | expr_singleline . MORE_OR_EQUAL END_OF_LINE expr_singleline
  155               | expr_singleline . '&' END_OF_LINE expr_singleline

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 197
    '*'            shift, and go to state 198
    '/'            shift, and go to state 199
    INT_DIV        shift, and go to state 200
    '+'            shift, and go to state 201
    '-'            shift, and go to state 202
    '='            shift, and go to state 203
    NOT_EQUAL      shift, and go to state 204
    LESS_OR_EQUAL  shift, and go to state 205
    MORE_OR_EQUAL  shift, and go to state 206
    '>'            shift, and go to state 207
    '<'            shift, and go to state 208
    '&'            shift, and go to state 209

    stmt_ends  go to state 288


State 233

  112 select_stmt: SELECT CASE expr_multiline . stmt_ends case_list END SELECT

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 289


State 234

   17 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_singleline stmt_ends . END FUNCTION
   66 stmt_ends: stmt_ends . END_OF_LINE

    END          shift, and go to state 290
    END_OF_LINE  shift, and go to state 24


State 235

   18 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_multiline stmt_ends . END FUNCTION
   66 stmt_ends: stmt_ends . END_OF_LINE

    END          shift, and go to state 291
    END_OF_LINE  shift, and go to state 24


State 236

   93 do_loop_condition: WHILE expr_singleline .
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    '+'       [reduce using rule 93 (do_loop_condition)]
    '-'       [reduce using rule 93 (do_loop_condition)]
    $default  reduce using rule 93 (do_loop_condition)

    shift/reduce conflict on token '+':
       93 do_loop_condition: WHILE expr_singleline .
      127 expr_singleline: expr_singleline . '+' expr_singleline
      First example: stmt
      Shift derivation
        stmt_list
        `-> 51: stmt
      Second example: expr_singleline stmt_ends
      Reduce derivation
        stmt_list
        `-> 51: expr_singleline stmt
                                `-> 53: stmt_ends

    shift/reduce conflict on token '-':
       93 do_loop_condition: WHILE expr_singleline .
      128 expr_singleline: expr_singleline . '-' expr_singleline
      First example: stmt
      Shift derivation
        stmt_list
        `-> 51: stmt
      Second example: expr_singleline stmt_ends
      Reduce derivation
        stmt_list
        `-> 51: expr_singleline stmt
                                `-> 53: stmt_ends



State 237

   92 do_loop_condition: UNTIL expr_singleline .
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    '+'       [reduce using rule 92 (do_loop_condition)]
    '-'       [reduce using rule 92 (do_loop_condition)]
    $default  reduce using rule 92 (do_loop_condition)

    shift/reduce conflict on token '+':
       92 do_loop_condition: UNTIL expr_singleline .
      127 expr_singleline: expr_singleline . '+' expr_singleline
      First example: stmt
      Shift derivation
        stmt_list
        `-> 51: stmt
      Second example: expr_singleline stmt_ends
      Reduce derivation
        stmt_list
        `-> 51: expr_singleline stmt
                                `-> 53: stmt_ends

    shift/reduce conflict on token '-':
       92 do_loop_condition: UNTIL expr_singleline .
      128 expr_singleline: expr_singleline . '-' expr_singleline
      First example: stmt
      Shift derivation
        stmt_list
        `-> 51: stmt
      Second example: expr_singleline stmt_ends
      Reduce derivation
        stmt_list
        `-> 51: expr_singleline stmt
                                `-> 53: stmt_ends



State 238

   51 stmt_list: stmt_list . stmt
   91 do_loop_stmt: DO stmt_ends stmt_list . LOOP do_loop_condition

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    LOOP           shift, and go to state 292
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 239

   66 stmt_ends: stmt_ends . END_OF_LINE
   90 do_loop_stmt: DO do_loop_condition stmt_ends . stmt_list LOOP

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 293
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 240

   94 for_loop_stmt: FOR IDENTIFIER AS . basic_literal '=' basic_literal_value TO basic_literal_value stmt_ends stmt_list NEXT
   95              | FOR IDENTIFIER AS . basic_literal '=' basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT

    INT      shift, and go to state 135
    DOUBLE   shift, and go to state 136
    STRING   shift, and go to state 137
    BOOLEAN  shift, and go to state 138

    basic_literal  go to state 294


State 241

   96 for_each_loop_stmt: FOR EACH IDENTIFIER . AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

    AS  shift, and go to state 295


State 242

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  156 expr_multiline: '(' END_OF_LINE expr_singleline . ')'
  157               | '(' END_OF_LINE expr_singleline . END_OF_LINE ')'

    END_OF_LINE    shift, and go to state 296
    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103
    ')'            shift, and go to state 297


State 243

  158 expr_multiline: '(' expr_singleline END_OF_LINE . ')'

    ')'  shift, and go to state 298


State 244

   19 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION .

    $default  reduce using rule 19 (function)


State 245

   20 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_singleline . stmt_ends END FUNCTION
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  143 expr_multiline: expr_singleline . '+' END_OF_LINE expr_singleline
  144               | expr_singleline . '-' END_OF_LINE expr_singleline
  145               | expr_singleline . '*' END_OF_LINE expr_singleline
  146               | expr_singleline . '/' END_OF_LINE expr_singleline
  147               | expr_singleline . INT_DIV END_OF_LINE expr_singleline
  148               | expr_singleline . '=' END_OF_LINE expr_singleline
  149               | expr_singleline . '<' END_OF_LINE expr_singleline
  150               | expr_singleline . '>' END_OF_LINE expr_singleline
  151               | expr_singleline . '^' END_OF_LINE expr_singleline
  152               | expr_singleline . NOT_EQUAL END_OF_LINE expr_singleline
  153               | expr_singleline . LESS_OR_EQUAL END_OF_LINE expr_singleline
  154               | expr_singleline . MORE_OR_EQUAL END_OF_LINE expr_singleline
  155               | expr_singleline . '&' END_OF_LINE expr_singleline

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 197
    '*'            shift, and go to state 198
    '/'            shift, and go to state 199
    INT_DIV        shift, and go to state 200
    '+'            shift, and go to state 201
    '-'            shift, and go to state 202
    '='            shift, and go to state 203
    NOT_EQUAL      shift, and go to state 204
    LESS_OR_EQUAL  shift, and go to state 205
    MORE_OR_EQUAL  shift, and go to state 206
    '>'            shift, and go to state 207
    '<'            shift, and go to state 208
    '&'            shift, and go to state 209

    stmt_ends  go to state 299


State 246

   21 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_multiline . stmt_ends END FUNCTION

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 300


State 247

  151 expr_multiline: expr_singleline '^' END_OF_LINE . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 301
    basic_literal_value  go to state 72


State 248

  145 expr_multiline: expr_singleline '*' END_OF_LINE . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 302
    basic_literal_value  go to state 72


State 249

  146 expr_multiline: expr_singleline '/' END_OF_LINE . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 303
    basic_literal_value  go to state 72


State 250

  147 expr_multiline: expr_singleline INT_DIV END_OF_LINE . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 304
    basic_literal_value  go to state 72


State 251

  143 expr_multiline: expr_singleline '+' END_OF_LINE . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 305
    basic_literal_value  go to state 72


State 252

  144 expr_multiline: expr_singleline '-' END_OF_LINE . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 306
    basic_literal_value  go to state 72


State 253

  148 expr_multiline: expr_singleline '=' END_OF_LINE . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 307
    basic_literal_value  go to state 72


State 254

  152 expr_multiline: expr_singleline NOT_EQUAL END_OF_LINE . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 308
    basic_literal_value  go to state 72


State 255

  153 expr_multiline: expr_singleline LESS_OR_EQUAL END_OF_LINE . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 309
    basic_literal_value  go to state 72


State 256

  154 expr_multiline: expr_singleline MORE_OR_EQUAL END_OF_LINE . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 310
    basic_literal_value  go to state 72


State 257

  150 expr_multiline: expr_singleline '>' END_OF_LINE . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 311
    basic_literal_value  go to state 72


State 258

  149 expr_multiline: expr_singleline '<' END_OF_LINE . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 312
    basic_literal_value  go to state 72


State 259

  155 expr_multiline: expr_singleline '&' END_OF_LINE . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 313
    basic_literal_value  go to state 72


State 260

   30 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . END SUB
   31         | access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . stmt_list END SUB
   66 stmt_ends: stmt_ends . END_OF_LINE

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    END            shift, and go to state 314
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 315
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 261

   22 function: access FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION .

    $default  reduce using rule 22 (function)


State 262

   23 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_singleline . stmt_ends END FUNCTION
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  143 expr_multiline: expr_singleline . '+' END_OF_LINE expr_singleline
  144               | expr_singleline . '-' END_OF_LINE expr_singleline
  145               | expr_singleline . '*' END_OF_LINE expr_singleline
  146               | expr_singleline . '/' END_OF_LINE expr_singleline
  147               | expr_singleline . INT_DIV END_OF_LINE expr_singleline
  148               | expr_singleline . '=' END_OF_LINE expr_singleline
  149               | expr_singleline . '<' END_OF_LINE expr_singleline
  150               | expr_singleline . '>' END_OF_LINE expr_singleline
  151               | expr_singleline . '^' END_OF_LINE expr_singleline
  152               | expr_singleline . NOT_EQUAL END_OF_LINE expr_singleline
  153               | expr_singleline . LESS_OR_EQUAL END_OF_LINE expr_singleline
  154               | expr_singleline . MORE_OR_EQUAL END_OF_LINE expr_singleline
  155               | expr_singleline . '&' END_OF_LINE expr_singleline

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 197
    '*'            shift, and go to state 198
    '/'            shift, and go to state 199
    INT_DIV        shift, and go to state 200
    '+'            shift, and go to state 201
    '-'            shift, and go to state 202
    '='            shift, and go to state 203
    NOT_EQUAL      shift, and go to state 204
    LESS_OR_EQUAL  shift, and go to state 205
    MORE_OR_EQUAL  shift, and go to state 206
    '>'            shift, and go to state 207
    '<'            shift, and go to state 208
    '&'            shift, and go to state 209

    stmt_ends  go to state 316


State 263

   24 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_multiline . stmt_ends END FUNCTION

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 317


State 264

   25 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list END . FUNCTION

    FUNCTION  shift, and go to state 318


State 265

   26 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN . expr_singleline stmt_ends END FUNCTION
   27         | access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN . expr_multiline stmt_ends END FUNCTION

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 319
    expr_multiline       go to state 320
    basic_literal_value  go to state 72


State 266

   48 parameter_with_type: IDENTIFIER AS basic_literal '(' ')' .

    $default  reduce using rule 48 (parameter_with_type)


State 267

   28 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB .

    $default  reduce using rule 28 (sub_bloc)


State 268

   29 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END . SUB

    SUB  shift, and go to state 321


State 269

   80 var_name_singleline: IDENTIFIER '(' expr_singleline . ')'
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  143 expr_multiline: expr_singleline . '+' END_OF_LINE expr_singleline
  144               | expr_singleline . '-' END_OF_LINE expr_singleline
  145               | expr_singleline . '*' END_OF_LINE expr_singleline
  146               | expr_singleline . '/' END_OF_LINE expr_singleline
  147               | expr_singleline . INT_DIV END_OF_LINE expr_singleline
  148               | expr_singleline . '=' END_OF_LINE expr_singleline
  149               | expr_singleline . '<' END_OF_LINE expr_singleline
  150               | expr_singleline . '>' END_OF_LINE expr_singleline
  151               | expr_singleline . '^' END_OF_LINE expr_singleline
  152               | expr_singleline . NOT_EQUAL END_OF_LINE expr_singleline
  153               | expr_singleline . LESS_OR_EQUAL END_OF_LINE expr_singleline
  154               | expr_singleline . MORE_OR_EQUAL END_OF_LINE expr_singleline
  155               | expr_singleline . '&' END_OF_LINE expr_singleline

    '^'            shift, and go to state 197
    '*'            shift, and go to state 198
    '/'            shift, and go to state 199
    INT_DIV        shift, and go to state 200
    '+'            shift, and go to state 201
    '-'            shift, and go to state 202
    '='            shift, and go to state 203
    NOT_EQUAL      shift, and go to state 204
    LESS_OR_EQUAL  shift, and go to state 205
    MORE_OR_EQUAL  shift, and go to state 206
    '>'            shift, and go to state 207
    '<'            shift, and go to state 208
    '&'            shift, and go to state 209
    ')'            shift, and go to state 322


State 270

   79 var_name: IDENTIFIER '(' expr_multiline . ')'

    ')'  shift, and go to state 323


State 271

   67 decl_stmt: CONST var_name AS basic_literal . '=' END_OF_LINE expr_multiline

    '='  shift, and go to state 324


State 272

   68 decl_stmt: CONST var_name_singleline AS basic_literal . '=' END_OF_LINE expr_multiline
   73 decl_stmt_single_line: CONST var_name_singleline AS basic_literal . '=' expr_singleline

    '='  shift, and go to state 325


State 273

   69 decl_stmt: DIM var_name AS basic_literal . '=' END_OF_LINE expr_multiline

    '='  shift, and go to state 326


State 274

   71 decl_stmt: DIM var_name '=' END_OF_LINE . expr_multiline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 327
    expr_multiline       go to state 328
    basic_literal_value  go to state 72


State 275

   70 decl_stmt: DIM var_name_singleline AS basic_literal . '=' END_OF_LINE expr_multiline
   74 decl_stmt_single_line: DIM var_name_singleline AS basic_literal . '=' expr_singleline
   75                      | DIM var_name_singleline AS basic_literal .

    '='  shift, and go to state 329

    $default  reduce using rule 75 (decl_stmt_single_line)


State 276

   78 decl_stmt_single_line: DIM var_name_singleline '=' NEW . basic_literal '(' ')' '{' expr_list '}'

    INT      shift, and go to state 135
    DOUBLE   shift, and go to state 136
    STRING   shift, and go to state 137
    BOOLEAN  shift, and go to state 138

    basic_literal  go to state 330


State 277

   72 decl_stmt: DIM var_name_singleline '=' END_OF_LINE . expr_multiline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 327
    expr_multiline       go to state 331
    basic_literal_value  go to state 72


State 278

   76 decl_stmt_single_line: DIM var_name_singleline '=' expr_singleline .
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 76 (decl_stmt_single_line)


State 279

   51 stmt_list: stmt_list . stmt
   89 while_stmt: WHILE expr_singleline stmt_ends stmt_list . END WHILE

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    END            shift, and go to state 332
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 280

   51 stmt_list: stmt_list . stmt
   88 while_stmt: WHILE expr_multiline stmt_ends stmt_list . END WHILE

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    END            shift, and go to state 333
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 281

   73 decl_stmt_single_line: CONST . var_name_singleline AS basic_literal '=' expr_singleline

    IDENTIFIER  shift, and go to state 334

    var_name_singleline  go to state 335


State 282

   74 decl_stmt_single_line: DIM . var_name_singleline AS basic_literal '=' expr_singleline
   75                      | DIM . var_name_singleline AS basic_literal
   76                      | DIM . var_name_singleline '=' expr_singleline
   77                      | DIM . var_name_singleline
   78                      | DIM . var_name_singleline '=' NEW basic_literal '(' ')' '{' expr_list '}'

    IDENTIFIER  shift, and go to state 334

    var_name_singleline  go to state 336


State 283

  109 if_stmt_single_line: IF . expr_singleline THEN single_line_stmt
  110                    | IF . expr_singleline THEN single_line_stmt ELSE single_line_stmt

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 337
    basic_literal_value  go to state 72


State 284

  109 if_stmt_single_line: IF expr_singleline THEN single_line_stmt .
  110                    | IF expr_singleline THEN single_line_stmt . ELSE single_line_stmt

    ELSE  shift, and go to state 338

    $default  reduce using rule 109 (if_stmt_single_line)


State 285

   66 stmt_ends: stmt_ends . END_OF_LINE
   98 if_stmt_multi_line: IF expr_singleline THEN stmt_ends . stmt_list END IF
  100                   | IF expr_singleline THEN stmt_ends . stmt_list ELSE stmt_list END IF
  102                   | IF expr_singleline THEN stmt_ends . stmt_list elseif_list END IF
  104                   | IF expr_singleline THEN stmt_ends . stmt_list elseif_list ELSE stmt_list END IF

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 339
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 286

   56 single_line_stmt: expr_singleline .
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 56 (single_line_stmt)


State 287

   66 stmt_ends: stmt_ends . END_OF_LINE
   97 if_stmt_multi_line: IF expr_multiline THEN stmt_ends . stmt_list END IF
   99                   | IF expr_multiline THEN stmt_ends . stmt_list ELSE stmt_list END IF
  101                   | IF expr_multiline THEN stmt_ends . stmt_list elseif_list END IF
  103                   | IF expr_multiline THEN stmt_ends . stmt_list elseif_list ELSE stmt_list END IF

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 340
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 288

   66 stmt_ends: stmt_ends . END_OF_LINE
  111 select_stmt: SELECT CASE expr_singleline stmt_ends . case_list END SELECT

    CASE         shift, and go to state 341
    END_OF_LINE  shift, and go to state 24

    case_list  go to state 342
    case_stmt  go to state 343


State 289

   66 stmt_ends: stmt_ends . END_OF_LINE
  112 select_stmt: SELECT CASE expr_multiline stmt_ends . case_list END SELECT

    CASE         shift, and go to state 341
    END_OF_LINE  shift, and go to state 24

    case_list  go to state 344
    case_stmt  go to state 343


State 290

   17 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_singleline stmt_ends END . FUNCTION

    FUNCTION  shift, and go to state 345


State 291

   18 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_multiline stmt_ends END . FUNCTION

    FUNCTION  shift, and go to state 346


State 292

   91 do_loop_stmt: DO stmt_ends stmt_list LOOP . do_loop_condition

    WHILE  shift, and go to state 181
    UNTIL  shift, and go to state 182

    do_loop_condition  go to state 347


State 293

   51 stmt_list: stmt_list . stmt
   90 do_loop_stmt: DO do_loop_condition stmt_ends stmt_list . LOOP

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    LOOP           shift, and go to state 348
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 294

   94 for_loop_stmt: FOR IDENTIFIER AS basic_literal . '=' basic_literal_value TO basic_literal_value stmt_ends stmt_list NEXT
   95              | FOR IDENTIFIER AS basic_literal . '=' basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT

    '='  shift, and go to state 349


State 295

   96 for_each_loop_stmt: FOR EACH IDENTIFIER AS . basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

    INT      shift, and go to state 135
    DOUBLE   shift, and go to state 136
    STRING   shift, and go to state 137
    BOOLEAN  shift, and go to state 138

    basic_literal  go to state 350


State 296

  157 expr_multiline: '(' END_OF_LINE expr_singleline END_OF_LINE . ')'

    ')'  shift, and go to state 351


State 297

  156 expr_multiline: '(' END_OF_LINE expr_singleline ')' .

    $default  reduce using rule 156 (expr_multiline)


State 298

  158 expr_multiline: '(' expr_singleline END_OF_LINE ')' .

    $default  reduce using rule 158 (expr_multiline)


State 299

   20 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_singleline stmt_ends . END FUNCTION
   66 stmt_ends: stmt_ends . END_OF_LINE

    END          shift, and go to state 352
    END_OF_LINE  shift, and go to state 24


State 300

   21 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_multiline stmt_ends . END FUNCTION
   66 stmt_ends: stmt_ends . END_OF_LINE

    END          shift, and go to state 353
    END_OF_LINE  shift, and go to state 24


State 301

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  151 expr_multiline: expr_singleline '^' END_OF_LINE expr_singleline .

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 151 (expr_multiline)


State 302

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  145 expr_multiline: expr_singleline '*' END_OF_LINE expr_singleline .

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 145 (expr_multiline)


State 303

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  146 expr_multiline: expr_singleline '/' END_OF_LINE expr_singleline .

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 146 (expr_multiline)


State 304

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  147 expr_multiline: expr_singleline INT_DIV END_OF_LINE expr_singleline .

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 147 (expr_multiline)


State 305

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  143 expr_multiline: expr_singleline '+' END_OF_LINE expr_singleline .

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 143 (expr_multiline)


State 306

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  144 expr_multiline: expr_singleline '-' END_OF_LINE expr_singleline .

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 144 (expr_multiline)


State 307

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  148 expr_multiline: expr_singleline '=' END_OF_LINE expr_singleline .

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 148 (expr_multiline)


State 308

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  152 expr_multiline: expr_singleline NOT_EQUAL END_OF_LINE expr_singleline .

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 152 (expr_multiline)


State 309

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  153 expr_multiline: expr_singleline LESS_OR_EQUAL END_OF_LINE expr_singleline .

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 153 (expr_multiline)


State 310

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  154 expr_multiline: expr_singleline MORE_OR_EQUAL END_OF_LINE expr_singleline .

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 154 (expr_multiline)


State 311

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  150 expr_multiline: expr_singleline '>' END_OF_LINE expr_singleline .

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 150 (expr_multiline)


State 312

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  149 expr_multiline: expr_singleline '<' END_OF_LINE expr_singleline .

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 149 (expr_multiline)


State 313

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  155 expr_multiline: expr_singleline '&' END_OF_LINE expr_singleline .

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 155 (expr_multiline)


State 314

   30 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END . SUB

    SUB  shift, and go to state 354


State 315

   31 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list . END SUB
   51 stmt_list: stmt_list . stmt

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    END            shift, and go to state 355
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 316

   23 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_singleline stmt_ends . END FUNCTION
   66 stmt_ends: stmt_ends . END_OF_LINE

    END          shift, and go to state 356
    END_OF_LINE  shift, and go to state 24


State 317

   24 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_multiline stmt_ends . END FUNCTION
   66 stmt_ends: stmt_ends . END_OF_LINE

    END          shift, and go to state 357
    END_OF_LINE  shift, and go to state 24


State 318

   25 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION .

    $default  reduce using rule 25 (function)


State 319

   26 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_singleline . stmt_ends END FUNCTION
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  143 expr_multiline: expr_singleline . '+' END_OF_LINE expr_singleline
  144               | expr_singleline . '-' END_OF_LINE expr_singleline
  145               | expr_singleline . '*' END_OF_LINE expr_singleline
  146               | expr_singleline . '/' END_OF_LINE expr_singleline
  147               | expr_singleline . INT_DIV END_OF_LINE expr_singleline
  148               | expr_singleline . '=' END_OF_LINE expr_singleline
  149               | expr_singleline . '<' END_OF_LINE expr_singleline
  150               | expr_singleline . '>' END_OF_LINE expr_singleline
  151               | expr_singleline . '^' END_OF_LINE expr_singleline
  152               | expr_singleline . NOT_EQUAL END_OF_LINE expr_singleline
  153               | expr_singleline . LESS_OR_EQUAL END_OF_LINE expr_singleline
  154               | expr_singleline . MORE_OR_EQUAL END_OF_LINE expr_singleline
  155               | expr_singleline . '&' END_OF_LINE expr_singleline

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 197
    '*'            shift, and go to state 198
    '/'            shift, and go to state 199
    INT_DIV        shift, and go to state 200
    '+'            shift, and go to state 201
    '-'            shift, and go to state 202
    '='            shift, and go to state 203
    NOT_EQUAL      shift, and go to state 204
    LESS_OR_EQUAL  shift, and go to state 205
    MORE_OR_EQUAL  shift, and go to state 206
    '>'            shift, and go to state 207
    '<'            shift, and go to state 208
    '&'            shift, and go to state 209

    stmt_ends  go to state 358


State 320

   27 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_multiline . stmt_ends END FUNCTION

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 359


State 321

   29 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB .

    $default  reduce using rule 29 (sub_bloc)


State 322

   80 var_name_singleline: IDENTIFIER '(' expr_singleline ')' .

    $default  reduce using rule 80 (var_name_singleline)


State 323

   79 var_name: IDENTIFIER '(' expr_multiline ')' .

    $default  reduce using rule 79 (var_name)


State 324

   67 decl_stmt: CONST var_name AS basic_literal '=' . END_OF_LINE expr_multiline

    END_OF_LINE  shift, and go to state 360


State 325

   68 decl_stmt: CONST var_name_singleline AS basic_literal '=' . END_OF_LINE expr_multiline
   73 decl_stmt_single_line: CONST var_name_singleline AS basic_literal '=' . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 361
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 362
    basic_literal_value  go to state 72


State 326

   69 decl_stmt: DIM var_name AS basic_literal '=' . END_OF_LINE expr_multiline

    END_OF_LINE  shift, and go to state 363


State 327

  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  143 expr_multiline: expr_singleline . '+' END_OF_LINE expr_singleline
  144               | expr_singleline . '-' END_OF_LINE expr_singleline
  145               | expr_singleline . '*' END_OF_LINE expr_singleline
  146               | expr_singleline . '/' END_OF_LINE expr_singleline
  147               | expr_singleline . INT_DIV END_OF_LINE expr_singleline
  148               | expr_singleline . '=' END_OF_LINE expr_singleline
  149               | expr_singleline . '<' END_OF_LINE expr_singleline
  150               | expr_singleline . '>' END_OF_LINE expr_singleline
  151               | expr_singleline . '^' END_OF_LINE expr_singleline
  152               | expr_singleline . NOT_EQUAL END_OF_LINE expr_singleline
  153               | expr_singleline . LESS_OR_EQUAL END_OF_LINE expr_singleline
  154               | expr_singleline . MORE_OR_EQUAL END_OF_LINE expr_singleline
  155               | expr_singleline . '&' END_OF_LINE expr_singleline

    '^'            shift, and go to state 197
    '*'            shift, and go to state 198
    '/'            shift, and go to state 199
    INT_DIV        shift, and go to state 200
    '+'            shift, and go to state 201
    '-'            shift, and go to state 202
    '='            shift, and go to state 203
    NOT_EQUAL      shift, and go to state 204
    LESS_OR_EQUAL  shift, and go to state 205
    MORE_OR_EQUAL  shift, and go to state 206
    '>'            shift, and go to state 207
    '<'            shift, and go to state 208
    '&'            shift, and go to state 209


State 328

   71 decl_stmt: DIM var_name '=' END_OF_LINE expr_multiline .

    $default  reduce using rule 71 (decl_stmt)


State 329

   70 decl_stmt: DIM var_name_singleline AS basic_literal '=' . END_OF_LINE expr_multiline
   74 decl_stmt_single_line: DIM var_name_singleline AS basic_literal '=' . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 364
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 365
    basic_literal_value  go to state 72


State 330

   78 decl_stmt_single_line: DIM var_name_singleline '=' NEW basic_literal . '(' ')' '{' expr_list '}'

    '('  shift, and go to state 366


State 331

   72 decl_stmt: DIM var_name_singleline '=' END_OF_LINE expr_multiline .

    $default  reduce using rule 72 (decl_stmt)


State 332

   89 while_stmt: WHILE expr_singleline stmt_ends stmt_list END . WHILE

    WHILE  shift, and go to state 367


State 333

   88 while_stmt: WHILE expr_multiline stmt_ends stmt_list END . WHILE

    WHILE  shift, and go to state 368


State 334

   80 var_name_singleline: IDENTIFIER . '(' expr_singleline ')'
   81                    | IDENTIFIER .

    '('  shift, and go to state 369

    $default  reduce using rule 81 (var_name_singleline)


State 335

   73 decl_stmt_single_line: CONST var_name_singleline . AS basic_literal '=' expr_singleline

    AS  shift, and go to state 370


State 336

   74 decl_stmt_single_line: DIM var_name_singleline . AS basic_literal '=' expr_singleline
   75                      | DIM var_name_singleline . AS basic_literal
   76                      | DIM var_name_singleline . '=' expr_singleline
   77                      | DIM var_name_singleline .
   78                      | DIM var_name_singleline . '=' NEW basic_literal '(' ')' '{' expr_list '}'

    AS   shift, and go to state 371
    '='  shift, and go to state 372

    $default  reduce using rule 77 (decl_stmt_single_line)


State 337

  109 if_stmt_single_line: IF expr_singleline . THEN single_line_stmt
  110                    | IF expr_singleline . THEN single_line_stmt ELSE single_line_stmt
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103
    THEN           shift, and go to state 373


State 338

  110 if_stmt_single_line: IF expr_singleline THEN single_line_stmt ELSE . single_line_stmt

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    CONST          shift, and go to state 281
    DIM            shift, and go to state 282
    IF             shift, and go to state 283
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    single_line_stmt       go to state 374
    decl_stmt_single_line  go to state 123
    if_stmt_single_line    go to state 129
    expr_singleline        go to state 286
    basic_literal_value    go to state 72


State 339

   51 stmt_list: stmt_list . stmt
   98 if_stmt_multi_line: IF expr_singleline THEN stmt_ends stmt_list . END IF
  100                   | IF expr_singleline THEN stmt_ends stmt_list . ELSE stmt_list END IF
  102                   | IF expr_singleline THEN stmt_ends stmt_list . elseif_list END IF
  104                   | IF expr_singleline THEN stmt_ends stmt_list . elseif_list ELSE stmt_list END IF

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    END            shift, and go to state 375
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    ELSEIF         shift, and go to state 376
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117
    ELSE           shift, and go to state 377

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    elseif_list            go to state 378
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 340

   51 stmt_list: stmt_list . stmt
   97 if_stmt_multi_line: IF expr_multiline THEN stmt_ends stmt_list . END IF
   99                   | IF expr_multiline THEN stmt_ends stmt_list . ELSE stmt_list END IF
  101                   | IF expr_multiline THEN stmt_ends stmt_list . elseif_list END IF
  103                   | IF expr_multiline THEN stmt_ends stmt_list . elseif_list ELSE stmt_list END IF

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    END            shift, and go to state 379
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    ELSEIF         shift, and go to state 376
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117
    ELSE           shift, and go to state 380

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    elseif_list            go to state 381
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 341

  115 case_stmt: CASE . expr_multiline stmt_ends stmt_list
  116          | CASE . expr_singleline stmt_ends stmt_list
  117          | CASE . IS expr_multiline stmt_ends stmt_list
  118          | CASE . IS expr_singleline stmt_ends stmt_list
  119          | CASE . expr_multiline TO expr_multiline stmt_ends stmt_list
  120          | CASE . expr_multiline TO expr_singleline stmt_ends stmt_list
  121          | CASE . expr_singleline TO expr_multiline stmt_ends stmt_list
  122          | CASE . expr_singleline TO expr_singleline stmt_ends stmt_list
  123          | CASE . ELSE stmt_ends stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    IS             shift, and go to state 382
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117
    ELSE           shift, and go to state 383

    expr_singleline      go to state 384
    expr_multiline       go to state 385
    basic_literal_value  go to state 72


State 342

  111 select_stmt: SELECT CASE expr_singleline stmt_ends case_list . END SELECT
  114 case_list: case_list . case_stmt

    END   shift, and go to state 386
    CASE  shift, and go to state 341

    case_stmt  go to state 387


State 343

  113 case_list: case_stmt .

    $default  reduce using rule 113 (case_list)


State 344

  112 select_stmt: SELECT CASE expr_multiline stmt_ends case_list . END SELECT
  114 case_list: case_list . case_stmt

    END   shift, and go to state 388
    CASE  shift, and go to state 341

    case_stmt  go to state 387


State 345

   17 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_singleline stmt_ends END FUNCTION .

    $default  reduce using rule 17 (function)


State 346

   18 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_multiline stmt_ends END FUNCTION .

    $default  reduce using rule 18 (function)


State 347

   91 do_loop_stmt: DO stmt_ends stmt_list LOOP do_loop_condition .

    $default  reduce using rule 91 (do_loop_stmt)


State 348

   90 do_loop_stmt: DO do_loop_condition stmt_ends stmt_list LOOP .

    $default  reduce using rule 90 (do_loop_stmt)


State 349

   94 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' . basic_literal_value TO basic_literal_value stmt_ends stmt_list NEXT
   95              | FOR IDENTIFIER AS basic_literal '=' . basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64

    basic_literal_value  go to state 389


State 350

   96 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal . IN IDENTIFIER stmt_ends stmt_list NEXT

    IN  shift, and go to state 390


State 351

  157 expr_multiline: '(' END_OF_LINE expr_singleline END_OF_LINE ')' .

    $default  reduce using rule 157 (expr_multiline)


State 352

   20 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_singleline stmt_ends END . FUNCTION

    FUNCTION  shift, and go to state 391


State 353

   21 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_multiline stmt_ends END . FUNCTION

    FUNCTION  shift, and go to state 392


State 354

   30 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB .

    $default  reduce using rule 30 (sub_bloc)


State 355

   31 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END . SUB

    SUB  shift, and go to state 393


State 356

   23 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_singleline stmt_ends END . FUNCTION

    FUNCTION  shift, and go to state 394


State 357

   24 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_multiline stmt_ends END . FUNCTION

    FUNCTION  shift, and go to state 395


State 358

   26 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_singleline stmt_ends . END FUNCTION
   66 stmt_ends: stmt_ends . END_OF_LINE

    END          shift, and go to state 396
    END_OF_LINE  shift, and go to state 24


State 359

   27 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_multiline stmt_ends . END FUNCTION
   66 stmt_ends: stmt_ends . END_OF_LINE

    END          shift, and go to state 397
    END_OF_LINE  shift, and go to state 24


State 360

   67 decl_stmt: CONST var_name AS basic_literal '=' END_OF_LINE . expr_multiline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 327
    expr_multiline       go to state 398
    basic_literal_value  go to state 72


State 361

   68 decl_stmt: CONST var_name_singleline AS basic_literal '=' END_OF_LINE . expr_multiline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 327
    expr_multiline       go to state 399
    basic_literal_value  go to state 72


State 362

   73 decl_stmt_single_line: CONST var_name_singleline AS basic_literal '=' expr_singleline .
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 73 (decl_stmt_single_line)


State 363

   69 decl_stmt: DIM var_name AS basic_literal '=' END_OF_LINE . expr_multiline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 327
    expr_multiline       go to state 400
    basic_literal_value  go to state 72


State 364

   70 decl_stmt: DIM var_name_singleline AS basic_literal '=' END_OF_LINE . expr_multiline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 327
    expr_multiline       go to state 401
    basic_literal_value  go to state 72


State 365

   74 decl_stmt_single_line: DIM var_name_singleline AS basic_literal '=' expr_singleline .
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103

    $default  reduce using rule 74 (decl_stmt_single_line)


State 366

   78 decl_stmt_single_line: DIM var_name_singleline '=' NEW basic_literal '(' . ')' '{' expr_list '}'

    ')'  shift, and go to state 402


State 367

   89 while_stmt: WHILE expr_singleline stmt_ends stmt_list END WHILE .

    $default  reduce using rule 89 (while_stmt)


State 368

   88 while_stmt: WHILE expr_multiline stmt_ends stmt_list END WHILE .

    $default  reduce using rule 88 (while_stmt)


State 369

   80 var_name_singleline: IDENTIFIER '(' . expr_singleline ')'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 403
    basic_literal_value  go to state 72


State 370

   73 decl_stmt_single_line: CONST var_name_singleline AS . basic_literal '=' expr_singleline

    INT      shift, and go to state 135
    DOUBLE   shift, and go to state 136
    STRING   shift, and go to state 137
    BOOLEAN  shift, and go to state 138

    basic_literal  go to state 404


State 371

   74 decl_stmt_single_line: DIM var_name_singleline AS . basic_literal '=' expr_singleline
   75                      | DIM var_name_singleline AS . basic_literal

    INT      shift, and go to state 135
    DOUBLE   shift, and go to state 136
    STRING   shift, and go to state 137
    BOOLEAN  shift, and go to state 138

    basic_literal  go to state 405


State 372

   76 decl_stmt_single_line: DIM var_name_singleline '=' . expr_singleline
   78                      | DIM var_name_singleline '=' . NEW basic_literal '(' ')' '{' expr_list '}'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    NEW            shift, and go to state 276
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 278
    basic_literal_value  go to state 72


State 373

  109 if_stmt_single_line: IF expr_singleline THEN . single_line_stmt
  110                    | IF expr_singleline THEN . single_line_stmt ELSE single_line_stmt

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    CONST          shift, and go to state 281
    DIM            shift, and go to state 282
    IF             shift, and go to state 283
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    single_line_stmt       go to state 284
    decl_stmt_single_line  go to state 123
    if_stmt_single_line    go to state 129
    expr_singleline        go to state 286
    basic_literal_value    go to state 72


State 374

  110 if_stmt_single_line: IF expr_singleline THEN single_line_stmt ELSE single_line_stmt .

    $default  reduce using rule 110 (if_stmt_single_line)


State 375

   98 if_stmt_multi_line: IF expr_singleline THEN stmt_ends stmt_list END . IF

    IF  shift, and go to state 406


State 376

  105 elseif_list: ELSEIF . expr_multiline THEN stmt_list
  106            | ELSEIF . expr_singleline THEN stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 407
    expr_multiline       go to state 408
    basic_literal_value  go to state 72


State 377

  100 if_stmt_multi_line: IF expr_singleline THEN stmt_ends stmt_list ELSE . stmt_list END IF

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 409
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 378

  102 if_stmt_multi_line: IF expr_singleline THEN stmt_ends stmt_list elseif_list . END IF
  104                   | IF expr_singleline THEN stmt_ends stmt_list elseif_list . ELSE stmt_list END IF
  107 elseif_list: elseif_list . ELSEIF expr_multiline THEN stmt_list
  108            | elseif_list . ELSEIF expr_singleline THEN stmt_list

    END     shift, and go to state 410
    ELSEIF  shift, and go to state 411
    ELSE    shift, and go to state 412


State 379

   97 if_stmt_multi_line: IF expr_multiline THEN stmt_ends stmt_list END . IF

    IF  shift, and go to state 413


State 380

   99 if_stmt_multi_line: IF expr_multiline THEN stmt_ends stmt_list ELSE . stmt_list END IF

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 414
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 381

  101 if_stmt_multi_line: IF expr_multiline THEN stmt_ends stmt_list elseif_list . END IF
  103                   | IF expr_multiline THEN stmt_ends stmt_list elseif_list . ELSE stmt_list END IF
  107 elseif_list: elseif_list . ELSEIF expr_multiline THEN stmt_list
  108            | elseif_list . ELSEIF expr_singleline THEN stmt_list

    END     shift, and go to state 415
    ELSEIF  shift, and go to state 411
    ELSE    shift, and go to state 416


State 382

  117 case_stmt: CASE IS . expr_multiline stmt_ends stmt_list
  118          | CASE IS . expr_singleline stmt_ends stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 417
    expr_multiline       go to state 418
    basic_literal_value  go to state 72


State 383

  123 case_stmt: CASE ELSE . stmt_ends stmt_list

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 419


State 384

  116 case_stmt: CASE expr_singleline . stmt_ends stmt_list
  121          | CASE expr_singleline . TO expr_multiline stmt_ends stmt_list
  122          | CASE expr_singleline . TO expr_singleline stmt_ends stmt_list
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  143 expr_multiline: expr_singleline . '+' END_OF_LINE expr_singleline
  144               | expr_singleline . '-' END_OF_LINE expr_singleline
  145               | expr_singleline . '*' END_OF_LINE expr_singleline
  146               | expr_singleline . '/' END_OF_LINE expr_singleline
  147               | expr_singleline . INT_DIV END_OF_LINE expr_singleline
  148               | expr_singleline . '=' END_OF_LINE expr_singleline
  149               | expr_singleline . '<' END_OF_LINE expr_singleline
  150               | expr_singleline . '>' END_OF_LINE expr_singleline
  151               | expr_singleline . '^' END_OF_LINE expr_singleline
  152               | expr_singleline . NOT_EQUAL END_OF_LINE expr_singleline
  153               | expr_singleline . LESS_OR_EQUAL END_OF_LINE expr_singleline
  154               | expr_singleline . MORE_OR_EQUAL END_OF_LINE expr_singleline
  155               | expr_singleline . '&' END_OF_LINE expr_singleline

    TO             shift, and go to state 420
    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 197
    '*'            shift, and go to state 198
    '/'            shift, and go to state 199
    INT_DIV        shift, and go to state 200
    '+'            shift, and go to state 201
    '-'            shift, and go to state 202
    '='            shift, and go to state 203
    NOT_EQUAL      shift, and go to state 204
    LESS_OR_EQUAL  shift, and go to state 205
    MORE_OR_EQUAL  shift, and go to state 206
    '>'            shift, and go to state 207
    '<'            shift, and go to state 208
    '&'            shift, and go to state 209

    stmt_ends  go to state 421


State 385

  115 case_stmt: CASE expr_multiline . stmt_ends stmt_list
  119          | CASE expr_multiline . TO expr_multiline stmt_ends stmt_list
  120          | CASE expr_multiline . TO expr_singleline stmt_ends stmt_list

    TO           shift, and go to state 422
    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 423


State 386

  111 select_stmt: SELECT CASE expr_singleline stmt_ends case_list END . SELECT

    SELECT  shift, and go to state 424


State 387

  114 case_list: case_list case_stmt .

    $default  reduce using rule 114 (case_list)


State 388

  112 select_stmt: SELECT CASE expr_multiline stmt_ends case_list END . SELECT

    SELECT  shift, and go to state 425


State 389

   94 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value . TO basic_literal_value stmt_ends stmt_list NEXT
   95              | FOR IDENTIFIER AS basic_literal '=' basic_literal_value . TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT

    TO  shift, and go to state 426


State 390

   96 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN . IDENTIFIER stmt_ends stmt_list NEXT

    IDENTIFIER  shift, and go to state 427


State 391

   20 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_singleline stmt_ends END FUNCTION .

    $default  reduce using rule 20 (function)


State 392

   21 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_multiline stmt_ends END FUNCTION .

    $default  reduce using rule 21 (function)


State 393

   31 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB .

    $default  reduce using rule 31 (sub_bloc)


State 394

   23 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_singleline stmt_ends END FUNCTION .

    $default  reduce using rule 23 (function)


State 395

   24 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr_multiline stmt_ends END FUNCTION .

    $default  reduce using rule 24 (function)


State 396

   26 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_singleline stmt_ends END . FUNCTION

    FUNCTION  shift, and go to state 428


State 397

   27 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_multiline stmt_ends END . FUNCTION

    FUNCTION  shift, and go to state 429


State 398

   67 decl_stmt: CONST var_name AS basic_literal '=' END_OF_LINE expr_multiline .

    $default  reduce using rule 67 (decl_stmt)


State 399

   68 decl_stmt: CONST var_name_singleline AS basic_literal '=' END_OF_LINE expr_multiline .

    $default  reduce using rule 68 (decl_stmt)


State 400

   69 decl_stmt: DIM var_name AS basic_literal '=' END_OF_LINE expr_multiline .

    $default  reduce using rule 69 (decl_stmt)


State 401

   70 decl_stmt: DIM var_name_singleline AS basic_literal '=' END_OF_LINE expr_multiline .

    $default  reduce using rule 70 (decl_stmt)


State 402

   78 decl_stmt_single_line: DIM var_name_singleline '=' NEW basic_literal '(' ')' . '{' expr_list '}'

    '{'  shift, and go to state 430


State 403

   80 var_name_singleline: IDENTIFIER '(' expr_singleline . ')'
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline

    '^'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    INT_DIV        shift, and go to state 94
    '+'            shift, and go to state 95
    '-'            shift, and go to state 96
    '='            shift, and go to state 97
    NOT_EQUAL      shift, and go to state 98
    LESS_OR_EQUAL  shift, and go to state 99
    MORE_OR_EQUAL  shift, and go to state 100
    '>'            shift, and go to state 101
    '<'            shift, and go to state 102
    '&'            shift, and go to state 103
    ')'            shift, and go to state 322


State 404

   73 decl_stmt_single_line: CONST var_name_singleline AS basic_literal . '=' expr_singleline

    '='  shift, and go to state 431


State 405

   74 decl_stmt_single_line: DIM var_name_singleline AS basic_literal . '=' expr_singleline
   75                      | DIM var_name_singleline AS basic_literal .

    '='  shift, and go to state 432

    $default  reduce using rule 75 (decl_stmt_single_line)


State 406

   98 if_stmt_multi_line: IF expr_singleline THEN stmt_ends stmt_list END IF .

    $default  reduce using rule 98 (if_stmt_multi_line)


State 407

  106 elseif_list: ELSEIF expr_singleline . THEN stmt_list
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  143 expr_multiline: expr_singleline . '+' END_OF_LINE expr_singleline
  144               | expr_singleline . '-' END_OF_LINE expr_singleline
  145               | expr_singleline . '*' END_OF_LINE expr_singleline
  146               | expr_singleline . '/' END_OF_LINE expr_singleline
  147               | expr_singleline . INT_DIV END_OF_LINE expr_singleline
  148               | expr_singleline . '=' END_OF_LINE expr_singleline
  149               | expr_singleline . '<' END_OF_LINE expr_singleline
  150               | expr_singleline . '>' END_OF_LINE expr_singleline
  151               | expr_singleline . '^' END_OF_LINE expr_singleline
  152               | expr_singleline . NOT_EQUAL END_OF_LINE expr_singleline
  153               | expr_singleline . LESS_OR_EQUAL END_OF_LINE expr_singleline
  154               | expr_singleline . MORE_OR_EQUAL END_OF_LINE expr_singleline
  155               | expr_singleline . '&' END_OF_LINE expr_singleline

    '^'            shift, and go to state 197
    '*'            shift, and go to state 198
    '/'            shift, and go to state 199
    INT_DIV        shift, and go to state 200
    '+'            shift, and go to state 201
    '-'            shift, and go to state 202
    '='            shift, and go to state 203
    NOT_EQUAL      shift, and go to state 204
    LESS_OR_EQUAL  shift, and go to state 205
    MORE_OR_EQUAL  shift, and go to state 206
    '>'            shift, and go to state 207
    '<'            shift, and go to state 208
    '&'            shift, and go to state 209
    THEN           shift, and go to state 433


State 408

  105 elseif_list: ELSEIF expr_multiline . THEN stmt_list

    THEN  shift, and go to state 434


State 409

   51 stmt_list: stmt_list . stmt
  100 if_stmt_multi_line: IF expr_singleline THEN stmt_ends stmt_list ELSE stmt_list . END IF

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    END            shift, and go to state 435
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 410

  102 if_stmt_multi_line: IF expr_singleline THEN stmt_ends stmt_list elseif_list END . IF

    IF  shift, and go to state 436


State 411

  107 elseif_list: elseif_list ELSEIF . expr_multiline THEN stmt_list
  108            | elseif_list ELSEIF . expr_singleline THEN stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 437
    expr_multiline       go to state 438
    basic_literal_value  go to state 72


State 412

  104 if_stmt_multi_line: IF expr_singleline THEN stmt_ends stmt_list elseif_list ELSE . stmt_list END IF

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 439
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 413

   97 if_stmt_multi_line: IF expr_multiline THEN stmt_ends stmt_list END IF .

    $default  reduce using rule 97 (if_stmt_multi_line)


State 414

   51 stmt_list: stmt_list . stmt
   99 if_stmt_multi_line: IF expr_multiline THEN stmt_ends stmt_list ELSE stmt_list . END IF

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    END            shift, and go to state 440
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 415

  101 if_stmt_multi_line: IF expr_multiline THEN stmt_ends stmt_list elseif_list END . IF

    IF  shift, and go to state 441


State 416

  103 if_stmt_multi_line: IF expr_multiline THEN stmt_ends stmt_list elseif_list ELSE . stmt_list END IF

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 442
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 417

  118 case_stmt: CASE IS expr_singleline . stmt_ends stmt_list
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  143 expr_multiline: expr_singleline . '+' END_OF_LINE expr_singleline
  144               | expr_singleline . '-' END_OF_LINE expr_singleline
  145               | expr_singleline . '*' END_OF_LINE expr_singleline
  146               | expr_singleline . '/' END_OF_LINE expr_singleline
  147               | expr_singleline . INT_DIV END_OF_LINE expr_singleline
  148               | expr_singleline . '=' END_OF_LINE expr_singleline
  149               | expr_singleline . '<' END_OF_LINE expr_singleline
  150               | expr_singleline . '>' END_OF_LINE expr_singleline
  151               | expr_singleline . '^' END_OF_LINE expr_singleline
  152               | expr_singleline . NOT_EQUAL END_OF_LINE expr_singleline
  153               | expr_singleline . LESS_OR_EQUAL END_OF_LINE expr_singleline
  154               | expr_singleline . MORE_OR_EQUAL END_OF_LINE expr_singleline
  155               | expr_singleline . '&' END_OF_LINE expr_singleline

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 197
    '*'            shift, and go to state 198
    '/'            shift, and go to state 199
    INT_DIV        shift, and go to state 200
    '+'            shift, and go to state 201
    '-'            shift, and go to state 202
    '='            shift, and go to state 203
    NOT_EQUAL      shift, and go to state 204
    LESS_OR_EQUAL  shift, and go to state 205
    MORE_OR_EQUAL  shift, and go to state 206
    '>'            shift, and go to state 207
    '<'            shift, and go to state 208
    '&'            shift, and go to state 209

    stmt_ends  go to state 443


State 418

  117 case_stmt: CASE IS expr_multiline . stmt_ends stmt_list

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 444


State 419

   66 stmt_ends: stmt_ends . END_OF_LINE
  123 case_stmt: CASE ELSE stmt_ends . stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 445
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 420

  121 case_stmt: CASE expr_singleline TO . expr_multiline stmt_ends stmt_list
  122          | CASE expr_singleline TO . expr_singleline stmt_ends stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 446
    expr_multiline       go to state 447
    basic_literal_value  go to state 72


State 421

   66 stmt_ends: stmt_ends . END_OF_LINE
  116 case_stmt: CASE expr_singleline stmt_ends . stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 448
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 422

  119 case_stmt: CASE expr_multiline TO . expr_multiline stmt_ends stmt_list
  120          | CASE expr_multiline TO . expr_singleline stmt_ends stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    expr_singleline      go to state 449
    expr_multiline       go to state 450
    basic_literal_value  go to state 72


State 423

   66 stmt_ends: stmt_ends . END_OF_LINE
  115 case_stmt: CASE expr_multiline stmt_ends . stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 451
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 424

  111 select_stmt: SELECT CASE expr_singleline stmt_ends case_list END SELECT .

    $default  reduce using rule 111 (select_stmt)


State 425

  112 select_stmt: SELECT CASE expr_multiline stmt_ends case_list END SELECT .

    $default  reduce using rule 112 (select_stmt)


State 426

   94 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO . basic_literal_value stmt_ends stmt_list NEXT
   95              | FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO . basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64

    basic_literal_value  go to state 452


State 427

   96 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER . stmt_ends stmt_list NEXT

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 453


State 428

   26 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_singleline stmt_ends END FUNCTION .

    $default  reduce using rule 26 (function)


State 429

   27 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr_multiline stmt_ends END FUNCTION .

    $default  reduce using rule 27 (function)


State 430

   78 decl_stmt_single_line: DIM var_name_singleline '=' NEW basic_literal '(' ')' '{' . expr_list '}'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 71
    basic_literal_value  go to state 72
    expr_list            go to state 454


State 431

   73 decl_stmt_single_line: CONST var_name_singleline AS basic_literal '=' . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 362
    basic_literal_value  go to state 72


State 432

   74 decl_stmt_single_line: DIM var_name_singleline AS basic_literal '=' . expr_singleline

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    expr_singleline      go to state 365
    basic_literal_value  go to state 72


State 433

  106 elseif_list: ELSEIF expr_singleline THEN . stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 455
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 434

  105 elseif_list: ELSEIF expr_multiline THEN . stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 456
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 435

  100 if_stmt_multi_line: IF expr_singleline THEN stmt_ends stmt_list ELSE stmt_list END . IF

    IF  shift, and go to state 457


State 436

  102 if_stmt_multi_line: IF expr_singleline THEN stmt_ends stmt_list elseif_list END IF .

    $default  reduce using rule 102 (if_stmt_multi_line)


State 437

  108 elseif_list: elseif_list ELSEIF expr_singleline . THEN stmt_list
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  143 expr_multiline: expr_singleline . '+' END_OF_LINE expr_singleline
  144               | expr_singleline . '-' END_OF_LINE expr_singleline
  145               | expr_singleline . '*' END_OF_LINE expr_singleline
  146               | expr_singleline . '/' END_OF_LINE expr_singleline
  147               | expr_singleline . INT_DIV END_OF_LINE expr_singleline
  148               | expr_singleline . '=' END_OF_LINE expr_singleline
  149               | expr_singleline . '<' END_OF_LINE expr_singleline
  150               | expr_singleline . '>' END_OF_LINE expr_singleline
  151               | expr_singleline . '^' END_OF_LINE expr_singleline
  152               | expr_singleline . NOT_EQUAL END_OF_LINE expr_singleline
  153               | expr_singleline . LESS_OR_EQUAL END_OF_LINE expr_singleline
  154               | expr_singleline . MORE_OR_EQUAL END_OF_LINE expr_singleline
  155               | expr_singleline . '&' END_OF_LINE expr_singleline

    '^'            shift, and go to state 197
    '*'            shift, and go to state 198
    '/'            shift, and go to state 199
    INT_DIV        shift, and go to state 200
    '+'            shift, and go to state 201
    '-'            shift, and go to state 202
    '='            shift, and go to state 203
    NOT_EQUAL      shift, and go to state 204
    LESS_OR_EQUAL  shift, and go to state 205
    MORE_OR_EQUAL  shift, and go to state 206
    '>'            shift, and go to state 207
    '<'            shift, and go to state 208
    '&'            shift, and go to state 209
    THEN           shift, and go to state 458


State 438

  107 elseif_list: elseif_list ELSEIF expr_multiline . THEN stmt_list

    THEN  shift, and go to state 459


State 439

   51 stmt_list: stmt_list . stmt
  104 if_stmt_multi_line: IF expr_singleline THEN stmt_ends stmt_list elseif_list ELSE stmt_list . END IF

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    END            shift, and go to state 460
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 440

   99 if_stmt_multi_line: IF expr_multiline THEN stmt_ends stmt_list ELSE stmt_list END . IF

    IF  shift, and go to state 461


State 441

  101 if_stmt_multi_line: IF expr_multiline THEN stmt_ends stmt_list elseif_list END IF .

    $default  reduce using rule 101 (if_stmt_multi_line)


State 442

   51 stmt_list: stmt_list . stmt
  103 if_stmt_multi_line: IF expr_multiline THEN stmt_ends stmt_list elseif_list ELSE stmt_list . END IF

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    END            shift, and go to state 462
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 443

   66 stmt_ends: stmt_ends . END_OF_LINE
  118 case_stmt: CASE IS expr_singleline stmt_ends . stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 463
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 444

   66 stmt_ends: stmt_ends . END_OF_LINE
  117 case_stmt: CASE IS expr_multiline stmt_ends . stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 464
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 445

   51 stmt_list: stmt_list . stmt
  123 case_stmt: CASE ELSE stmt_ends stmt_list .

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    $default  reduce using rule 123 (case_stmt)

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 446

  122 case_stmt: CASE expr_singleline TO expr_singleline . stmt_ends stmt_list
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  143 expr_multiline: expr_singleline . '+' END_OF_LINE expr_singleline
  144               | expr_singleline . '-' END_OF_LINE expr_singleline
  145               | expr_singleline . '*' END_OF_LINE expr_singleline
  146               | expr_singleline . '/' END_OF_LINE expr_singleline
  147               | expr_singleline . INT_DIV END_OF_LINE expr_singleline
  148               | expr_singleline . '=' END_OF_LINE expr_singleline
  149               | expr_singleline . '<' END_OF_LINE expr_singleline
  150               | expr_singleline . '>' END_OF_LINE expr_singleline
  151               | expr_singleline . '^' END_OF_LINE expr_singleline
  152               | expr_singleline . NOT_EQUAL END_OF_LINE expr_singleline
  153               | expr_singleline . LESS_OR_EQUAL END_OF_LINE expr_singleline
  154               | expr_singleline . MORE_OR_EQUAL END_OF_LINE expr_singleline
  155               | expr_singleline . '&' END_OF_LINE expr_singleline

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 197
    '*'            shift, and go to state 198
    '/'            shift, and go to state 199
    INT_DIV        shift, and go to state 200
    '+'            shift, and go to state 201
    '-'            shift, and go to state 202
    '='            shift, and go to state 203
    NOT_EQUAL      shift, and go to state 204
    LESS_OR_EQUAL  shift, and go to state 205
    MORE_OR_EQUAL  shift, and go to state 206
    '>'            shift, and go to state 207
    '<'            shift, and go to state 208
    '&'            shift, and go to state 209

    stmt_ends  go to state 465


State 447

  121 case_stmt: CASE expr_singleline TO expr_multiline . stmt_ends stmt_list

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 466


State 448

   51 stmt_list: stmt_list . stmt
  116 case_stmt: CASE expr_singleline stmt_ends stmt_list .

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    $default  reduce using rule 116 (case_stmt)

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 449

  120 case_stmt: CASE expr_multiline TO expr_singleline . stmt_ends stmt_list
  127 expr_singleline: expr_singleline . '+' expr_singleline
  128                | expr_singleline . '-' expr_singleline
  129                | expr_singleline . '*' expr_singleline
  130                | expr_singleline . '/' expr_singleline
  131                | expr_singleline . INT_DIV expr_singleline
  132                | expr_singleline . '=' expr_singleline
  133                | expr_singleline . '<' expr_singleline
  134                | expr_singleline . '>' expr_singleline
  135                | expr_singleline . '^' expr_singleline
  136                | expr_singleline . NOT_EQUAL expr_singleline
  137                | expr_singleline . LESS_OR_EQUAL expr_singleline
  138                | expr_singleline . MORE_OR_EQUAL expr_singleline
  139                | expr_singleline . '&' expr_singleline
  143 expr_multiline: expr_singleline . '+' END_OF_LINE expr_singleline
  144               | expr_singleline . '-' END_OF_LINE expr_singleline
  145               | expr_singleline . '*' END_OF_LINE expr_singleline
  146               | expr_singleline . '/' END_OF_LINE expr_singleline
  147               | expr_singleline . INT_DIV END_OF_LINE expr_singleline
  148               | expr_singleline . '=' END_OF_LINE expr_singleline
  149               | expr_singleline . '<' END_OF_LINE expr_singleline
  150               | expr_singleline . '>' END_OF_LINE expr_singleline
  151               | expr_singleline . '^' END_OF_LINE expr_singleline
  152               | expr_singleline . NOT_EQUAL END_OF_LINE expr_singleline
  153               | expr_singleline . LESS_OR_EQUAL END_OF_LINE expr_singleline
  154               | expr_singleline . MORE_OR_EQUAL END_OF_LINE expr_singleline
  155               | expr_singleline . '&' END_OF_LINE expr_singleline

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 197
    '*'            shift, and go to state 198
    '/'            shift, and go to state 199
    INT_DIV        shift, and go to state 200
    '+'            shift, and go to state 201
    '-'            shift, and go to state 202
    '='            shift, and go to state 203
    NOT_EQUAL      shift, and go to state 204
    LESS_OR_EQUAL  shift, and go to state 205
    MORE_OR_EQUAL  shift, and go to state 206
    '>'            shift, and go to state 207
    '<'            shift, and go to state 208
    '&'            shift, and go to state 209

    stmt_ends  go to state 467


State 450

  119 case_stmt: CASE expr_multiline TO expr_multiline . stmt_ends stmt_list

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 468


State 451

   51 stmt_list: stmt_list . stmt
  115 case_stmt: CASE expr_multiline stmt_ends stmt_list .

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    $default  reduce using rule 115 (case_stmt)

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 452

   94 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value . stmt_ends stmt_list NEXT
   95              | FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value . STEP basic_literal_value stmt_ends stmt_list NEXT

    STEP         shift, and go to state 469
    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 470


State 453

   66 stmt_ends: stmt_ends . END_OF_LINE
   96 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends . stmt_list NEXT

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 471
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 454

   78 decl_stmt_single_line: DIM var_name_singleline '=' NEW basic_literal '(' ')' '{' expr_list . '}'
  176 expr_list: expr_list . ',' expr_singleline

    ','  shift, and go to state 106
    '}'  shift, and go to state 472


State 455

   51 stmt_list: stmt_list . stmt
  106 elseif_list: ELSEIF expr_singleline THEN stmt_list .

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    $default  reduce using rule 106 (elseif_list)

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 456

   51 stmt_list: stmt_list . stmt
  105 elseif_list: ELSEIF expr_multiline THEN stmt_list .

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    $default  reduce using rule 105 (elseif_list)

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 457

  100 if_stmt_multi_line: IF expr_singleline THEN stmt_ends stmt_list ELSE stmt_list END IF .

    $default  reduce using rule 100 (if_stmt_multi_line)


State 458

  108 elseif_list: elseif_list ELSEIF expr_singleline THEN . stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 473
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 459

  107 elseif_list: elseif_list ELSEIF expr_multiline THEN . stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 474
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 460

  104 if_stmt_multi_line: IF expr_singleline THEN stmt_ends stmt_list elseif_list ELSE stmt_list END . IF

    IF  shift, and go to state 475


State 461

   99 if_stmt_multi_line: IF expr_multiline THEN stmt_ends stmt_list ELSE stmt_list END IF .

    $default  reduce using rule 99 (if_stmt_multi_line)


State 462

  103 if_stmt_multi_line: IF expr_multiline THEN stmt_ends stmt_list elseif_list ELSE stmt_list END . IF

    IF  shift, and go to state 476


State 463

   51 stmt_list: stmt_list . stmt
  118 case_stmt: CASE IS expr_singleline stmt_ends stmt_list .

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    $default  reduce using rule 118 (case_stmt)

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 464

   51 stmt_list: stmt_list . stmt
  117 case_stmt: CASE IS expr_multiline stmt_ends stmt_list .

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    $default  reduce using rule 117 (case_stmt)

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 465

   66 stmt_ends: stmt_ends . END_OF_LINE
  122 case_stmt: CASE expr_singleline TO expr_singleline stmt_ends . stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 477
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 466

   66 stmt_ends: stmt_ends . END_OF_LINE
  121 case_stmt: CASE expr_singleline TO expr_multiline stmt_ends . stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 478
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 467

   66 stmt_ends: stmt_ends . END_OF_LINE
  120 case_stmt: CASE expr_multiline TO expr_singleline stmt_ends . stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 479
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 468

   66 stmt_ends: stmt_ends . END_OF_LINE
  119 case_stmt: CASE expr_multiline TO expr_multiline stmt_ends . stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 480
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 469

   95 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value STEP . basic_literal_value stmt_ends stmt_list NEXT

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64

    basic_literal_value  go to state 481


State 470

   66 stmt_ends: stmt_ends . END_OF_LINE
   94 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value stmt_ends . stmt_list NEXT

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 482
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 471

   51 stmt_list: stmt_list . stmt
   96 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list . NEXT

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    NEXT           shift, and go to state 483
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 472

   78 decl_stmt_single_line: DIM var_name_singleline '=' NEW basic_literal '(' ')' '{' expr_list '}' .

    $default  reduce using rule 78 (decl_stmt_single_line)


State 473

   51 stmt_list: stmt_list . stmt
  108 elseif_list: elseif_list ELSEIF expr_singleline THEN stmt_list .

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    $default  reduce using rule 108 (elseif_list)

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 474

   51 stmt_list: stmt_list . stmt
  107 elseif_list: elseif_list ELSEIF expr_multiline THEN stmt_list .

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    $default  reduce using rule 107 (elseif_list)

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 475

  104 if_stmt_multi_line: IF expr_singleline THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF .

    $default  reduce using rule 104 (if_stmt_multi_line)


State 476

  103 if_stmt_multi_line: IF expr_multiline THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF .

    $default  reduce using rule 103 (if_stmt_multi_line)


State 477

   51 stmt_list: stmt_list . stmt
  122 case_stmt: CASE expr_singleline TO expr_singleline stmt_ends stmt_list .

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    $default  reduce using rule 122 (case_stmt)

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 478

   51 stmt_list: stmt_list . stmt
  121 case_stmt: CASE expr_singleline TO expr_multiline stmt_ends stmt_list .

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    $default  reduce using rule 121 (case_stmt)

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 479

   51 stmt_list: stmt_list . stmt
  120 case_stmt: CASE expr_multiline TO expr_singleline stmt_ends stmt_list .

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    $default  reduce using rule 120 (case_stmt)

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 480

   51 stmt_list: stmt_list . stmt
  119 case_stmt: CASE expr_multiline TO expr_multiline stmt_ends stmt_list .

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    $default  reduce using rule 119 (case_stmt)

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 481

   95 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value STEP basic_literal_value . stmt_ends stmt_list NEXT

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 484


State 482

   51 stmt_list: stmt_list . stmt
   94 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value stmt_ends stmt_list . NEXT

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    NEXT           shift, and go to state 485
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 483

   96 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT .

    $default  reduce using rule 96 (for_each_loop_stmt)


State 484

   66 stmt_ends: stmt_ends . END_OF_LINE
   95 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends . stmt_list NEXT

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    END_OF_LINE    shift, and go to state 24
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt_list              go to state 486
    stmt                   go to state 119
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 485

   94 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value stmt_ends stmt_list NEXT .

    $default  reduce using rule 94 (for_loop_stmt)


State 486

   51 stmt_list: stmt_list . stmt
   95 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list . NEXT

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 107
    CONST          shift, and go to state 109
    DIM            shift, and go to state 110
    WHILE          shift, and go to state 111
    IF             shift, and go to state 112
    SELECT         shift, and go to state 113
    DO             shift, and go to state 115
    FOR            shift, and go to state 116
    NEXT           shift, and go to state 487
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 117

    stmt                   go to state 191
    single_line_stmt       go to state 120
    multi_line_stmt        go to state 121
    decl_stmt              go to state 122
    decl_stmt_single_line  go to state 123
    while_stmt             go to state 124
    do_loop_stmt           go to state 125
    for_loop_stmt          go to state 126
    for_each_loop_stmt     go to state 127
    if_stmt_multi_line     go to state 128
    if_stmt_single_line    go to state 129
    select_stmt            go to state 130
    expr_singleline        go to state 131
    expr_multiline         go to state 132
    basic_literal_value    go to state 72


State 487

   95 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT .

    $default  reduce using rule 95 (for_loop_stmt)
