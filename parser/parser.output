Terminals unused in grammar

    IDENTIFIER_VALUE
    ENDL
    OF
    ASSIGN_CONSTRUCT
    ASSIGN_MULT
    ASSIGN_ORD_DIV
    ASSIGN_INT_DIV
    ASSIGN_ADD
    ASSIGN_SUB
    ASSIGN_LSHIFT
    ASSIGN_RSHIFT
    ASSIGN_CONCAT


Grammar

    0 $accept: root $end

    1 root: program_items_list

    2 program_items_list: %empty
    3                   | program_items_list_not_empty

    4 program_items_list_not_empty: program_item
    5                             | program_items_list_not_empty program_item

    6 program_item: module
    7             | IMPORTS IDENTIFIER stmt_ends

    8 module: MODULE IDENTIFIER stmt_ends END MODULE
    9       | MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE
   10       | access MODULE IDENTIFIER stmt_ends END MODULE
   11       | access MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE

   12 functions_and_sub_list: function_or_sub
   13                       | functions_and_sub_list stmt_ends function_or_sub

   14 function_or_sub: function
   15                | sub_bloc

   16 function: FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION
   17         | FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION
   18         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   19         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION
   20         | access FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION
   21         | access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION
   22         | access FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   23         | access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   25         | SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB
   26         | access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   27         | access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

   28 parameterlist_or_empty: %empty
   29                       | parameterlist_with_type
   30                       | END_OF_LINE parameterlist_with_type END_OF_LINE
   31                       | END_OF_LINE parameterlist_with_type
   32                       | parameterlist_with_type END_OF_LINE
   33                       | parameterlist_without_type
   34                       | END_OF_LINE parameterlist_without_type END_OF_LINE
   35                       | parameterlist_without_type END_OF_LINE
   36                       | END_OF_LINE parameterlist_without_type

   37 parameterlist_with_type: parameter_with_type
   38                        | parameterlist_with_type ',' parameter_with_type
   39                        | parameterlist_with_type ',' END_OF_LINE parameter_with_type

   40 parameterlist_without_type: parameter_without_type
   41                           | parameterlist_without_type ',' parameter_without_type
   42                           | parameterlist_without_type ',' END_OF_LINE parameter_without_type

   43 parameter_with_type: IDENTIFIER AS basic_literal
   44                    | IDENTIFIER AS basic_literal '(' ')'

   45 parameter_without_type: IDENTIFIER

   46 stmt_list: stmt
   47          | stmt_list stmt

   48 stmt: multi_line_stmt
   49     | single_line_stmt stmt_ends

   50 single_line_stmt: if_stmt_single_line
   51                 | decl_stmt_single_line
   52                 | function_call_singleline

   53 multi_line_stmt: decl_stmt stmt_ends
   54                | while_stmt stmt_ends
   55                | do_loop_stmt
   56                | for_loop_stmt
   57                | for_each_loop_stmt
   58                | select_stmt stmt_ends
   59                | if_stmt_multi_line stmt_ends
   60                | function_call_multiline

   61 stmt_ends: END_OF_LINE
   62          | stmt_ends END_OF_LINE

   63 decl_stmt: CONST var_name AS basic_literal '=' END_OF_LINE expr
   64          | DIM var_name AS basic_literal '=' END_OF_LINE expr
   65          | DIM var_name '=' END_OF_LINE expr

   66 decl_stmt_single_line: CONST var_name AS basic_literal '=' expr
   67                      | DIM var_name AS basic_literal '=' expr
   68                      | DIM var_name AS basic_literal
   69                      | DIM var_name '=' expr
   70                      | DIM var_name
   71                      | DIM var_name '=' NEW basic_literal '(' ')' '{' expr_list '}'

   72 var_name: IDENTIFIER '(' expr ')'
   73         | IDENTIFIER

   74 access: PUBLIC
   75       | PROTECTED
   76       | FRIEND
   77       | PRIVATE
   78       | PROTECTED FRIEND
   79       | PRIVATE FRIEND

   80 while_stmt: WHILE expr stmt_ends stmt_list END WHILE

   81 do_loop_stmt: DO do_loop_condition stmt_ends stmt_list LOOP
   82             | DO stmt_ends stmt_list LOOP do_loop_condition

   83 do_loop_condition: UNTIL expr
   84                  | WHILE expr

   85 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value stmt_ends stmt_list NEXT
   86              | FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT

   87 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

   88 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list END IF
   89                   | IF expr THEN stmt_ends stmt_list ELSE stmt_list END IF
   90                   | IF expr THEN stmt_ends stmt_list elseif_list END IF
   91                   | IF expr THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF

   92 elseif_list: ELSEIF expr THEN stmt_list
   93            | elseif_list ELSEIF expr THEN stmt_list

   94 if_stmt_single_line: IF expr THEN single_line_stmt
   95                    | IF expr THEN single_line_stmt ELSE single_line_stmt

   96 select_stmt: SELECT CASE expr stmt_ends case_list END SELECT

   97 case_list: case_stmt
   98          | case_list case_stmt

   99 case_stmt: CASE expr stmt_ends stmt_list
  100          | CASE IS expr stmt_ends stmt_list
  101          | CASE expr TO expr stmt_ends stmt_list
  102          | CASE ELSE stmt_ends stmt_list

  103 function_call_multiline: IDENTIFIER arguments_multiline

  104 function_call_singleline: IDENTIFIER arguments_singleline

  105 expr: basic_literal_value
  106     | function_call_singleline
  107     | '-' expr
  108     | '+' expr
  109     | expr '+' expr
  110     | expr '-' expr
  111     | expr '*' expr
  112     | expr '/' expr
  113     | expr INT_DIV expr
  114     | expr '=' expr
  115     | expr '<' expr
  116     | expr '>' expr
  117     | expr '^' expr
  118     | expr NOT_EQUAL expr
  119     | expr LESS_OR_EQUAL expr
  120     | expr MORE_OR_EQUAL expr
  121     | expr '&' expr
  122     | '(' expr ')'
  123     | function_call_multiline
  124     | IDENTIFIER

  125 basic_literal: INT
  126              | STRING
  127              | BOOLEAN
  128              | DOUBLE

  129 basic_literal_value: INT_VALUE
  130                    | STRING_VALUE
  131                    | BOOLEAN_VALUE
  132                    | DOUBLE_VALUE

  133 arguments_multiline: '(' END_OF_LINE expr_list ')'
  134                    | '(' END_OF_LINE expr_list END_OF_LINE ')'
  135                    | '(' expr_list END_OF_LINE ')'

  136 arguments_singleline: '(' expr_list ')'
  137                     | '(' ')'

  138 arguments: arguments_multiline
  139          | arguments_singleline

  140 expr_list: expr
  141          | expr_list ',' expr


Terminals, with rules where they appear

    $end (0) 0
    '&' (38) 121
    '(' (40) 24 25 26 27 44 71 72 122 133 134 135 136 137
    ')' (41) 24 25 26 27 44 71 72 122 133 134 135 136 137
    '*' (42) 111
    '+' (43) 108 109
    ',' (44) 38 39 41 42 141
    '-' (45) 107 110
    '/' (47) 112
    '<' (60) 115
    '=' (61) 63 64 65 66 67 69 71 85 86 114
    '>' (62) 116
    '^' (94) 117
    '{' (123) 71
    '}' (125) 71
    error (256)
    INT_VALUE <int_val> (258) 129
    DOUBLE_VALUE <double_val> (259) 132
    STRING_VALUE <str_val> (260) 130
    BOOLEAN_VALUE <bool_val> (261) 131
    IDENTIFIER_VALUE <id_name> (262)
    INT (263) 125
    DOUBLE (264) 128
    STRING (265) 126
    BOOLEAN (266) 127
    IDENTIFIER (267) 7 8 9 10 11 16 17 18 19 20 21 22 23 24 25 26 27 43 44 45 72 73 85 86 87 103 104 124
    ENDL (268)
    SUB (269) 24 25 26 27
    END (270) 8 9 10 11 16 17 18 19 20 21 22 23 24 25 26 27 80 88 89 90 91 96
    CONST (271) 63 66
    DIM (272) 64 65 67 68 69 70 71
    AS (273) 43 44 63 64 66 67 68 85 86 87
    WHILE (274) 80 84
    IF (275) 88 89 90 91 94 95
    NEW (276) 71
    ELSEIF (277) 92 93
    SELECT (278) 96
    CASE (279) 96 99 100 101 102
    IS (280) 100
    TO (281) 85 86 101
    IMPORTS (282) 7
    MODULE (283) 8 9 10 11
    FUNCTION (284) 16 17 18 19 20 21 22 23
    RETURN (285) 17 19 21 23
    DO (286) 81 82
    LOOP (287) 81 82
    UNTIL (288) 83
    FOR (289) 85 86 87
    NEXT (290) 85 86 87
    STEP (291) 86
    OF (292)
    IN (293) 87
    EACH (294) 87
    END_OF_LINE (295) 30 31 32 34 35 36 39 42 61 62 63 64 65 133 134 135
    UNARY_MINUS (296)
    UNARY_PLUS (297)
    ASSIGN_CONSTRUCT (298)
    ASSIGN_MULT (299)
    ASSIGN_ORD_DIV (300)
    ASSIGN_INT_DIV (301)
    ASSIGN_ADD (302)
    ASSIGN_SUB (303)
    ASSIGN_LSHIFT (304)
    ASSIGN_RSHIFT (305)
    ASSIGN_CONCAT (306)
    PRIVATE (307) 77 79
    PROTECTED (308) 75 78
    PUBLIC (309) 74
    FRIEND (310) 76 78 79
    INT_DIV (311) 113
    NOT_EQUAL (312) 118
    LESS_OR_EQUAL (313) 119
    MORE_OR_EQUAL (314) 120
    THEN (315) 88 89 90 91 92 93 94 95
    ELSE (316) 89 91 95 102


Nonterminals, with rules where they appear

    $accept (76)
        on left: 0
    root (77)
        on left: 1
        on right: 0
    program_items_list (78)
        on left: 2 3
        on right: 1
    program_items_list_not_empty (79)
        on left: 4 5
        on right: 3 5
    program_item (80)
        on left: 6 7
        on right: 4 5
    module (81)
        on left: 8 9 10 11
        on right: 6
    functions_and_sub_list (82)
        on left: 12 13
        on right: 9 11 13
    function_or_sub (83)
        on left: 14 15
        on right: 12 13
    function (84)
        on left: 16 17 18 19 20 21 22 23
        on right: 14
    sub_bloc (85)
        on left: 24 25 26 27
        on right: 15
    parameterlist_or_empty (86)
        on left: 28 29 30 31 32 33 34 35 36
        on right: 24 25 26 27
    parameterlist_with_type (87)
        on left: 37 38 39
        on right: 29 30 31 32 38 39
    parameterlist_without_type (88)
        on left: 40 41 42
        on right: 33 34 35 36 41 42
    parameter_with_type (89)
        on left: 43 44
        on right: 37 38 39
    parameter_without_type (90)
        on left: 45
        on right: 40 41 42
    stmt_list (91)
        on left: 46 47
        on right: 18 19 22 23 25 27 47 80 81 82 85 86 87 88 89 90 91 92 93 99 100 101 102
    stmt (92)
        on left: 48 49
        on right: 46 47
    single_line_stmt (93)
        on left: 50 51 52
        on right: 49 94 95
    multi_line_stmt (94)
        on left: 53 54 55 56 57 58 59 60
        on right: 48
    stmt_ends (95)
        on left: 61 62
        on right: 7 8 9 10 11 13 16 17 18 19 20 21 22 23 24 25 26 27 49 53 54 58 59 62 80 81 82 85 86 87 88 89 90 91 96 99 100 101 102
    decl_stmt (96)
        on left: 63 64 65
        on right: 53
    decl_stmt_single_line (97)
        on left: 66 67 68 69 70 71
        on right: 51
    var_name (98)
        on left: 72 73
        on right: 63 64 65 66 67 68 69 70 71
    access (99)
        on left: 74 75 76 77 78 79
        on right: 10 11 20 21 22 23 26 27
    while_stmt (100)
        on left: 80
        on right: 54
    do_loop_stmt (101)
        on left: 81 82
        on right: 55
    do_loop_condition (102)
        on left: 83 84
        on right: 81 82
    for_loop_stmt (103)
        on left: 85 86
        on right: 56
    for_each_loop_stmt (104)
        on left: 87
        on right: 57
    if_stmt_multi_line (105)
        on left: 88 89 90 91
        on right: 59
    elseif_list (106)
        on left: 92 93
        on right: 90 91 93
    if_stmt_single_line (107)
        on left: 94 95
        on right: 50
    select_stmt (108)
        on left: 96
        on right: 58
    case_list (109)
        on left: 97 98
        on right: 96 98
    case_stmt (110)
        on left: 99 100 101 102
        on right: 97 98
    function_call_multiline (111)
        on left: 103
        on right: 60 123
    function_call_singleline (112)
        on left: 104
        on right: 52 106
    expr (113)
        on left: 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124
        on right: 17 19 21 23 63 64 65 66 67 69 72 80 83 84 88 89 90 91 92 93 94 95 96 99 100 101 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 140 141
    basic_literal (114)
        on left: 125 126 127 128
        on right: 43 44 63 64 66 67 68 71 85 86 87
    basic_literal_value (115)
        on left: 129 130 131 132
        on right: 85 86 105
    arguments_multiline (116)
        on left: 133 134 135
        on right: 103 138
    arguments_singleline (117)
        on left: 136 137
        on right: 104 139
    arguments (118)
        on left: 138 139
        on right: 16 17 18 19 20 21 22 23
    expr_list (119)
        on left: 140 141
        on right: 71 133 134 135 136 141


State 0

    0 $accept: . root $end

    IMPORTS    shift, and go to state 1
    MODULE     shift, and go to state 2
    PRIVATE    shift, and go to state 3
    PROTECTED  shift, and go to state 4
    PUBLIC     shift, and go to state 5
    FRIEND     shift, and go to state 6

    $default  reduce using rule 2 (program_items_list)

    root                          go to state 7
    program_items_list            go to state 8
    program_items_list_not_empty  go to state 9
    program_item                  go to state 10
    module                        go to state 11
    access                        go to state 12


State 1

    7 program_item: IMPORTS . IDENTIFIER stmt_ends

    IDENTIFIER  shift, and go to state 13


State 2

    8 module: MODULE . IDENTIFIER stmt_ends END MODULE
    9       | MODULE . IDENTIFIER stmt_ends functions_and_sub_list END MODULE

    IDENTIFIER  shift, and go to state 14


State 3

   77 access: PRIVATE .
   79       | PRIVATE . FRIEND

    FRIEND  shift, and go to state 15

    $default  reduce using rule 77 (access)


State 4

   75 access: PROTECTED .
   78       | PROTECTED . FRIEND

    FRIEND  shift, and go to state 16

    $default  reduce using rule 75 (access)


State 5

   74 access: PUBLIC .

    $default  reduce using rule 74 (access)


State 6

   76 access: FRIEND .

    $default  reduce using rule 76 (access)


State 7

    0 $accept: root . $end

    $end  shift, and go to state 17


State 8

    1 root: program_items_list .

    $default  reduce using rule 1 (root)


State 9

    3 program_items_list: program_items_list_not_empty .
    5 program_items_list_not_empty: program_items_list_not_empty . program_item

    IMPORTS    shift, and go to state 1
    MODULE     shift, and go to state 2
    PRIVATE    shift, and go to state 3
    PROTECTED  shift, and go to state 4
    PUBLIC     shift, and go to state 5
    FRIEND     shift, and go to state 6

    $default  reduce using rule 3 (program_items_list)

    program_item  go to state 18
    module        go to state 11
    access        go to state 12


State 10

    4 program_items_list_not_empty: program_item .

    $default  reduce using rule 4 (program_items_list_not_empty)


State 11

    6 program_item: module .

    $default  reduce using rule 6 (program_item)


State 12

   10 module: access . MODULE IDENTIFIER stmt_ends END MODULE
   11       | access . MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE

    MODULE  shift, and go to state 19


State 13

    7 program_item: IMPORTS IDENTIFIER . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 21


State 14

    8 module: MODULE IDENTIFIER . stmt_ends END MODULE
    9       | MODULE IDENTIFIER . stmt_ends functions_and_sub_list END MODULE

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 22


State 15

   79 access: PRIVATE FRIEND .

    $default  reduce using rule 79 (access)


State 16

   78 access: PROTECTED FRIEND .

    $default  reduce using rule 78 (access)


State 17

    0 $accept: root $end .

    $default  accept


State 18

    5 program_items_list_not_empty: program_items_list_not_empty program_item .

    $default  reduce using rule 5 (program_items_list_not_empty)


State 19

   10 module: access MODULE . IDENTIFIER stmt_ends END MODULE
   11       | access MODULE . IDENTIFIER stmt_ends functions_and_sub_list END MODULE

    IDENTIFIER  shift, and go to state 23


State 20

   61 stmt_ends: END_OF_LINE .

    $default  reduce using rule 61 (stmt_ends)


State 21

    7 program_item: IMPORTS IDENTIFIER stmt_ends .
   62 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 7 (program_item)


State 22

    8 module: MODULE IDENTIFIER stmt_ends . END MODULE
    9       | MODULE IDENTIFIER stmt_ends . functions_and_sub_list END MODULE
   62 stmt_ends: stmt_ends . END_OF_LINE

    SUB          shift, and go to state 25
    END          shift, and go to state 26
    FUNCTION     shift, and go to state 27
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    functions_and_sub_list  go to state 28
    function_or_sub         go to state 29
    function                go to state 30
    sub_bloc                go to state 31
    access                  go to state 32


State 23

   10 module: access MODULE IDENTIFIER . stmt_ends END MODULE
   11       | access MODULE IDENTIFIER . stmt_ends functions_and_sub_list END MODULE

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 33


State 24

   62 stmt_ends: stmt_ends END_OF_LINE .

    $default  reduce using rule 62 (stmt_ends)


State 25

   24 sub_bloc: SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   25         | SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER  shift, and go to state 34


State 26

    8 module: MODULE IDENTIFIER stmt_ends END . MODULE

    MODULE  shift, and go to state 35


State 27

   16 function: FUNCTION . IDENTIFIER arguments stmt_ends END FUNCTION
   17         | FUNCTION . IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION
   18         | FUNCTION . IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   19         | FUNCTION . IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION

    IDENTIFIER  shift, and go to state 36


State 28

    9 module: MODULE IDENTIFIER stmt_ends functions_and_sub_list . END MODULE
   13 functions_and_sub_list: functions_and_sub_list . stmt_ends function_or_sub

    END          shift, and go to state 37
    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 38


State 29

   12 functions_and_sub_list: function_or_sub .

    $default  reduce using rule 12 (functions_and_sub_list)


State 30

   14 function_or_sub: function .

    $default  reduce using rule 14 (function_or_sub)


State 31

   15 function_or_sub: sub_bloc .

    $default  reduce using rule 15 (function_or_sub)


State 32

   20 function: access . FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION
   21         | access . FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION
   22         | access . FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   23         | access . FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION
   26 sub_bloc: access . SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   27         | access . SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    SUB       shift, and go to state 39
    FUNCTION  shift, and go to state 40


State 33

   10 module: access MODULE IDENTIFIER stmt_ends . END MODULE
   11       | access MODULE IDENTIFIER stmt_ends . functions_and_sub_list END MODULE
   62 stmt_ends: stmt_ends . END_OF_LINE

    SUB          shift, and go to state 25
    END          shift, and go to state 41
    FUNCTION     shift, and go to state 27
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    functions_and_sub_list  go to state 42
    function_or_sub         go to state 29
    function                go to state 30
    sub_bloc                go to state 31
    access                  go to state 32


State 34

   24 sub_bloc: SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends END SUB
   25         | SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    '('  shift, and go to state 43


State 35

    8 module: MODULE IDENTIFIER stmt_ends END MODULE .

    $default  reduce using rule 8 (module)


State 36

   16 function: FUNCTION IDENTIFIER . arguments stmt_ends END FUNCTION
   17         | FUNCTION IDENTIFIER . arguments stmt_ends RETURN expr END FUNCTION
   18         | FUNCTION IDENTIFIER . arguments stmt_ends stmt_list END FUNCTION
   19         | FUNCTION IDENTIFIER . arguments stmt_ends stmt_list RETURN expr END FUNCTION

    '('  shift, and go to state 44

    arguments_multiline   go to state 45
    arguments_singleline  go to state 46
    arguments             go to state 47


State 37

    9 module: MODULE IDENTIFIER stmt_ends functions_and_sub_list END . MODULE

    MODULE  shift, and go to state 48


State 38

   13 functions_and_sub_list: functions_and_sub_list stmt_ends . function_or_sub
   62 stmt_ends: stmt_ends . END_OF_LINE

    SUB          shift, and go to state 25
    FUNCTION     shift, and go to state 27
    END_OF_LINE  shift, and go to state 24
    PRIVATE      shift, and go to state 3
    PROTECTED    shift, and go to state 4
    PUBLIC       shift, and go to state 5
    FRIEND       shift, and go to state 6

    function_or_sub  go to state 49
    function         go to state 30
    sub_bloc         go to state 31
    access           go to state 32


State 39

   26 sub_bloc: access SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB
   27         | access SUB . IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER  shift, and go to state 50


State 40

   20 function: access FUNCTION . IDENTIFIER arguments stmt_ends END FUNCTION
   21         | access FUNCTION . IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION
   22         | access FUNCTION . IDENTIFIER arguments stmt_ends stmt_list END FUNCTION
   23         | access FUNCTION . IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION

    IDENTIFIER  shift, and go to state 51


State 41

   10 module: access MODULE IDENTIFIER stmt_ends END . MODULE

    MODULE  shift, and go to state 52


State 42

   11 module: access MODULE IDENTIFIER stmt_ends functions_and_sub_list . END MODULE
   13 functions_and_sub_list: functions_and_sub_list . stmt_ends function_or_sub

    END          shift, and go to state 53
    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 38


State 43

   24 sub_bloc: SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends END SUB
   25         | SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER   shift, and go to state 54
    END_OF_LINE  shift, and go to state 55

    $default  reduce using rule 28 (parameterlist_or_empty)

    parameterlist_or_empty      go to state 56
    parameterlist_with_type     go to state 57
    parameterlist_without_type  go to state 58
    parameter_with_type         go to state 59
    parameter_without_type      go to state 60


State 44

  133 arguments_multiline: '(' . END_OF_LINE expr_list ')'
  134                    | '(' . END_OF_LINE expr_list END_OF_LINE ')'
  135                    | '(' . expr_list END_OF_LINE ')'
  136 arguments_singleline: '(' . expr_list ')'
  137                     | '(' . ')'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 66
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69
    ')'            shift, and go to state 70

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 73
    basic_literal_value       go to state 74
    expr_list                 go to state 75


State 45

  138 arguments: arguments_multiline .

    $default  reduce using rule 138 (arguments)


State 46

  139 arguments: arguments_singleline .

    $default  reduce using rule 139 (arguments)


State 47

   16 function: FUNCTION IDENTIFIER arguments . stmt_ends END FUNCTION
   17         | FUNCTION IDENTIFIER arguments . stmt_ends RETURN expr END FUNCTION
   18         | FUNCTION IDENTIFIER arguments . stmt_ends stmt_list END FUNCTION
   19         | FUNCTION IDENTIFIER arguments . stmt_ends stmt_list RETURN expr END FUNCTION

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 76


State 48

    9 module: MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE .

    $default  reduce using rule 9 (module)


State 49

   13 functions_and_sub_list: functions_and_sub_list stmt_ends function_or_sub .

    $default  reduce using rule 13 (functions_and_sub_list)


State 50

   26 sub_bloc: access SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends END SUB
   27         | access SUB IDENTIFIER . '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    '('  shift, and go to state 77


State 51

   20 function: access FUNCTION IDENTIFIER . arguments stmt_ends END FUNCTION
   21         | access FUNCTION IDENTIFIER . arguments stmt_ends RETURN expr END FUNCTION
   22         | access FUNCTION IDENTIFIER . arguments stmt_ends stmt_list END FUNCTION
   23         | access FUNCTION IDENTIFIER . arguments stmt_ends stmt_list RETURN expr END FUNCTION

    '('  shift, and go to state 44

    arguments_multiline   go to state 45
    arguments_singleline  go to state 46
    arguments             go to state 78


State 52

   10 module: access MODULE IDENTIFIER stmt_ends END MODULE .

    $default  reduce using rule 10 (module)


State 53

   11 module: access MODULE IDENTIFIER stmt_ends functions_and_sub_list END . MODULE

    MODULE  shift, and go to state 79


State 54

   43 parameter_with_type: IDENTIFIER . AS basic_literal
   44                    | IDENTIFIER . AS basic_literal '(' ')'
   45 parameter_without_type: IDENTIFIER .

    AS  shift, and go to state 80

    $default  reduce using rule 45 (parameter_without_type)


State 55

   30 parameterlist_or_empty: END_OF_LINE . parameterlist_with_type END_OF_LINE
   31                       | END_OF_LINE . parameterlist_with_type
   34                       | END_OF_LINE . parameterlist_without_type END_OF_LINE
   36                       | END_OF_LINE . parameterlist_without_type

    IDENTIFIER  shift, and go to state 54

    parameterlist_with_type     go to state 81
    parameterlist_without_type  go to state 82
    parameter_with_type         go to state 59
    parameter_without_type      go to state 60


State 56

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends END SUB
   25         | SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends stmt_list END SUB

    ')'  shift, and go to state 83


State 57

   29 parameterlist_or_empty: parameterlist_with_type .
   32                       | parameterlist_with_type . END_OF_LINE
   38 parameterlist_with_type: parameterlist_with_type . ',' parameter_with_type
   39                        | parameterlist_with_type . ',' END_OF_LINE parameter_with_type

    END_OF_LINE  shift, and go to state 84
    ','          shift, and go to state 85

    $default  reduce using rule 29 (parameterlist_or_empty)


State 58

   33 parameterlist_or_empty: parameterlist_without_type .
   35                       | parameterlist_without_type . END_OF_LINE
   41 parameterlist_without_type: parameterlist_without_type . ',' parameter_without_type
   42                           | parameterlist_without_type . ',' END_OF_LINE parameter_without_type

    END_OF_LINE  shift, and go to state 86
    ','          shift, and go to state 87

    $default  reduce using rule 33 (parameterlist_or_empty)


State 59

   37 parameterlist_with_type: parameter_with_type .

    $default  reduce using rule 37 (parameterlist_with_type)


State 60

   40 parameterlist_without_type: parameter_without_type .

    $default  reduce using rule 40 (parameterlist_without_type)


State 61

  129 basic_literal_value: INT_VALUE .

    $default  reduce using rule 129 (basic_literal_value)


State 62

  132 basic_literal_value: DOUBLE_VALUE .

    $default  reduce using rule 132 (basic_literal_value)


State 63

  130 basic_literal_value: STRING_VALUE .

    $default  reduce using rule 130 (basic_literal_value)


State 64

  131 basic_literal_value: BOOLEAN_VALUE .

    $default  reduce using rule 131 (basic_literal_value)


State 65

  103 function_call_multiline: IDENTIFIER . arguments_multiline
  104 function_call_singleline: IDENTIFIER . arguments_singleline
  124 expr: IDENTIFIER .

    '('  shift, and go to state 44

    $default  reduce using rule 124 (expr)

    arguments_multiline   go to state 88
    arguments_singleline  go to state 89


State 66

  133 arguments_multiline: '(' END_OF_LINE . expr_list ')'
  134                    | '(' END_OF_LINE . expr_list END_OF_LINE ')'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 73
    basic_literal_value       go to state 74
    expr_list                 go to state 90


State 67

  108 expr: '+' . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 91
    basic_literal_value       go to state 74


State 68

  107 expr: '-' . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 92
    basic_literal_value       go to state 74


State 69

  122 expr: '(' . expr ')'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 93
    basic_literal_value       go to state 74


State 70

  137 arguments_singleline: '(' ')' .

    $default  reduce using rule 137 (arguments_singleline)


State 71

  123 expr: function_call_multiline .

    $default  reduce using rule 123 (expr)


State 72

  106 expr: function_call_singleline .

    $default  reduce using rule 106 (expr)


State 73

  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr
  140 expr_list: expr .

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 140 (expr_list)


State 74

  105 expr: basic_literal_value .

    $default  reduce using rule 105 (expr)


State 75

  135 arguments_multiline: '(' expr_list . END_OF_LINE ')'
  136 arguments_singleline: '(' expr_list . ')'
  141 expr_list: expr_list . ',' expr

    END_OF_LINE  shift, and go to state 107
    ')'          shift, and go to state 108
    ','          shift, and go to state 109


State 76

   16 function: FUNCTION IDENTIFIER arguments stmt_ends . END FUNCTION
   17         | FUNCTION IDENTIFIER arguments stmt_ends . RETURN expr END FUNCTION
   18         | FUNCTION IDENTIFIER arguments stmt_ends . stmt_list END FUNCTION
   19         | FUNCTION IDENTIFIER arguments stmt_ends . stmt_list RETURN expr END FUNCTION
   62 stmt_ends: stmt_ends . END_OF_LINE

    IDENTIFIER   shift, and go to state 110
    END          shift, and go to state 111
    CONST        shift, and go to state 112
    DIM          shift, and go to state 113
    WHILE        shift, and go to state 114
    IF           shift, and go to state 115
    SELECT       shift, and go to state 116
    RETURN       shift, and go to state 117
    DO           shift, and go to state 118
    FOR          shift, and go to state 119
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 120
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 77

   26 sub_bloc: access SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends END SUB
   27         | access SUB IDENTIFIER '(' . parameterlist_or_empty ')' stmt_ends stmt_list END SUB

    IDENTIFIER   shift, and go to state 54
    END_OF_LINE  shift, and go to state 55

    $default  reduce using rule 28 (parameterlist_or_empty)

    parameterlist_or_empty      go to state 135
    parameterlist_with_type     go to state 57
    parameterlist_without_type  go to state 58
    parameter_with_type         go to state 59
    parameter_without_type      go to state 60


State 78

   20 function: access FUNCTION IDENTIFIER arguments . stmt_ends END FUNCTION
   21         | access FUNCTION IDENTIFIER arguments . stmt_ends RETURN expr END FUNCTION
   22         | access FUNCTION IDENTIFIER arguments . stmt_ends stmt_list END FUNCTION
   23         | access FUNCTION IDENTIFIER arguments . stmt_ends stmt_list RETURN expr END FUNCTION

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 136


State 79

   11 module: access MODULE IDENTIFIER stmt_ends functions_and_sub_list END MODULE .

    $default  reduce using rule 11 (module)


State 80

   43 parameter_with_type: IDENTIFIER AS . basic_literal
   44                    | IDENTIFIER AS . basic_literal '(' ')'

    INT      shift, and go to state 137
    DOUBLE   shift, and go to state 138
    STRING   shift, and go to state 139
    BOOLEAN  shift, and go to state 140

    basic_literal  go to state 141


State 81

   30 parameterlist_or_empty: END_OF_LINE parameterlist_with_type . END_OF_LINE
   31                       | END_OF_LINE parameterlist_with_type .
   38 parameterlist_with_type: parameterlist_with_type . ',' parameter_with_type
   39                        | parameterlist_with_type . ',' END_OF_LINE parameter_with_type

    END_OF_LINE  shift, and go to state 142
    ','          shift, and go to state 85

    $default  reduce using rule 31 (parameterlist_or_empty)


State 82

   34 parameterlist_or_empty: END_OF_LINE parameterlist_without_type . END_OF_LINE
   36                       | END_OF_LINE parameterlist_without_type .
   41 parameterlist_without_type: parameterlist_without_type . ',' parameter_without_type
   42                           | parameterlist_without_type . ',' END_OF_LINE parameter_without_type

    END_OF_LINE  shift, and go to state 143
    ','          shift, and go to state 87

    $default  reduce using rule 36 (parameterlist_or_empty)


State 83

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends END SUB
   25         | SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends stmt_list END SUB

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 144


State 84

   32 parameterlist_or_empty: parameterlist_with_type END_OF_LINE .

    $default  reduce using rule 32 (parameterlist_or_empty)


State 85

   38 parameterlist_with_type: parameterlist_with_type ',' . parameter_with_type
   39                        | parameterlist_with_type ',' . END_OF_LINE parameter_with_type

    IDENTIFIER   shift, and go to state 145
    END_OF_LINE  shift, and go to state 146

    parameter_with_type  go to state 147


State 86

   35 parameterlist_or_empty: parameterlist_without_type END_OF_LINE .

    $default  reduce using rule 35 (parameterlist_or_empty)


State 87

   41 parameterlist_without_type: parameterlist_without_type ',' . parameter_without_type
   42                           | parameterlist_without_type ',' . END_OF_LINE parameter_without_type

    IDENTIFIER   shift, and go to state 148
    END_OF_LINE  shift, and go to state 149

    parameter_without_type  go to state 150


State 88

  103 function_call_multiline: IDENTIFIER arguments_multiline .

    $default  reduce using rule 103 (function_call_multiline)


State 89

  104 function_call_singleline: IDENTIFIER arguments_singleline .

    $default  reduce using rule 104 (function_call_singleline)


State 90

  133 arguments_multiline: '(' END_OF_LINE expr_list . ')'
  134                    | '(' END_OF_LINE expr_list . END_OF_LINE ')'
  141 expr_list: expr_list . ',' expr

    END_OF_LINE  shift, and go to state 151
    ')'          shift, and go to state 152
    ','          shift, and go to state 109


State 91

  108 expr: '+' expr .
  109     | expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 108 (expr)


State 92

  107 expr: '-' expr .
  109     | expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 107 (expr)


State 93

  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr
  122     | '(' expr . ')'

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106
    ')'            shift, and go to state 153


State 94

  117 expr: expr '^' . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 154
    basic_literal_value       go to state 74


State 95

  111 expr: expr '*' . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 155
    basic_literal_value       go to state 74


State 96

  112 expr: expr '/' . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 156
    basic_literal_value       go to state 74


State 97

  113 expr: expr INT_DIV . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 157
    basic_literal_value       go to state 74


State 98

  109 expr: expr '+' . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 158
    basic_literal_value       go to state 74


State 99

  110 expr: expr '-' . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 159
    basic_literal_value       go to state 74


State 100

  114 expr: expr '=' . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 160
    basic_literal_value       go to state 74


State 101

  118 expr: expr NOT_EQUAL . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 161
    basic_literal_value       go to state 74


State 102

  119 expr: expr LESS_OR_EQUAL . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 162
    basic_literal_value       go to state 74


State 103

  120 expr: expr MORE_OR_EQUAL . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 163
    basic_literal_value       go to state 74


State 104

  116 expr: expr '>' . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 164
    basic_literal_value       go to state 74


State 105

  115 expr: expr '<' . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 165
    basic_literal_value       go to state 74


State 106

  121 expr: expr '&' . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 166
    basic_literal_value       go to state 74


State 107

  135 arguments_multiline: '(' expr_list END_OF_LINE . ')'

    ')'  shift, and go to state 167


State 108

  136 arguments_singleline: '(' expr_list ')' .

    $default  reduce using rule 136 (arguments_singleline)


State 109

  141 expr_list: expr_list ',' . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 168
    basic_literal_value       go to state 74


State 110

  103 function_call_multiline: IDENTIFIER . arguments_multiline
  104 function_call_singleline: IDENTIFIER . arguments_singleline

    '('  shift, and go to state 44

    arguments_multiline   go to state 88
    arguments_singleline  go to state 89


State 111

   16 function: FUNCTION IDENTIFIER arguments stmt_ends END . FUNCTION

    FUNCTION  shift, and go to state 169


State 112

   63 decl_stmt: CONST . var_name AS basic_literal '=' END_OF_LINE expr
   66 decl_stmt_single_line: CONST . var_name AS basic_literal '=' expr

    IDENTIFIER  shift, and go to state 170

    var_name  go to state 171


State 113

   64 decl_stmt: DIM . var_name AS basic_literal '=' END_OF_LINE expr
   65          | DIM . var_name '=' END_OF_LINE expr
   67 decl_stmt_single_line: DIM . var_name AS basic_literal '=' expr
   68                      | DIM . var_name AS basic_literal
   69                      | DIM . var_name '=' expr
   70                      | DIM . var_name
   71                      | DIM . var_name '=' NEW basic_literal '(' ')' '{' expr_list '}'

    IDENTIFIER  shift, and go to state 170

    var_name  go to state 172


State 114

   80 while_stmt: WHILE . expr stmt_ends stmt_list END WHILE

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 173
    basic_literal_value       go to state 74


State 115

   88 if_stmt_multi_line: IF . expr THEN stmt_ends stmt_list END IF
   89                   | IF . expr THEN stmt_ends stmt_list ELSE stmt_list END IF
   90                   | IF . expr THEN stmt_ends stmt_list elseif_list END IF
   91                   | IF . expr THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF
   94 if_stmt_single_line: IF . expr THEN single_line_stmt
   95                    | IF . expr THEN single_line_stmt ELSE single_line_stmt

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 174
    basic_literal_value       go to state 74


State 116

   96 select_stmt: SELECT . CASE expr stmt_ends case_list END SELECT

    CASE  shift, and go to state 175


State 117

   17 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN . expr END FUNCTION

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 176
    basic_literal_value       go to state 74


State 118

   81 do_loop_stmt: DO . do_loop_condition stmt_ends stmt_list LOOP
   82             | DO . stmt_ends stmt_list LOOP do_loop_condition

    WHILE        shift, and go to state 177
    UNTIL        shift, and go to state 178
    END_OF_LINE  shift, and go to state 20

    stmt_ends          go to state 179
    do_loop_condition  go to state 180


State 119

   85 for_loop_stmt: FOR . IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value stmt_ends stmt_list NEXT
   86              | FOR . IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT
   87 for_each_loop_stmt: FOR . EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

    IDENTIFIER  shift, and go to state 181
    EACH        shift, and go to state 182


State 120

   18 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list . END FUNCTION
   19         | FUNCTION IDENTIFIER arguments stmt_ends stmt_list . RETURN expr END FUNCTION
   47 stmt_list: stmt_list . stmt

    IDENTIFIER  shift, and go to state 110
    END         shift, and go to state 183
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    RETURN      shift, and go to state 184
    DO          shift, and go to state 118
    FOR         shift, and go to state 119

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 121

   46 stmt_list: stmt .

    $default  reduce using rule 46 (stmt_list)


State 122

   49 stmt: single_line_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 186


State 123

   48 stmt: multi_line_stmt .

    $default  reduce using rule 48 (stmt)


State 124

   53 multi_line_stmt: decl_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 187


State 125

   51 single_line_stmt: decl_stmt_single_line .

    $default  reduce using rule 51 (single_line_stmt)


State 126

   54 multi_line_stmt: while_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 188


State 127

   55 multi_line_stmt: do_loop_stmt .

    $default  reduce using rule 55 (multi_line_stmt)


State 128

   56 multi_line_stmt: for_loop_stmt .

    $default  reduce using rule 56 (multi_line_stmt)


State 129

   57 multi_line_stmt: for_each_loop_stmt .

    $default  reduce using rule 57 (multi_line_stmt)


State 130

   59 multi_line_stmt: if_stmt_multi_line . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 189


State 131

   50 single_line_stmt: if_stmt_single_line .

    $default  reduce using rule 50 (single_line_stmt)


State 132

   58 multi_line_stmt: select_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 190


State 133

   60 multi_line_stmt: function_call_multiline .

    $default  reduce using rule 60 (multi_line_stmt)


State 134

   52 single_line_stmt: function_call_singleline .

    $default  reduce using rule 52 (single_line_stmt)


State 135

   26 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends END SUB
   27         | access SUB IDENTIFIER '(' parameterlist_or_empty . ')' stmt_ends stmt_list END SUB

    ')'  shift, and go to state 191


State 136

   20 function: access FUNCTION IDENTIFIER arguments stmt_ends . END FUNCTION
   21         | access FUNCTION IDENTIFIER arguments stmt_ends . RETURN expr END FUNCTION
   22         | access FUNCTION IDENTIFIER arguments stmt_ends . stmt_list END FUNCTION
   23         | access FUNCTION IDENTIFIER arguments stmt_ends . stmt_list RETURN expr END FUNCTION
   62 stmt_ends: stmt_ends . END_OF_LINE

    IDENTIFIER   shift, and go to state 110
    END          shift, and go to state 192
    CONST        shift, and go to state 112
    DIM          shift, and go to state 113
    WHILE        shift, and go to state 114
    IF           shift, and go to state 115
    SELECT       shift, and go to state 116
    RETURN       shift, and go to state 193
    DO           shift, and go to state 118
    FOR          shift, and go to state 119
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 194
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 137

  125 basic_literal: INT .

    $default  reduce using rule 125 (basic_literal)


State 138

  128 basic_literal: DOUBLE .

    $default  reduce using rule 128 (basic_literal)


State 139

  126 basic_literal: STRING .

    $default  reduce using rule 126 (basic_literal)


State 140

  127 basic_literal: BOOLEAN .

    $default  reduce using rule 127 (basic_literal)


State 141

   43 parameter_with_type: IDENTIFIER AS basic_literal .
   44                    | IDENTIFIER AS basic_literal . '(' ')'

    '('  shift, and go to state 195

    $default  reduce using rule 43 (parameter_with_type)


State 142

   30 parameterlist_or_empty: END_OF_LINE parameterlist_with_type END_OF_LINE .

    $default  reduce using rule 30 (parameterlist_or_empty)


State 143

   34 parameterlist_or_empty: END_OF_LINE parameterlist_without_type END_OF_LINE .

    $default  reduce using rule 34 (parameterlist_or_empty)


State 144

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . END SUB
   25         | SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . stmt_list END SUB
   62 stmt_ends: stmt_ends . END_OF_LINE

    IDENTIFIER   shift, and go to state 110
    END          shift, and go to state 196
    CONST        shift, and go to state 112
    DIM          shift, and go to state 113
    WHILE        shift, and go to state 114
    IF           shift, and go to state 115
    SELECT       shift, and go to state 116
    DO           shift, and go to state 118
    FOR          shift, and go to state 119
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 197
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 145

   43 parameter_with_type: IDENTIFIER . AS basic_literal
   44                    | IDENTIFIER . AS basic_literal '(' ')'

    AS  shift, and go to state 80


State 146

   39 parameterlist_with_type: parameterlist_with_type ',' END_OF_LINE . parameter_with_type

    IDENTIFIER  shift, and go to state 145

    parameter_with_type  go to state 198


State 147

   38 parameterlist_with_type: parameterlist_with_type ',' parameter_with_type .

    $default  reduce using rule 38 (parameterlist_with_type)


State 148

   45 parameter_without_type: IDENTIFIER .

    $default  reduce using rule 45 (parameter_without_type)


State 149

   42 parameterlist_without_type: parameterlist_without_type ',' END_OF_LINE . parameter_without_type

    IDENTIFIER  shift, and go to state 148

    parameter_without_type  go to state 199


State 150

   41 parameterlist_without_type: parameterlist_without_type ',' parameter_without_type .

    $default  reduce using rule 41 (parameterlist_without_type)


State 151

  134 arguments_multiline: '(' END_OF_LINE expr_list END_OF_LINE . ')'

    ')'  shift, and go to state 200


State 152

  133 arguments_multiline: '(' END_OF_LINE expr_list ')' .

    $default  reduce using rule 133 (arguments_multiline)


State 153

  122 expr: '(' expr ')' .

    $default  reduce using rule 122 (expr)


State 154

  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  117     | expr '^' expr .
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 117 (expr)


State 155

  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  111     | expr '*' expr .
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 111 (expr)


State 156

  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  112     | expr '/' expr .
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 112 (expr)


State 157

  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  113     | expr INT_DIV expr .
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 113 (expr)


State 158

  109 expr: expr . '+' expr
  109     | expr '+' expr .
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 109 (expr)


State 159

  109 expr: expr . '+' expr
  110     | expr . '-' expr
  110     | expr '-' expr .
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 110 (expr)


State 160

  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  114     | expr '=' expr .
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '&'  shift, and go to state 106

    $default  reduce using rule 114 (expr)


State 161

  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  118     | expr NOT_EQUAL expr .
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '&'  shift, and go to state 106

    $default  reduce using rule 118 (expr)


State 162

  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  119     | expr LESS_OR_EQUAL expr .
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '&'  shift, and go to state 106

    $default  reduce using rule 119 (expr)


State 163

  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  120     | expr MORE_OR_EQUAL expr .
  121     | expr . '&' expr

    '&'  shift, and go to state 106

    $default  reduce using rule 120 (expr)


State 164

  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  116     | expr '>' expr .
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '&'  shift, and go to state 106

    $default  reduce using rule 116 (expr)


State 165

  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  115     | expr '<' expr .
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '&'  shift, and go to state 106

    $default  reduce using rule 115 (expr)


State 166

  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr
  121     | expr '&' expr .

    $default  reduce using rule 121 (expr)


State 167

  135 arguments_multiline: '(' expr_list END_OF_LINE ')' .

    $default  reduce using rule 135 (arguments_multiline)


State 168

  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr
  141 expr_list: expr_list ',' expr .

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 141 (expr_list)


State 169

   16 function: FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION .

    $default  reduce using rule 16 (function)


State 170

   72 var_name: IDENTIFIER . '(' expr ')'
   73         | IDENTIFIER .

    '('  shift, and go to state 201

    $default  reduce using rule 73 (var_name)


State 171

   63 decl_stmt: CONST var_name . AS basic_literal '=' END_OF_LINE expr
   66 decl_stmt_single_line: CONST var_name . AS basic_literal '=' expr

    AS  shift, and go to state 202


State 172

   64 decl_stmt: DIM var_name . AS basic_literal '=' END_OF_LINE expr
   65          | DIM var_name . '=' END_OF_LINE expr
   67 decl_stmt_single_line: DIM var_name . AS basic_literal '=' expr
   68                      | DIM var_name . AS basic_literal
   69                      | DIM var_name . '=' expr
   70                      | DIM var_name .
   71                      | DIM var_name . '=' NEW basic_literal '(' ')' '{' expr_list '}'

    AS   shift, and go to state 203
    '='  shift, and go to state 204

    $default  reduce using rule 70 (decl_stmt_single_line)


State 173

   80 while_stmt: WHILE expr . stmt_ends stmt_list END WHILE
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    stmt_ends  go to state 205


State 174

   88 if_stmt_multi_line: IF expr . THEN stmt_ends stmt_list END IF
   89                   | IF expr . THEN stmt_ends stmt_list ELSE stmt_list END IF
   90                   | IF expr . THEN stmt_ends stmt_list elseif_list END IF
   91                   | IF expr . THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF
   94 if_stmt_single_line: IF expr . THEN single_line_stmt
   95                    | IF expr . THEN single_line_stmt ELSE single_line_stmt
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106
    THEN           shift, and go to state 206


State 175

   96 select_stmt: SELECT CASE . expr stmt_ends case_list END SELECT

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 207
    basic_literal_value       go to state 74


State 176

   17 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr . END FUNCTION
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    END            shift, and go to state 208
    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106


State 177

   84 do_loop_condition: WHILE . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 209
    basic_literal_value       go to state 74


State 178

   83 do_loop_condition: UNTIL . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 210
    basic_literal_value       go to state 74


State 179

   62 stmt_ends: stmt_ends . END_OF_LINE
   82 do_loop_stmt: DO stmt_ends . stmt_list LOOP do_loop_condition

    IDENTIFIER   shift, and go to state 110
    CONST        shift, and go to state 112
    DIM          shift, and go to state 113
    WHILE        shift, and go to state 114
    IF           shift, and go to state 115
    SELECT       shift, and go to state 116
    DO           shift, and go to state 118
    FOR          shift, and go to state 119
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 211
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 180

   81 do_loop_stmt: DO do_loop_condition . stmt_ends stmt_list LOOP

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 212


State 181

   85 for_loop_stmt: FOR IDENTIFIER . AS basic_literal '=' basic_literal_value TO basic_literal_value stmt_ends stmt_list NEXT
   86              | FOR IDENTIFIER . AS basic_literal '=' basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT

    AS  shift, and go to state 213


State 182

   87 for_each_loop_stmt: FOR EACH . IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

    IDENTIFIER  shift, and go to state 214


State 183

   18 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list END . FUNCTION

    FUNCTION  shift, and go to state 215


State 184

   19 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN . expr END FUNCTION

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 216
    basic_literal_value       go to state 74


State 185

   47 stmt_list: stmt_list stmt .

    $default  reduce using rule 47 (stmt_list)


State 186

   49 stmt: single_line_stmt stmt_ends .
   62 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 49 (stmt)


State 187

   53 multi_line_stmt: decl_stmt stmt_ends .
   62 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 53 (multi_line_stmt)


State 188

   54 multi_line_stmt: while_stmt stmt_ends .
   62 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 54 (multi_line_stmt)


State 189

   59 multi_line_stmt: if_stmt_multi_line stmt_ends .
   62 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 59 (multi_line_stmt)


State 190

   58 multi_line_stmt: select_stmt stmt_ends .
   62 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 24

    $default  reduce using rule 58 (multi_line_stmt)


State 191

   26 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends END SUB
   27         | access SUB IDENTIFIER '(' parameterlist_or_empty ')' . stmt_ends stmt_list END SUB

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 217


State 192

   20 function: access FUNCTION IDENTIFIER arguments stmt_ends END . FUNCTION

    FUNCTION  shift, and go to state 218


State 193

   21 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN . expr END FUNCTION

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 219
    basic_literal_value       go to state 74


State 194

   22 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list . END FUNCTION
   23         | access FUNCTION IDENTIFIER arguments stmt_ends stmt_list . RETURN expr END FUNCTION
   47 stmt_list: stmt_list . stmt

    IDENTIFIER  shift, and go to state 110
    END         shift, and go to state 220
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    RETURN      shift, and go to state 221
    DO          shift, and go to state 118
    FOR         shift, and go to state 119

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 195

   44 parameter_with_type: IDENTIFIER AS basic_literal '(' . ')'

    ')'  shift, and go to state 222


State 196

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END . SUB

    SUB  shift, and go to state 223


State 197

   25 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list . END SUB
   47 stmt_list: stmt_list . stmt

    IDENTIFIER  shift, and go to state 110
    END         shift, and go to state 224
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 198

   39 parameterlist_with_type: parameterlist_with_type ',' END_OF_LINE parameter_with_type .

    $default  reduce using rule 39 (parameterlist_with_type)


State 199

   42 parameterlist_without_type: parameterlist_without_type ',' END_OF_LINE parameter_without_type .

    $default  reduce using rule 42 (parameterlist_without_type)


State 200

  134 arguments_multiline: '(' END_OF_LINE expr_list END_OF_LINE ')' .

    $default  reduce using rule 134 (arguments_multiline)


State 201

   72 var_name: IDENTIFIER '(' . expr ')'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 225
    basic_literal_value       go to state 74


State 202

   63 decl_stmt: CONST var_name AS . basic_literal '=' END_OF_LINE expr
   66 decl_stmt_single_line: CONST var_name AS . basic_literal '=' expr

    INT      shift, and go to state 137
    DOUBLE   shift, and go to state 138
    STRING   shift, and go to state 139
    BOOLEAN  shift, and go to state 140

    basic_literal  go to state 226


State 203

   64 decl_stmt: DIM var_name AS . basic_literal '=' END_OF_LINE expr
   67 decl_stmt_single_line: DIM var_name AS . basic_literal '=' expr
   68                      | DIM var_name AS . basic_literal

    INT      shift, and go to state 137
    DOUBLE   shift, and go to state 138
    STRING   shift, and go to state 139
    BOOLEAN  shift, and go to state 140

    basic_literal  go to state 227


State 204

   65 decl_stmt: DIM var_name '=' . END_OF_LINE expr
   69 decl_stmt_single_line: DIM var_name '=' . expr
   71                      | DIM var_name '=' . NEW basic_literal '(' ')' '{' expr_list '}'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    NEW            shift, and go to state 228
    END_OF_LINE    shift, and go to state 229
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 230
    basic_literal_value       go to state 74


State 205

   62 stmt_ends: stmt_ends . END_OF_LINE
   80 while_stmt: WHILE expr stmt_ends . stmt_list END WHILE

    IDENTIFIER   shift, and go to state 110
    CONST        shift, and go to state 112
    DIM          shift, and go to state 113
    WHILE        shift, and go to state 114
    IF           shift, and go to state 115
    SELECT       shift, and go to state 116
    DO           shift, and go to state 118
    FOR          shift, and go to state 119
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 231
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 206

   88 if_stmt_multi_line: IF expr THEN . stmt_ends stmt_list END IF
   89                   | IF expr THEN . stmt_ends stmt_list ELSE stmt_list END IF
   90                   | IF expr THEN . stmt_ends stmt_list elseif_list END IF
   91                   | IF expr THEN . stmt_ends stmt_list elseif_list ELSE stmt_list END IF
   94 if_stmt_single_line: IF expr THEN . single_line_stmt
   95                    | IF expr THEN . single_line_stmt ELSE single_line_stmt

    IDENTIFIER   shift, and go to state 232
    CONST        shift, and go to state 233
    DIM          shift, and go to state 234
    IF           shift, and go to state 235
    END_OF_LINE  shift, and go to state 20

    single_line_stmt          go to state 236
    stmt_ends                 go to state 237
    decl_stmt_single_line     go to state 125
    if_stmt_single_line       go to state 131
    function_call_singleline  go to state 134


State 207

   96 select_stmt: SELECT CASE expr . stmt_ends case_list END SELECT
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    stmt_ends  go to state 238


State 208

   17 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END . FUNCTION

    FUNCTION  shift, and go to state 239


State 209

   84 do_loop_condition: WHILE expr .
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 84 (do_loop_condition)


State 210

   83 do_loop_condition: UNTIL expr .
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 83 (do_loop_condition)


State 211

   47 stmt_list: stmt_list . stmt
   82 do_loop_stmt: DO stmt_ends stmt_list . LOOP do_loop_condition

    IDENTIFIER  shift, and go to state 110
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    LOOP        shift, and go to state 240
    FOR         shift, and go to state 119

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 212

   62 stmt_ends: stmt_ends . END_OF_LINE
   81 do_loop_stmt: DO do_loop_condition stmt_ends . stmt_list LOOP

    IDENTIFIER   shift, and go to state 110
    CONST        shift, and go to state 112
    DIM          shift, and go to state 113
    WHILE        shift, and go to state 114
    IF           shift, and go to state 115
    SELECT       shift, and go to state 116
    DO           shift, and go to state 118
    FOR          shift, and go to state 119
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 241
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 213

   85 for_loop_stmt: FOR IDENTIFIER AS . basic_literal '=' basic_literal_value TO basic_literal_value stmt_ends stmt_list NEXT
   86              | FOR IDENTIFIER AS . basic_literal '=' basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT

    INT      shift, and go to state 137
    DOUBLE   shift, and go to state 138
    STRING   shift, and go to state 139
    BOOLEAN  shift, and go to state 140

    basic_literal  go to state 242


State 214

   87 for_each_loop_stmt: FOR EACH IDENTIFIER . AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

    AS  shift, and go to state 243


State 215

   18 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION .

    $default  reduce using rule 18 (function)


State 216

   19 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr . END FUNCTION
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    END            shift, and go to state 244
    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106


State 217

   26 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . END SUB
   27         | access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends . stmt_list END SUB
   62 stmt_ends: stmt_ends . END_OF_LINE

    IDENTIFIER   shift, and go to state 110
    END          shift, and go to state 245
    CONST        shift, and go to state 112
    DIM          shift, and go to state 113
    WHILE        shift, and go to state 114
    IF           shift, and go to state 115
    SELECT       shift, and go to state 116
    DO           shift, and go to state 118
    FOR          shift, and go to state 119
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 246
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 218

   20 function: access FUNCTION IDENTIFIER arguments stmt_ends END FUNCTION .

    $default  reduce using rule 20 (function)


State 219

   21 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr . END FUNCTION
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    END            shift, and go to state 247
    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106


State 220

   22 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list END . FUNCTION

    FUNCTION  shift, and go to state 248


State 221

   23 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN . expr END FUNCTION

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 249
    basic_literal_value       go to state 74


State 222

   44 parameter_with_type: IDENTIFIER AS basic_literal '(' ')' .

    $default  reduce using rule 44 (parameter_with_type)


State 223

   24 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB .

    $default  reduce using rule 24 (sub_bloc)


State 224

   25 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END . SUB

    SUB  shift, and go to state 250


State 225

   72 var_name: IDENTIFIER '(' expr . ')'
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106
    ')'            shift, and go to state 251


State 226

   63 decl_stmt: CONST var_name AS basic_literal . '=' END_OF_LINE expr
   66 decl_stmt_single_line: CONST var_name AS basic_literal . '=' expr

    '='  shift, and go to state 252


State 227

   64 decl_stmt: DIM var_name AS basic_literal . '=' END_OF_LINE expr
   67 decl_stmt_single_line: DIM var_name AS basic_literal . '=' expr
   68                      | DIM var_name AS basic_literal .

    '='  shift, and go to state 253

    $default  reduce using rule 68 (decl_stmt_single_line)


State 228

   71 decl_stmt_single_line: DIM var_name '=' NEW . basic_literal '(' ')' '{' expr_list '}'

    INT      shift, and go to state 137
    DOUBLE   shift, and go to state 138
    STRING   shift, and go to state 139
    BOOLEAN  shift, and go to state 140

    basic_literal  go to state 254


State 229

   65 decl_stmt: DIM var_name '=' END_OF_LINE . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 255
    basic_literal_value       go to state 74


State 230

   69 decl_stmt_single_line: DIM var_name '=' expr .
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 69 (decl_stmt_single_line)


State 231

   47 stmt_list: stmt_list . stmt
   80 while_stmt: WHILE expr stmt_ends stmt_list . END WHILE

    IDENTIFIER  shift, and go to state 110
    END         shift, and go to state 256
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 232

  104 function_call_singleline: IDENTIFIER . arguments_singleline

    '('  shift, and go to state 257

    arguments_singleline  go to state 89


State 233

   66 decl_stmt_single_line: CONST . var_name AS basic_literal '=' expr

    IDENTIFIER  shift, and go to state 170

    var_name  go to state 258


State 234

   67 decl_stmt_single_line: DIM . var_name AS basic_literal '=' expr
   68                      | DIM . var_name AS basic_literal
   69                      | DIM . var_name '=' expr
   70                      | DIM . var_name
   71                      | DIM . var_name '=' NEW basic_literal '(' ')' '{' expr_list '}'

    IDENTIFIER  shift, and go to state 170

    var_name  go to state 259


State 235

   94 if_stmt_single_line: IF . expr THEN single_line_stmt
   95                    | IF . expr THEN single_line_stmt ELSE single_line_stmt

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 260
    basic_literal_value       go to state 74


State 236

   94 if_stmt_single_line: IF expr THEN single_line_stmt .
   95                    | IF expr THEN single_line_stmt . ELSE single_line_stmt

    ELSE  shift, and go to state 261

    $default  reduce using rule 94 (if_stmt_single_line)


State 237

   62 stmt_ends: stmt_ends . END_OF_LINE
   88 if_stmt_multi_line: IF expr THEN stmt_ends . stmt_list END IF
   89                   | IF expr THEN stmt_ends . stmt_list ELSE stmt_list END IF
   90                   | IF expr THEN stmt_ends . stmt_list elseif_list END IF
   91                   | IF expr THEN stmt_ends . stmt_list elseif_list ELSE stmt_list END IF

    IDENTIFIER   shift, and go to state 110
    CONST        shift, and go to state 112
    DIM          shift, and go to state 113
    WHILE        shift, and go to state 114
    IF           shift, and go to state 115
    SELECT       shift, and go to state 116
    DO           shift, and go to state 118
    FOR          shift, and go to state 119
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 262
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 238

   62 stmt_ends: stmt_ends . END_OF_LINE
   96 select_stmt: SELECT CASE expr stmt_ends . case_list END SELECT

    CASE         shift, and go to state 263
    END_OF_LINE  shift, and go to state 24

    case_list  go to state 264
    case_stmt  go to state 265


State 239

   17 function: FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION .

    $default  reduce using rule 17 (function)


State 240

   82 do_loop_stmt: DO stmt_ends stmt_list LOOP . do_loop_condition

    WHILE  shift, and go to state 177
    UNTIL  shift, and go to state 178

    do_loop_condition  go to state 266


State 241

   47 stmt_list: stmt_list . stmt
   81 do_loop_stmt: DO do_loop_condition stmt_ends stmt_list . LOOP

    IDENTIFIER  shift, and go to state 110
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    LOOP        shift, and go to state 267
    FOR         shift, and go to state 119

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 242

   85 for_loop_stmt: FOR IDENTIFIER AS basic_literal . '=' basic_literal_value TO basic_literal_value stmt_ends stmt_list NEXT
   86              | FOR IDENTIFIER AS basic_literal . '=' basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT

    '='  shift, and go to state 268


State 243

   87 for_each_loop_stmt: FOR EACH IDENTIFIER AS . basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT

    INT      shift, and go to state 137
    DOUBLE   shift, and go to state 138
    STRING   shift, and go to state 139
    BOOLEAN  shift, and go to state 140

    basic_literal  go to state 269


State 244

   19 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END . FUNCTION

    FUNCTION  shift, and go to state 270


State 245

   26 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END . SUB

    SUB  shift, and go to state 271


State 246

   27 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list . END SUB
   47 stmt_list: stmt_list . stmt

    IDENTIFIER  shift, and go to state 110
    END         shift, and go to state 272
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 247

   21 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END . FUNCTION

    FUNCTION  shift, and go to state 273


State 248

   22 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list END FUNCTION .

    $default  reduce using rule 22 (function)


State 249

   23 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr . END FUNCTION
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    END            shift, and go to state 274
    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106


State 250

   25 sub_bloc: SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB .

    $default  reduce using rule 25 (sub_bloc)


State 251

   72 var_name: IDENTIFIER '(' expr ')' .

    $default  reduce using rule 72 (var_name)


State 252

   63 decl_stmt: CONST var_name AS basic_literal '=' . END_OF_LINE expr
   66 decl_stmt_single_line: CONST var_name AS basic_literal '=' . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 275
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 276
    basic_literal_value       go to state 74


State 253

   64 decl_stmt: DIM var_name AS basic_literal '=' . END_OF_LINE expr
   67 decl_stmt_single_line: DIM var_name AS basic_literal '=' . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    END_OF_LINE    shift, and go to state 277
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 278
    basic_literal_value       go to state 74


State 254

   71 decl_stmt_single_line: DIM var_name '=' NEW basic_literal . '(' ')' '{' expr_list '}'

    '('  shift, and go to state 279


State 255

   65 decl_stmt: DIM var_name '=' END_OF_LINE expr .
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 65 (decl_stmt)


State 256

   80 while_stmt: WHILE expr stmt_ends stmt_list END . WHILE

    WHILE  shift, and go to state 280


State 257

  136 arguments_singleline: '(' . expr_list ')'
  137                     | '(' . ')'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69
    ')'            shift, and go to state 70

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 73
    basic_literal_value       go to state 74
    expr_list                 go to state 281


State 258

   66 decl_stmt_single_line: CONST var_name . AS basic_literal '=' expr

    AS  shift, and go to state 282


State 259

   67 decl_stmt_single_line: DIM var_name . AS basic_literal '=' expr
   68                      | DIM var_name . AS basic_literal
   69                      | DIM var_name . '=' expr
   70                      | DIM var_name .
   71                      | DIM var_name . '=' NEW basic_literal '(' ')' '{' expr_list '}'

    AS   shift, and go to state 283
    '='  shift, and go to state 284

    $default  reduce using rule 70 (decl_stmt_single_line)


State 260

   94 if_stmt_single_line: IF expr . THEN single_line_stmt
   95                    | IF expr . THEN single_line_stmt ELSE single_line_stmt
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106
    THEN           shift, and go to state 285


State 261

   95 if_stmt_single_line: IF expr THEN single_line_stmt ELSE . single_line_stmt

    IDENTIFIER  shift, and go to state 232
    CONST       shift, and go to state 233
    DIM         shift, and go to state 234
    IF          shift, and go to state 235

    single_line_stmt          go to state 286
    decl_stmt_single_line     go to state 125
    if_stmt_single_line       go to state 131
    function_call_singleline  go to state 134


State 262

   47 stmt_list: stmt_list . stmt
   88 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list . END IF
   89                   | IF expr THEN stmt_ends stmt_list . ELSE stmt_list END IF
   90                   | IF expr THEN stmt_ends stmt_list . elseif_list END IF
   91                   | IF expr THEN stmt_ends stmt_list . elseif_list ELSE stmt_list END IF

    IDENTIFIER  shift, and go to state 110
    END         shift, and go to state 287
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    ELSEIF      shift, and go to state 288
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119
    ELSE        shift, and go to state 289

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    elseif_list               go to state 290
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 263

   99 case_stmt: CASE . expr stmt_ends stmt_list
  100          | CASE . IS expr stmt_ends stmt_list
  101          | CASE . expr TO expr stmt_ends stmt_list
  102          | CASE . ELSE stmt_ends stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    IS             shift, and go to state 291
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69
    ELSE           shift, and go to state 292

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 293
    basic_literal_value       go to state 74


State 264

   96 select_stmt: SELECT CASE expr stmt_ends case_list . END SELECT
   98 case_list: case_list . case_stmt

    END   shift, and go to state 294
    CASE  shift, and go to state 263

    case_stmt  go to state 295


State 265

   97 case_list: case_stmt .

    $default  reduce using rule 97 (case_list)


State 266

   82 do_loop_stmt: DO stmt_ends stmt_list LOOP do_loop_condition .

    $default  reduce using rule 82 (do_loop_stmt)


State 267

   81 do_loop_stmt: DO do_loop_condition stmt_ends stmt_list LOOP .

    $default  reduce using rule 81 (do_loop_stmt)


State 268

   85 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' . basic_literal_value TO basic_literal_value stmt_ends stmt_list NEXT
   86              | FOR IDENTIFIER AS basic_literal '=' . basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64

    basic_literal_value  go to state 296


State 269

   87 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal . IN IDENTIFIER stmt_ends stmt_list NEXT

    IN  shift, and go to state 297


State 270

   19 function: FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION .

    $default  reduce using rule 19 (function)


State 271

   26 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends END SUB .

    $default  reduce using rule 26 (sub_bloc)


State 272

   27 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END . SUB

    SUB  shift, and go to state 298


State 273

   21 function: access FUNCTION IDENTIFIER arguments stmt_ends RETURN expr END FUNCTION .

    $default  reduce using rule 21 (function)


State 274

   23 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END . FUNCTION

    FUNCTION  shift, and go to state 299


State 275

   63 decl_stmt: CONST var_name AS basic_literal '=' END_OF_LINE . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 300
    basic_literal_value       go to state 74


State 276

   66 decl_stmt_single_line: CONST var_name AS basic_literal '=' expr .
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 66 (decl_stmt_single_line)


State 277

   64 decl_stmt: DIM var_name AS basic_literal '=' END_OF_LINE . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 301
    basic_literal_value       go to state 74


State 278

   67 decl_stmt_single_line: DIM var_name AS basic_literal '=' expr .
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 67 (decl_stmt_single_line)


State 279

   71 decl_stmt_single_line: DIM var_name '=' NEW basic_literal '(' . ')' '{' expr_list '}'

    ')'  shift, and go to state 302


State 280

   80 while_stmt: WHILE expr stmt_ends stmt_list END WHILE .

    $default  reduce using rule 80 (while_stmt)


State 281

  136 arguments_singleline: '(' expr_list . ')'
  141 expr_list: expr_list . ',' expr

    ')'  shift, and go to state 108
    ','  shift, and go to state 109


State 282

   66 decl_stmt_single_line: CONST var_name AS . basic_literal '=' expr

    INT      shift, and go to state 137
    DOUBLE   shift, and go to state 138
    STRING   shift, and go to state 139
    BOOLEAN  shift, and go to state 140

    basic_literal  go to state 303


State 283

   67 decl_stmt_single_line: DIM var_name AS . basic_literal '=' expr
   68                      | DIM var_name AS . basic_literal

    INT      shift, and go to state 137
    DOUBLE   shift, and go to state 138
    STRING   shift, and go to state 139
    BOOLEAN  shift, and go to state 140

    basic_literal  go to state 304


State 284

   69 decl_stmt_single_line: DIM var_name '=' . expr
   71                      | DIM var_name '=' . NEW basic_literal '(' ')' '{' expr_list '}'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    NEW            shift, and go to state 228
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 230
    basic_literal_value       go to state 74


State 285

   94 if_stmt_single_line: IF expr THEN . single_line_stmt
   95                    | IF expr THEN . single_line_stmt ELSE single_line_stmt

    IDENTIFIER  shift, and go to state 232
    CONST       shift, and go to state 233
    DIM         shift, and go to state 234
    IF          shift, and go to state 235

    single_line_stmt          go to state 236
    decl_stmt_single_line     go to state 125
    if_stmt_single_line       go to state 131
    function_call_singleline  go to state 134


State 286

   95 if_stmt_single_line: IF expr THEN single_line_stmt ELSE single_line_stmt .

    $default  reduce using rule 95 (if_stmt_single_line)


State 287

   88 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list END . IF

    IF  shift, and go to state 305


State 288

   92 elseif_list: ELSEIF . expr THEN stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 306
    basic_literal_value       go to state 74


State 289

   89 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list ELSE . stmt_list END IF

    IDENTIFIER  shift, and go to state 110
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119

    stmt_list                 go to state 307
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 290

   90 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list . END IF
   91                   | IF expr THEN stmt_ends stmt_list elseif_list . ELSE stmt_list END IF
   93 elseif_list: elseif_list . ELSEIF expr THEN stmt_list

    END     shift, and go to state 308
    ELSEIF  shift, and go to state 309
    ELSE    shift, and go to state 310


State 291

  100 case_stmt: CASE IS . expr stmt_ends stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 311
    basic_literal_value       go to state 74


State 292

  102 case_stmt: CASE ELSE . stmt_ends stmt_list

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 312


State 293

   99 case_stmt: CASE expr . stmt_ends stmt_list
  101          | CASE expr . TO expr stmt_ends stmt_list
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    TO             shift, and go to state 313
    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    stmt_ends  go to state 314


State 294

   96 select_stmt: SELECT CASE expr stmt_ends case_list END . SELECT

    SELECT  shift, and go to state 315


State 295

   98 case_list: case_list case_stmt .

    $default  reduce using rule 98 (case_list)


State 296

   85 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value . TO basic_literal_value stmt_ends stmt_list NEXT
   86              | FOR IDENTIFIER AS basic_literal '=' basic_literal_value . TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT

    TO  shift, and go to state 316


State 297

   87 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN . IDENTIFIER stmt_ends stmt_list NEXT

    IDENTIFIER  shift, and go to state 317


State 298

   27 sub_bloc: access SUB IDENTIFIER '(' parameterlist_or_empty ')' stmt_ends stmt_list END SUB .

    $default  reduce using rule 27 (sub_bloc)


State 299

   23 function: access FUNCTION IDENTIFIER arguments stmt_ends stmt_list RETURN expr END FUNCTION .

    $default  reduce using rule 23 (function)


State 300

   63 decl_stmt: CONST var_name AS basic_literal '=' END_OF_LINE expr .
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 63 (decl_stmt)


State 301

   64 decl_stmt: DIM var_name AS basic_literal '=' END_OF_LINE expr .
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    $default  reduce using rule 64 (decl_stmt)


State 302

   71 decl_stmt_single_line: DIM var_name '=' NEW basic_literal '(' ')' . '{' expr_list '}'

    '{'  shift, and go to state 318


State 303

   66 decl_stmt_single_line: CONST var_name AS basic_literal . '=' expr

    '='  shift, and go to state 319


State 304

   67 decl_stmt_single_line: DIM var_name AS basic_literal . '=' expr
   68                      | DIM var_name AS basic_literal .

    '='  shift, and go to state 320

    $default  reduce using rule 68 (decl_stmt_single_line)


State 305

   88 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list END IF .

    $default  reduce using rule 88 (if_stmt_multi_line)


State 306

   92 elseif_list: ELSEIF expr . THEN stmt_list
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106
    THEN           shift, and go to state 321


State 307

   47 stmt_list: stmt_list . stmt
   89 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list ELSE stmt_list . END IF

    IDENTIFIER  shift, and go to state 110
    END         shift, and go to state 322
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 308

   90 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list END . IF

    IF  shift, and go to state 323


State 309

   93 elseif_list: elseif_list ELSEIF . expr THEN stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 324
    basic_literal_value       go to state 74


State 310

   91 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list ELSE . stmt_list END IF

    IDENTIFIER  shift, and go to state 110
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119

    stmt_list                 go to state 325
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 311

  100 case_stmt: CASE IS expr . stmt_ends stmt_list
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    stmt_ends  go to state 326


State 312

   62 stmt_ends: stmt_ends . END_OF_LINE
  102 case_stmt: CASE ELSE stmt_ends . stmt_list

    IDENTIFIER   shift, and go to state 110
    CONST        shift, and go to state 112
    DIM          shift, and go to state 113
    WHILE        shift, and go to state 114
    IF           shift, and go to state 115
    SELECT       shift, and go to state 116
    DO           shift, and go to state 118
    FOR          shift, and go to state 119
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 327
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 313

  101 case_stmt: CASE expr TO . expr stmt_ends stmt_list

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 328
    basic_literal_value       go to state 74


State 314

   62 stmt_ends: stmt_ends . END_OF_LINE
   99 case_stmt: CASE expr stmt_ends . stmt_list

    IDENTIFIER   shift, and go to state 110
    CONST        shift, and go to state 112
    DIM          shift, and go to state 113
    WHILE        shift, and go to state 114
    IF           shift, and go to state 115
    SELECT       shift, and go to state 116
    DO           shift, and go to state 118
    FOR          shift, and go to state 119
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 329
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 315

   96 select_stmt: SELECT CASE expr stmt_ends case_list END SELECT .

    $default  reduce using rule 96 (select_stmt)


State 316

   85 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO . basic_literal_value stmt_ends stmt_list NEXT
   86              | FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO . basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64

    basic_literal_value  go to state 330


State 317

   87 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER . stmt_ends stmt_list NEXT

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 331


State 318

   71 decl_stmt_single_line: DIM var_name '=' NEW basic_literal '(' ')' '{' . expr_list '}'

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 73
    basic_literal_value       go to state 74
    expr_list                 go to state 332


State 319

   66 decl_stmt_single_line: CONST var_name AS basic_literal '=' . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 276
    basic_literal_value       go to state 74


State 320

   67 decl_stmt_single_line: DIM var_name AS basic_literal '=' . expr

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    '+'            shift, and go to state 67
    '-'            shift, and go to state 68
    '('            shift, and go to state 69

    function_call_multiline   go to state 71
    function_call_singleline  go to state 72
    expr                      go to state 278
    basic_literal_value       go to state 74


State 321

   92 elseif_list: ELSEIF expr THEN . stmt_list

    IDENTIFIER  shift, and go to state 110
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119

    stmt_list                 go to state 333
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 322

   89 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list ELSE stmt_list END . IF

    IF  shift, and go to state 334


State 323

   90 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list END IF .

    $default  reduce using rule 90 (if_stmt_multi_line)


State 324

   93 elseif_list: elseif_list ELSEIF expr . THEN stmt_list
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106
    THEN           shift, and go to state 335


State 325

   47 stmt_list: stmt_list . stmt
   91 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list ELSE stmt_list . END IF

    IDENTIFIER  shift, and go to state 110
    END         shift, and go to state 336
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 326

   62 stmt_ends: stmt_ends . END_OF_LINE
  100 case_stmt: CASE IS expr stmt_ends . stmt_list

    IDENTIFIER   shift, and go to state 110
    CONST        shift, and go to state 112
    DIM          shift, and go to state 113
    WHILE        shift, and go to state 114
    IF           shift, and go to state 115
    SELECT       shift, and go to state 116
    DO           shift, and go to state 118
    FOR          shift, and go to state 119
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 337
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 327

   47 stmt_list: stmt_list . stmt
  102 case_stmt: CASE ELSE stmt_ends stmt_list .

    IDENTIFIER  shift, and go to state 110
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119

    $default  reduce using rule 102 (case_stmt)

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 328

  101 case_stmt: CASE expr TO expr . stmt_ends stmt_list
  109 expr: expr . '+' expr
  110     | expr . '-' expr
  111     | expr . '*' expr
  112     | expr . '/' expr
  113     | expr . INT_DIV expr
  114     | expr . '=' expr
  115     | expr . '<' expr
  116     | expr . '>' expr
  117     | expr . '^' expr
  118     | expr . NOT_EQUAL expr
  119     | expr . LESS_OR_EQUAL expr
  120     | expr . MORE_OR_EQUAL expr
  121     | expr . '&' expr

    END_OF_LINE    shift, and go to state 20
    '^'            shift, and go to state 94
    '*'            shift, and go to state 95
    '/'            shift, and go to state 96
    INT_DIV        shift, and go to state 97
    '+'            shift, and go to state 98
    '-'            shift, and go to state 99
    '='            shift, and go to state 100
    NOT_EQUAL      shift, and go to state 101
    LESS_OR_EQUAL  shift, and go to state 102
    MORE_OR_EQUAL  shift, and go to state 103
    '>'            shift, and go to state 104
    '<'            shift, and go to state 105
    '&'            shift, and go to state 106

    stmt_ends  go to state 338


State 329

   47 stmt_list: stmt_list . stmt
   99 case_stmt: CASE expr stmt_ends stmt_list .

    IDENTIFIER  shift, and go to state 110
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119

    $default  reduce using rule 99 (case_stmt)

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 330

   85 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value . stmt_ends stmt_list NEXT
   86              | FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value . STEP basic_literal_value stmt_ends stmt_list NEXT

    STEP         shift, and go to state 339
    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 340


State 331

   62 stmt_ends: stmt_ends . END_OF_LINE
   87 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends . stmt_list NEXT

    IDENTIFIER   shift, and go to state 110
    CONST        shift, and go to state 112
    DIM          shift, and go to state 113
    WHILE        shift, and go to state 114
    IF           shift, and go to state 115
    SELECT       shift, and go to state 116
    DO           shift, and go to state 118
    FOR          shift, and go to state 119
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 341
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 332

   71 decl_stmt_single_line: DIM var_name '=' NEW basic_literal '(' ')' '{' expr_list . '}'
  141 expr_list: expr_list . ',' expr

    ','  shift, and go to state 109
    '}'  shift, and go to state 342


State 333

   47 stmt_list: stmt_list . stmt
   92 elseif_list: ELSEIF expr THEN stmt_list .

    IDENTIFIER  shift, and go to state 110
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119

    $default  reduce using rule 92 (elseif_list)

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 334

   89 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list ELSE stmt_list END IF .

    $default  reduce using rule 89 (if_stmt_multi_line)


State 335

   93 elseif_list: elseif_list ELSEIF expr THEN . stmt_list

    IDENTIFIER  shift, and go to state 110
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119

    stmt_list                 go to state 343
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 336

   91 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list ELSE stmt_list END . IF

    IF  shift, and go to state 344


State 337

   47 stmt_list: stmt_list . stmt
  100 case_stmt: CASE IS expr stmt_ends stmt_list .

    IDENTIFIER  shift, and go to state 110
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119

    $default  reduce using rule 100 (case_stmt)

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 338

   62 stmt_ends: stmt_ends . END_OF_LINE
  101 case_stmt: CASE expr TO expr stmt_ends . stmt_list

    IDENTIFIER   shift, and go to state 110
    CONST        shift, and go to state 112
    DIM          shift, and go to state 113
    WHILE        shift, and go to state 114
    IF           shift, and go to state 115
    SELECT       shift, and go to state 116
    DO           shift, and go to state 118
    FOR          shift, and go to state 119
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 345
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 339

   86 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value STEP . basic_literal_value stmt_ends stmt_list NEXT

    INT_VALUE      shift, and go to state 61
    DOUBLE_VALUE   shift, and go to state 62
    STRING_VALUE   shift, and go to state 63
    BOOLEAN_VALUE  shift, and go to state 64

    basic_literal_value  go to state 346


State 340

   62 stmt_ends: stmt_ends . END_OF_LINE
   85 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value stmt_ends . stmt_list NEXT

    IDENTIFIER   shift, and go to state 110
    CONST        shift, and go to state 112
    DIM          shift, and go to state 113
    WHILE        shift, and go to state 114
    IF           shift, and go to state 115
    SELECT       shift, and go to state 116
    DO           shift, and go to state 118
    FOR          shift, and go to state 119
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 347
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 341

   47 stmt_list: stmt_list . stmt
   87 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list . NEXT

    IDENTIFIER  shift, and go to state 110
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119
    NEXT        shift, and go to state 348

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 342

   71 decl_stmt_single_line: DIM var_name '=' NEW basic_literal '(' ')' '{' expr_list '}' .

    $default  reduce using rule 71 (decl_stmt_single_line)


State 343

   47 stmt_list: stmt_list . stmt
   93 elseif_list: elseif_list ELSEIF expr THEN stmt_list .

    IDENTIFIER  shift, and go to state 110
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119

    $default  reduce using rule 93 (elseif_list)

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 344

   91 if_stmt_multi_line: IF expr THEN stmt_ends stmt_list elseif_list ELSE stmt_list END IF .

    $default  reduce using rule 91 (if_stmt_multi_line)


State 345

   47 stmt_list: stmt_list . stmt
  101 case_stmt: CASE expr TO expr stmt_ends stmt_list .

    IDENTIFIER  shift, and go to state 110
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119

    $default  reduce using rule 101 (case_stmt)

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 346

   86 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value STEP basic_literal_value . stmt_ends stmt_list NEXT

    END_OF_LINE  shift, and go to state 20

    stmt_ends  go to state 349


State 347

   47 stmt_list: stmt_list . stmt
   85 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value stmt_ends stmt_list . NEXT

    IDENTIFIER  shift, and go to state 110
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119
    NEXT        shift, and go to state 350

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 348

   87 for_each_loop_stmt: FOR EACH IDENTIFIER AS basic_literal IN IDENTIFIER stmt_ends stmt_list NEXT .

    $default  reduce using rule 87 (for_each_loop_stmt)


State 349

   62 stmt_ends: stmt_ends . END_OF_LINE
   86 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends . stmt_list NEXT

    IDENTIFIER   shift, and go to state 110
    CONST        shift, and go to state 112
    DIM          shift, and go to state 113
    WHILE        shift, and go to state 114
    IF           shift, and go to state 115
    SELECT       shift, and go to state 116
    DO           shift, and go to state 118
    FOR          shift, and go to state 119
    END_OF_LINE  shift, and go to state 24

    stmt_list                 go to state 351
    stmt                      go to state 121
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 350

   85 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value stmt_ends stmt_list NEXT .

    $default  reduce using rule 85 (for_loop_stmt)


State 351

   47 stmt_list: stmt_list . stmt
   86 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list . NEXT

    IDENTIFIER  shift, and go to state 110
    CONST       shift, and go to state 112
    DIM         shift, and go to state 113
    WHILE       shift, and go to state 114
    IF          shift, and go to state 115
    SELECT      shift, and go to state 116
    DO          shift, and go to state 118
    FOR         shift, and go to state 119
    NEXT        shift, and go to state 352

    stmt                      go to state 185
    single_line_stmt          go to state 122
    multi_line_stmt           go to state 123
    decl_stmt                 go to state 124
    decl_stmt_single_line     go to state 125
    while_stmt                go to state 126
    do_loop_stmt              go to state 127
    for_loop_stmt             go to state 128
    for_each_loop_stmt        go to state 129
    if_stmt_multi_line        go to state 130
    if_stmt_single_line       go to state 131
    select_stmt               go to state 132
    function_call_multiline   go to state 133
    function_call_singleline  go to state 134


State 352

   86 for_loop_stmt: FOR IDENTIFIER AS basic_literal '=' basic_literal_value TO basic_literal_value STEP basic_literal_value stmt_ends stmt_list NEXT .

    $default  reduce using rule 86 (for_loop_stmt)
