Nonterminals useless in grammar

    single_line_stmt
    if_stmt_single_line


Terminals unused in grammar

    ENDL
    ASSIGN_CONSTRUCT
    ASSIGN_MULT
    ASSIGN_ORD_DIV
    ASSIGN_INT_DIV
    ASSIGN_ADD
    ASSIGN_SUB
    ASSIGN_LSHIFT
    ASSIGN_RSHIFT
    ASSIGN_CONCAT


Rules useless in grammar

   68 stmt: single_line_stmt

   69 single_line_stmt: if_stmt_single_line

   70 if_stmt_single_line: IF expr THEN single_line_stmt
   71                    | IF expr THEN single_line_stmt ELSE single_line_stmt


Grammar

    0 $accept: root $end

    1 root: program_items_list

    2 program_items_list: %empty
    3                   | program_items_list_not_empty

    4 program_items_list_not_empty: program_item
    5                             | program_items_list_not_empty program_item

    6 program_item: stmt
    7             | IMPORTS IDENTIFIER stmt_ends

    8 stmt: multi_line_stmt

    9 multi_line_stmt: decl_stmt stmt_ends
   10                | assign_stmt stmt_ends
   11                | while_stmt stmt_ends
   12                | select_stmt stmt_ends
   13                | if_stmt_multi_line stmt_ends

   14 stmt_ends: END_OF_LINE
   15          | stmt_ends END_OF_LINE

   16 decl_stmt: ACCESS SUB var_name stmt END SUB
   17          | CONST var_name AS basic_literal '=' END_OF_LINE expr
   18          | CONST var_name AS basic_literal '=' expr
   19          | DIM var_name AS basic_literal '=' END_OF_LINE expr
   20          | DIM var_name AS basic_literal '=' expr
   21          | DIM var_name AS basic_literal
   22          | DIM var_name '=' END_OF_LINE expr
   23          | DIM var_name '=' expr
   24          | DIM var_name

   25 var_name: IDENTIFIER '(' expr ')'
   26         | IDENTIFIER

   27 assign_stmt: IDENTIFIER '=' expr
   28            | IDENTIFIER '=' IDENTIFIER

   29 while_stmt: WHILE expr stmt_ends stmt END WHILE

   30 if_stmt_multi_line: IF expr THEN stmt_ends stmt ELSE stmt END IF
   31                   | IF expr THEN stmt_ends stmt elseif_list ELSE stmt END IF

   32 elseif_list: ELSEIF expr THEN stmt
   33            | elseif_list ELSEIF expr THEN stmt

   34 select_stmt: SELECT CASE expr stmt_ends case_list END SELECT

   35 case_list: case_stmt
   36          | case_list case_stmt

   37 case_stmt: CASE expr stmt
   38          | CASE IS expr stmt
   39          | CASE expr TO expr stmt
   40          | CASE ELSE stmt

   41 expr: operand
   42     | '-' expr
   43     | '+' expr
   44     | expr '+' expr
   45     | expr '-' expr
   46     | expr '*' expr
   47     | expr '/' expr
   48     | expr INT_DIV expr
   49     | expr '=' expr
   50     | expr '<' expr
   51     | expr '>' expr
   52     | expr '^' expr
   53     | expr NOT_EQUAL expr
   54     | expr LESS_OR_EQUAL expr
   55     | expr MORE_OR_EQUAL expr
   56     | expr '&' expr

   57 operand: basic_literal
   58        | function_literal

   59 basic_literal: INT
   60              | STRING
   61              | BOOLEAN
   62              | DOUBLE

   63 function_literal: IDENTIFIER arguments

   64 arguments: '(' expr_list ')'
   65          | '(' ')'

   66 expr_list: expr
   67          | expr_list ',' expr


Terminals, with rules where they appear

    $end (0) 0
    '&' (38) 56
    '(' (40) 25 64 65
    ')' (41) 25 64 65
    '*' (42) 46
    '+' (43) 43 44
    ',' (44) 67
    '-' (45) 42 45
    '/' (47) 47
    '<' (60) 50
    '=' (61) 17 18 19 20 22 23 27 28 49
    '>' (62) 51
    '^' (94) 52
    error (256)
    INT <int_val> (258) 59
    DOUBLE <double_val> (259) 62
    STRING <str_val> (260) 60
    BOOLEAN <bool_val> (261) 61
    IDENTIFIER <id_name> (262) 7 25 26 27 28 63
    ENDL (263)
    ACCESS (264) 16
    SUB (265) 16
    END (266) 16 29 30 31 34
    CONST (267) 17 18
    DIM (268) 19 20 21 22 23 24
    AS (269) 17 18 19 20 21
    WHILE (270) 29
    IF (271) 30 31
    THEN (272) 30 31 32 33
    ELSE (273) 30 31 40
    ELSEIF (274) 32 33
    SELECT (275) 34
    CASE (276) 34 37 38 39 40
    IS (277) 38
    TO (278) 39
    IMPORTS (279) 7
    END_OF_LINE (280) 14 15 17 19 22
    UNARY_MINUS (281)
    UNARY_PLUS (282)
    ASSIGN_CONSTRUCT (283)
    ASSIGN_MULT (284)
    ASSIGN_ORD_DIV (285)
    ASSIGN_INT_DIV (286)
    ASSIGN_ADD (287)
    ASSIGN_SUB (288)
    ASSIGN_LSHIFT (289)
    ASSIGN_RSHIFT (290)
    ASSIGN_CONCAT (291)
    INT_DIV (292) 48
    NOT_EQUAL (293) 53
    LESS_OR_EQUAL (294) 54
    MORE_OR_EQUAL (295) 55


Nonterminals, with rules where they appear

    $accept (53)
        on left: 0
    root (54)
        on left: 1
        on right: 0
    program_items_list (55)
        on left: 2 3
        on right: 1
    program_items_list_not_empty (56)
        on left: 4 5
        on right: 3 5
    program_item (57)
        on left: 6 7
        on right: 4 5
    stmt (58)
        on left: 8
        on right: 6 16 29 30 31 32 33 37 38 39 40
    multi_line_stmt (59)
        on left: 9 10 11 12 13
        on right: 8
    stmt_ends (60)
        on left: 14 15
        on right: 7 9 10 11 12 13 15 29 30 31 34
    decl_stmt (61)
        on left: 16 17 18 19 20 21 22 23 24
        on right: 9
    var_name (62)
        on left: 25 26
        on right: 16 17 18 19 20 21 22 23 24
    assign_stmt (63)
        on left: 27 28
        on right: 10
    while_stmt (64)
        on left: 29
        on right: 11
    if_stmt_multi_line (65)
        on left: 30 31
        on right: 13
    elseif_list (66)
        on left: 32 33
        on right: 31 33
    select_stmt (67)
        on left: 34
        on right: 12
    case_list (68)
        on left: 35 36
        on right: 34 36
    case_stmt (69)
        on left: 37 38 39 40
        on right: 35 36
    expr (70)
        on left: 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56
        on right: 17 18 19 20 22 23 25 27 29 30 31 32 33 34 37 38 39 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 66 67
    operand (71)
        on left: 57 58
        on right: 41
    basic_literal (72)
        on left: 59 60 61 62
        on right: 17 18 19 20 21 57
    function_literal (73)
        on left: 63
        on right: 58
    arguments (74)
        on left: 64 65
        on right: 63
    expr_list (75)
        on left: 66 67
        on right: 64 67


State 0

    0 $accept: . root $end

    IDENTIFIER  shift, and go to state 1
    ACCESS      shift, and go to state 2
    CONST       shift, and go to state 3
    DIM         shift, and go to state 4
    WHILE       shift, and go to state 5
    IF          shift, and go to state 6
    SELECT      shift, and go to state 7
    IMPORTS     shift, and go to state 8

    $default  reduce using rule 2 (program_items_list)

    root                          go to state 9
    program_items_list            go to state 10
    program_items_list_not_empty  go to state 11
    program_item                  go to state 12
    stmt                          go to state 13
    multi_line_stmt               go to state 14
    decl_stmt                     go to state 15
    assign_stmt                   go to state 16
    while_stmt                    go to state 17
    if_stmt_multi_line            go to state 18
    select_stmt                   go to state 19


State 1

   27 assign_stmt: IDENTIFIER . '=' expr
   28            | IDENTIFIER . '=' IDENTIFIER

    '='  shift, and go to state 20


State 2

   16 decl_stmt: ACCESS . SUB var_name stmt END SUB

    SUB  shift, and go to state 21


State 3

   17 decl_stmt: CONST . var_name AS basic_literal '=' END_OF_LINE expr
   18          | CONST . var_name AS basic_literal '=' expr

    IDENTIFIER  shift, and go to state 22

    var_name  go to state 23


State 4

   19 decl_stmt: DIM . var_name AS basic_literal '=' END_OF_LINE expr
   20          | DIM . var_name AS basic_literal '=' expr
   21          | DIM . var_name AS basic_literal
   22          | DIM . var_name '=' END_OF_LINE expr
   23          | DIM . var_name '=' expr
   24          | DIM . var_name

    IDENTIFIER  shift, and go to state 22

    var_name  go to state 24


State 5

   29 while_stmt: WHILE . expr stmt_ends stmt END WHILE

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 32
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 6

   30 if_stmt_multi_line: IF . expr THEN stmt_ends stmt ELSE stmt END IF
   31                   | IF . expr THEN stmt_ends stmt elseif_list ELSE stmt END IF

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 36
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 7

   34 select_stmt: SELECT . CASE expr stmt_ends case_list END SELECT

    CASE  shift, and go to state 37


State 8

    7 program_item: IMPORTS . IDENTIFIER stmt_ends

    IDENTIFIER  shift, and go to state 38


State 9

    0 $accept: root . $end

    $end  shift, and go to state 39


State 10

    1 root: program_items_list .

    $default  reduce using rule 1 (root)


State 11

    3 program_items_list: program_items_list_not_empty .
    5 program_items_list_not_empty: program_items_list_not_empty . program_item

    IDENTIFIER  shift, and go to state 1
    ACCESS      shift, and go to state 2
    CONST       shift, and go to state 3
    DIM         shift, and go to state 4
    WHILE       shift, and go to state 5
    IF          shift, and go to state 6
    SELECT      shift, and go to state 7
    IMPORTS     shift, and go to state 8

    $default  reduce using rule 3 (program_items_list)

    program_item        go to state 40
    stmt                go to state 13
    multi_line_stmt     go to state 14
    decl_stmt           go to state 15
    assign_stmt         go to state 16
    while_stmt          go to state 17
    if_stmt_multi_line  go to state 18
    select_stmt         go to state 19


State 12

    4 program_items_list_not_empty: program_item .

    $default  reduce using rule 4 (program_items_list_not_empty)


State 13

    6 program_item: stmt .

    $default  reduce using rule 6 (program_item)


State 14

    8 stmt: multi_line_stmt .

    $default  reduce using rule 8 (stmt)


State 15

    9 multi_line_stmt: decl_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 41

    stmt_ends  go to state 42


State 16

   10 multi_line_stmt: assign_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 41

    stmt_ends  go to state 43


State 17

   11 multi_line_stmt: while_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 41

    stmt_ends  go to state 44


State 18

   13 multi_line_stmt: if_stmt_multi_line . stmt_ends

    END_OF_LINE  shift, and go to state 41

    stmt_ends  go to state 45


State 19

   12 multi_line_stmt: select_stmt . stmt_ends

    END_OF_LINE  shift, and go to state 41

    stmt_ends  go to state 46


State 20

   27 assign_stmt: IDENTIFIER '=' . expr
   28            | IDENTIFIER '=' . IDENTIFIER

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 47
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 48
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 21

   16 decl_stmt: ACCESS SUB . var_name stmt END SUB

    IDENTIFIER  shift, and go to state 22

    var_name  go to state 49


State 22

   25 var_name: IDENTIFIER . '(' expr ')'
   26         | IDENTIFIER .

    '('  shift, and go to state 50

    $default  reduce using rule 26 (var_name)


State 23

   17 decl_stmt: CONST var_name . AS basic_literal '=' END_OF_LINE expr
   18          | CONST var_name . AS basic_literal '=' expr

    AS  shift, and go to state 51


State 24

   19 decl_stmt: DIM var_name . AS basic_literal '=' END_OF_LINE expr
   20          | DIM var_name . AS basic_literal '=' expr
   21          | DIM var_name . AS basic_literal
   22          | DIM var_name . '=' END_OF_LINE expr
   23          | DIM var_name . '=' expr
   24          | DIM var_name .

    AS   shift, and go to state 52
    '='  shift, and go to state 53

    $default  reduce using rule 24 (decl_stmt)


State 25

   59 basic_literal: INT .

    $default  reduce using rule 59 (basic_literal)


State 26

   62 basic_literal: DOUBLE .

    $default  reduce using rule 62 (basic_literal)


State 27

   60 basic_literal: STRING .

    $default  reduce using rule 60 (basic_literal)


State 28

   61 basic_literal: BOOLEAN .

    $default  reduce using rule 61 (basic_literal)


State 29

   63 function_literal: IDENTIFIER . arguments

    '('  shift, and go to state 54

    arguments  go to state 55


State 30

   43 expr: '+' . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 56
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 31

   42 expr: '-' . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 57
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 32

   29 while_stmt: WHILE expr . stmt_ends stmt END WHILE
   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    END_OF_LINE    shift, and go to state 41
    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    stmt_ends  go to state 71


State 33

   41 expr: operand .

    $default  reduce using rule 41 (expr)


State 34

   57 operand: basic_literal .

    $default  reduce using rule 57 (operand)


State 35

   58 operand: function_literal .

    $default  reduce using rule 58 (operand)


State 36

   30 if_stmt_multi_line: IF expr . THEN stmt_ends stmt ELSE stmt END IF
   31                   | IF expr . THEN stmt_ends stmt elseif_list ELSE stmt END IF
   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    THEN           shift, and go to state 72
    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70


State 37

   34 select_stmt: SELECT CASE . expr stmt_ends case_list END SELECT

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 73
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 38

    7 program_item: IMPORTS IDENTIFIER . stmt_ends

    END_OF_LINE  shift, and go to state 41

    stmt_ends  go to state 74


State 39

    0 $accept: root $end .

    $default  accept


State 40

    5 program_items_list_not_empty: program_items_list_not_empty program_item .

    $default  reduce using rule 5 (program_items_list_not_empty)


State 41

   14 stmt_ends: END_OF_LINE .

    $default  reduce using rule 14 (stmt_ends)


State 42

    9 multi_line_stmt: decl_stmt stmt_ends .
   15 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 75

    $default  reduce using rule 9 (multi_line_stmt)


State 43

   10 multi_line_stmt: assign_stmt stmt_ends .
   15 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 75

    $default  reduce using rule 10 (multi_line_stmt)


State 44

   11 multi_line_stmt: while_stmt stmt_ends .
   15 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 75

    $default  reduce using rule 11 (multi_line_stmt)


State 45

   13 multi_line_stmt: if_stmt_multi_line stmt_ends .
   15 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 75

    $default  reduce using rule 13 (multi_line_stmt)


State 46

   12 multi_line_stmt: select_stmt stmt_ends .
   15 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 75

    $default  reduce using rule 12 (multi_line_stmt)


State 47

   28 assign_stmt: IDENTIFIER '=' IDENTIFIER .
   63 function_literal: IDENTIFIER . arguments

    '('  shift, and go to state 54

    $default  reduce using rule 28 (assign_stmt)

    arguments  go to state 55


State 48

   27 assign_stmt: IDENTIFIER '=' expr .
   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    $default  reduce using rule 27 (assign_stmt)


State 49

   16 decl_stmt: ACCESS SUB var_name . stmt END SUB

    IDENTIFIER  shift, and go to state 1
    ACCESS      shift, and go to state 2
    CONST       shift, and go to state 3
    DIM         shift, and go to state 4
    WHILE       shift, and go to state 5
    IF          shift, and go to state 6
    SELECT      shift, and go to state 7

    stmt                go to state 76
    multi_line_stmt     go to state 14
    decl_stmt           go to state 15
    assign_stmt         go to state 16
    while_stmt          go to state 17
    if_stmt_multi_line  go to state 18
    select_stmt         go to state 19


State 50

   25 var_name: IDENTIFIER '(' . expr ')'

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 77
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 51

   17 decl_stmt: CONST var_name AS . basic_literal '=' END_OF_LINE expr
   18          | CONST var_name AS . basic_literal '=' expr

    INT      shift, and go to state 25
    DOUBLE   shift, and go to state 26
    STRING   shift, and go to state 27
    BOOLEAN  shift, and go to state 28

    basic_literal  go to state 78


State 52

   19 decl_stmt: DIM var_name AS . basic_literal '=' END_OF_LINE expr
   20          | DIM var_name AS . basic_literal '=' expr
   21          | DIM var_name AS . basic_literal

    INT      shift, and go to state 25
    DOUBLE   shift, and go to state 26
    STRING   shift, and go to state 27
    BOOLEAN  shift, and go to state 28

    basic_literal  go to state 79


State 53

   22 decl_stmt: DIM var_name '=' . END_OF_LINE expr
   23          | DIM var_name '=' . expr

    INT          shift, and go to state 25
    DOUBLE       shift, and go to state 26
    STRING       shift, and go to state 27
    BOOLEAN      shift, and go to state 28
    IDENTIFIER   shift, and go to state 29
    END_OF_LINE  shift, and go to state 80
    '+'          shift, and go to state 30
    '-'          shift, and go to state 31

    expr              go to state 81
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 54

   64 arguments: '(' . expr_list ')'
   65          | '(' . ')'

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31
    ')'         shift, and go to state 82

    expr              go to state 83
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35
    expr_list         go to state 84


State 55

   63 function_literal: IDENTIFIER arguments .

    $default  reduce using rule 63 (function_literal)


State 56

   43 expr: '+' expr .
   44     | expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    $default  reduce using rule 43 (expr)


State 57

   42 expr: '-' expr .
   44     | expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    $default  reduce using rule 42 (expr)


State 58

   52 expr: expr '^' . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 85
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 59

   46 expr: expr '*' . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 86
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 60

   47 expr: expr '/' . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 87
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 61

   48 expr: expr INT_DIV . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 88
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 62

   44 expr: expr '+' . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 89
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 63

   45 expr: expr '-' . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 90
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 64

   49 expr: expr '=' . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 91
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 65

   53 expr: expr NOT_EQUAL . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 92
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 66

   54 expr: expr LESS_OR_EQUAL . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 93
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 67

   55 expr: expr MORE_OR_EQUAL . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 94
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 68

   51 expr: expr '>' . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 95
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 69

   50 expr: expr '<' . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 96
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 70

   56 expr: expr '&' . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 97
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 71

   15 stmt_ends: stmt_ends . END_OF_LINE
   29 while_stmt: WHILE expr stmt_ends . stmt END WHILE

    IDENTIFIER   shift, and go to state 1
    ACCESS       shift, and go to state 2
    CONST        shift, and go to state 3
    DIM          shift, and go to state 4
    WHILE        shift, and go to state 5
    IF           shift, and go to state 6
    SELECT       shift, and go to state 7
    END_OF_LINE  shift, and go to state 75

    stmt                go to state 98
    multi_line_stmt     go to state 14
    decl_stmt           go to state 15
    assign_stmt         go to state 16
    while_stmt          go to state 17
    if_stmt_multi_line  go to state 18
    select_stmt         go to state 19


State 72

   30 if_stmt_multi_line: IF expr THEN . stmt_ends stmt ELSE stmt END IF
   31                   | IF expr THEN . stmt_ends stmt elseif_list ELSE stmt END IF

    END_OF_LINE  shift, and go to state 41

    stmt_ends  go to state 99


State 73

   34 select_stmt: SELECT CASE expr . stmt_ends case_list END SELECT
   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    END_OF_LINE    shift, and go to state 41
    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    stmt_ends  go to state 100


State 74

    7 program_item: IMPORTS IDENTIFIER stmt_ends .
   15 stmt_ends: stmt_ends . END_OF_LINE

    END_OF_LINE  shift, and go to state 75

    $default  reduce using rule 7 (program_item)


State 75

   15 stmt_ends: stmt_ends END_OF_LINE .

    $default  reduce using rule 15 (stmt_ends)


State 76

   16 decl_stmt: ACCESS SUB var_name stmt . END SUB

    END  shift, and go to state 101


State 77

   25 var_name: IDENTIFIER '(' expr . ')'
   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70
    ')'            shift, and go to state 102


State 78

   17 decl_stmt: CONST var_name AS basic_literal . '=' END_OF_LINE expr
   18          | CONST var_name AS basic_literal . '=' expr

    '='  shift, and go to state 103


State 79

   19 decl_stmt: DIM var_name AS basic_literal . '=' END_OF_LINE expr
   20          | DIM var_name AS basic_literal . '=' expr
   21          | DIM var_name AS basic_literal .

    '='  shift, and go to state 104

    $default  reduce using rule 21 (decl_stmt)


State 80

   22 decl_stmt: DIM var_name '=' END_OF_LINE . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 105
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 81

   23 decl_stmt: DIM var_name '=' expr .
   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    $default  reduce using rule 23 (decl_stmt)


State 82

   65 arguments: '(' ')' .

    $default  reduce using rule 65 (arguments)


State 83

   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr
   66 expr_list: expr .

    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    $default  reduce using rule 66 (expr_list)


State 84

   64 arguments: '(' expr_list . ')'
   67 expr_list: expr_list . ',' expr

    ')'  shift, and go to state 106
    ','  shift, and go to state 107


State 85

   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   52     | expr '^' expr .
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    $default  reduce using rule 52 (expr)


State 86

   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   46     | expr '*' expr .
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    $default  reduce using rule 46 (expr)


State 87

   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   47     | expr '/' expr .
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    $default  reduce using rule 47 (expr)


State 88

   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   48     | expr INT_DIV expr .
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    $default  reduce using rule 48 (expr)


State 89

   44 expr: expr . '+' expr
   44     | expr '+' expr .
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    $default  reduce using rule 44 (expr)


State 90

   44 expr: expr . '+' expr
   45     | expr . '-' expr
   45     | expr '-' expr .
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    $default  reduce using rule 45 (expr)


State 91

   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   49     | expr '=' expr .
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '&'  shift, and go to state 70

    $default  reduce using rule 49 (expr)


State 92

   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   53     | expr NOT_EQUAL expr .
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '&'  shift, and go to state 70

    $default  reduce using rule 53 (expr)


State 93

   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   54     | expr LESS_OR_EQUAL expr .
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '&'  shift, and go to state 70

    $default  reduce using rule 54 (expr)


State 94

   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   55     | expr MORE_OR_EQUAL expr .
   56     | expr . '&' expr

    '&'  shift, and go to state 70

    $default  reduce using rule 55 (expr)


State 95

   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   51     | expr '>' expr .
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '&'  shift, and go to state 70

    $default  reduce using rule 51 (expr)


State 96

   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   50     | expr '<' expr .
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '&'  shift, and go to state 70

    $default  reduce using rule 50 (expr)


State 97

   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr
   56     | expr '&' expr .

    $default  reduce using rule 56 (expr)


State 98

   29 while_stmt: WHILE expr stmt_ends stmt . END WHILE

    END  shift, and go to state 108


State 99

   15 stmt_ends: stmt_ends . END_OF_LINE
   30 if_stmt_multi_line: IF expr THEN stmt_ends . stmt ELSE stmt END IF
   31                   | IF expr THEN stmt_ends . stmt elseif_list ELSE stmt END IF

    IDENTIFIER   shift, and go to state 1
    ACCESS       shift, and go to state 2
    CONST        shift, and go to state 3
    DIM          shift, and go to state 4
    WHILE        shift, and go to state 5
    IF           shift, and go to state 6
    SELECT       shift, and go to state 7
    END_OF_LINE  shift, and go to state 75

    stmt                go to state 109
    multi_line_stmt     go to state 14
    decl_stmt           go to state 15
    assign_stmt         go to state 16
    while_stmt          go to state 17
    if_stmt_multi_line  go to state 18
    select_stmt         go to state 19


State 100

   15 stmt_ends: stmt_ends . END_OF_LINE
   34 select_stmt: SELECT CASE expr stmt_ends . case_list END SELECT

    CASE         shift, and go to state 110
    END_OF_LINE  shift, and go to state 75

    case_list  go to state 111
    case_stmt  go to state 112


State 101

   16 decl_stmt: ACCESS SUB var_name stmt END . SUB

    SUB  shift, and go to state 113


State 102

   25 var_name: IDENTIFIER '(' expr ')' .

    $default  reduce using rule 25 (var_name)


State 103

   17 decl_stmt: CONST var_name AS basic_literal '=' . END_OF_LINE expr
   18          | CONST var_name AS basic_literal '=' . expr

    INT          shift, and go to state 25
    DOUBLE       shift, and go to state 26
    STRING       shift, and go to state 27
    BOOLEAN      shift, and go to state 28
    IDENTIFIER   shift, and go to state 29
    END_OF_LINE  shift, and go to state 114
    '+'          shift, and go to state 30
    '-'          shift, and go to state 31

    expr              go to state 115
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 104

   19 decl_stmt: DIM var_name AS basic_literal '=' . END_OF_LINE expr
   20          | DIM var_name AS basic_literal '=' . expr

    INT          shift, and go to state 25
    DOUBLE       shift, and go to state 26
    STRING       shift, and go to state 27
    BOOLEAN      shift, and go to state 28
    IDENTIFIER   shift, and go to state 29
    END_OF_LINE  shift, and go to state 116
    '+'          shift, and go to state 30
    '-'          shift, and go to state 31

    expr              go to state 117
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 105

   22 decl_stmt: DIM var_name '=' END_OF_LINE expr .
   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    $default  reduce using rule 22 (decl_stmt)


State 106

   64 arguments: '(' expr_list ')' .

    $default  reduce using rule 64 (arguments)


State 107

   67 expr_list: expr_list ',' . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 118
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 108

   29 while_stmt: WHILE expr stmt_ends stmt END . WHILE

    WHILE  shift, and go to state 119


State 109

   30 if_stmt_multi_line: IF expr THEN stmt_ends stmt . ELSE stmt END IF
   31                   | IF expr THEN stmt_ends stmt . elseif_list ELSE stmt END IF

    ELSE    shift, and go to state 120
    ELSEIF  shift, and go to state 121

    elseif_list  go to state 122


State 110

   37 case_stmt: CASE . expr stmt
   38          | CASE . IS expr stmt
   39          | CASE . expr TO expr stmt
   40          | CASE . ELSE stmt

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    ELSE        shift, and go to state 123
    IS          shift, and go to state 124
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 125
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 111

   34 select_stmt: SELECT CASE expr stmt_ends case_list . END SELECT
   36 case_list: case_list . case_stmt

    END   shift, and go to state 126
    CASE  shift, and go to state 110

    case_stmt  go to state 127


State 112

   35 case_list: case_stmt .

    $default  reduce using rule 35 (case_list)


State 113

   16 decl_stmt: ACCESS SUB var_name stmt END SUB .

    $default  reduce using rule 16 (decl_stmt)


State 114

   17 decl_stmt: CONST var_name AS basic_literal '=' END_OF_LINE . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 128
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 115

   18 decl_stmt: CONST var_name AS basic_literal '=' expr .
   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    $default  reduce using rule 18 (decl_stmt)


State 116

   19 decl_stmt: DIM var_name AS basic_literal '=' END_OF_LINE . expr

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 129
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 117

   20 decl_stmt: DIM var_name AS basic_literal '=' expr .
   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    $default  reduce using rule 20 (decl_stmt)


State 118

   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr
   67 expr_list: expr_list ',' expr .

    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    $default  reduce using rule 67 (expr_list)


State 119

   29 while_stmt: WHILE expr stmt_ends stmt END WHILE .

    $default  reduce using rule 29 (while_stmt)


State 120

   30 if_stmt_multi_line: IF expr THEN stmt_ends stmt ELSE . stmt END IF

    IDENTIFIER  shift, and go to state 1
    ACCESS      shift, and go to state 2
    CONST       shift, and go to state 3
    DIM         shift, and go to state 4
    WHILE       shift, and go to state 5
    IF          shift, and go to state 6
    SELECT      shift, and go to state 7

    stmt                go to state 130
    multi_line_stmt     go to state 14
    decl_stmt           go to state 15
    assign_stmt         go to state 16
    while_stmt          go to state 17
    if_stmt_multi_line  go to state 18
    select_stmt         go to state 19


State 121

   32 elseif_list: ELSEIF . expr THEN stmt

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 131
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 122

   31 if_stmt_multi_line: IF expr THEN stmt_ends stmt elseif_list . ELSE stmt END IF
   33 elseif_list: elseif_list . ELSEIF expr THEN stmt

    ELSE    shift, and go to state 132
    ELSEIF  shift, and go to state 133


State 123

   40 case_stmt: CASE ELSE . stmt

    IDENTIFIER  shift, and go to state 1
    ACCESS      shift, and go to state 2
    CONST       shift, and go to state 3
    DIM         shift, and go to state 4
    WHILE       shift, and go to state 5
    IF          shift, and go to state 6
    SELECT      shift, and go to state 7

    stmt                go to state 134
    multi_line_stmt     go to state 14
    decl_stmt           go to state 15
    assign_stmt         go to state 16
    while_stmt          go to state 17
    if_stmt_multi_line  go to state 18
    select_stmt         go to state 19


State 124

   38 case_stmt: CASE IS . expr stmt

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 135
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 125

   37 case_stmt: CASE expr . stmt
   39          | CASE expr . TO expr stmt
   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    IDENTIFIER     shift, and go to state 1
    ACCESS         shift, and go to state 2
    CONST          shift, and go to state 3
    DIM            shift, and go to state 4
    WHILE          shift, and go to state 5
    IF             shift, and go to state 6
    SELECT         shift, and go to state 7
    TO             shift, and go to state 136
    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    stmt                go to state 137
    multi_line_stmt     go to state 14
    decl_stmt           go to state 15
    assign_stmt         go to state 16
    while_stmt          go to state 17
    if_stmt_multi_line  go to state 18
    select_stmt         go to state 19


State 126

   34 select_stmt: SELECT CASE expr stmt_ends case_list END . SELECT

    SELECT  shift, and go to state 138


State 127

   36 case_list: case_list case_stmt .

    $default  reduce using rule 36 (case_list)


State 128

   17 decl_stmt: CONST var_name AS basic_literal '=' END_OF_LINE expr .
   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    $default  reduce using rule 17 (decl_stmt)


State 129

   19 decl_stmt: DIM var_name AS basic_literal '=' END_OF_LINE expr .
   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    $default  reduce using rule 19 (decl_stmt)


State 130

   30 if_stmt_multi_line: IF expr THEN stmt_ends stmt ELSE stmt . END IF

    END  shift, and go to state 139


State 131

   32 elseif_list: ELSEIF expr . THEN stmt
   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    THEN           shift, and go to state 140
    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70


State 132

   31 if_stmt_multi_line: IF expr THEN stmt_ends stmt elseif_list ELSE . stmt END IF

    IDENTIFIER  shift, and go to state 1
    ACCESS      shift, and go to state 2
    CONST       shift, and go to state 3
    DIM         shift, and go to state 4
    WHILE       shift, and go to state 5
    IF          shift, and go to state 6
    SELECT      shift, and go to state 7

    stmt                go to state 141
    multi_line_stmt     go to state 14
    decl_stmt           go to state 15
    assign_stmt         go to state 16
    while_stmt          go to state 17
    if_stmt_multi_line  go to state 18
    select_stmt         go to state 19


State 133

   33 elseif_list: elseif_list ELSEIF . expr THEN stmt

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 142
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 134

   40 case_stmt: CASE ELSE stmt .

    $default  reduce using rule 40 (case_stmt)


State 135

   38 case_stmt: CASE IS expr . stmt
   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    IDENTIFIER     shift, and go to state 1
    ACCESS         shift, and go to state 2
    CONST          shift, and go to state 3
    DIM            shift, and go to state 4
    WHILE          shift, and go to state 5
    IF             shift, and go to state 6
    SELECT         shift, and go to state 7
    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    stmt                go to state 143
    multi_line_stmt     go to state 14
    decl_stmt           go to state 15
    assign_stmt         go to state 16
    while_stmt          go to state 17
    if_stmt_multi_line  go to state 18
    select_stmt         go to state 19


State 136

   39 case_stmt: CASE expr TO . expr stmt

    INT         shift, and go to state 25
    DOUBLE      shift, and go to state 26
    STRING      shift, and go to state 27
    BOOLEAN     shift, and go to state 28
    IDENTIFIER  shift, and go to state 29
    '+'         shift, and go to state 30
    '-'         shift, and go to state 31

    expr              go to state 144
    operand           go to state 33
    basic_literal     go to state 34
    function_literal  go to state 35


State 137

   37 case_stmt: CASE expr stmt .

    $default  reduce using rule 37 (case_stmt)


State 138

   34 select_stmt: SELECT CASE expr stmt_ends case_list END SELECT .

    $default  reduce using rule 34 (select_stmt)


State 139

   30 if_stmt_multi_line: IF expr THEN stmt_ends stmt ELSE stmt END . IF

    IF  shift, and go to state 145


State 140

   32 elseif_list: ELSEIF expr THEN . stmt

    IDENTIFIER  shift, and go to state 1
    ACCESS      shift, and go to state 2
    CONST       shift, and go to state 3
    DIM         shift, and go to state 4
    WHILE       shift, and go to state 5
    IF          shift, and go to state 6
    SELECT      shift, and go to state 7

    stmt                go to state 146
    multi_line_stmt     go to state 14
    decl_stmt           go to state 15
    assign_stmt         go to state 16
    while_stmt          go to state 17
    if_stmt_multi_line  go to state 18
    select_stmt         go to state 19


State 141

   31 if_stmt_multi_line: IF expr THEN stmt_ends stmt elseif_list ELSE stmt . END IF

    END  shift, and go to state 147


State 142

   33 elseif_list: elseif_list ELSEIF expr . THEN stmt
   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    THEN           shift, and go to state 148
    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70


State 143

   38 case_stmt: CASE IS expr stmt .

    $default  reduce using rule 38 (case_stmt)


State 144

   39 case_stmt: CASE expr TO expr . stmt
   44 expr: expr . '+' expr
   45     | expr . '-' expr
   46     | expr . '*' expr
   47     | expr . '/' expr
   48     | expr . INT_DIV expr
   49     | expr . '=' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . '^' expr
   53     | expr . NOT_EQUAL expr
   54     | expr . LESS_OR_EQUAL expr
   55     | expr . MORE_OR_EQUAL expr
   56     | expr . '&' expr

    IDENTIFIER     shift, and go to state 1
    ACCESS         shift, and go to state 2
    CONST          shift, and go to state 3
    DIM            shift, and go to state 4
    WHILE          shift, and go to state 5
    IF             shift, and go to state 6
    SELECT         shift, and go to state 7
    '^'            shift, and go to state 58
    '*'            shift, and go to state 59
    '/'            shift, and go to state 60
    INT_DIV        shift, and go to state 61
    '+'            shift, and go to state 62
    '-'            shift, and go to state 63
    '='            shift, and go to state 64
    NOT_EQUAL      shift, and go to state 65
    LESS_OR_EQUAL  shift, and go to state 66
    MORE_OR_EQUAL  shift, and go to state 67
    '>'            shift, and go to state 68
    '<'            shift, and go to state 69
    '&'            shift, and go to state 70

    stmt                go to state 149
    multi_line_stmt     go to state 14
    decl_stmt           go to state 15
    assign_stmt         go to state 16
    while_stmt          go to state 17
    if_stmt_multi_line  go to state 18
    select_stmt         go to state 19


State 145

   30 if_stmt_multi_line: IF expr THEN stmt_ends stmt ELSE stmt END IF .

    $default  reduce using rule 30 (if_stmt_multi_line)


State 146

   32 elseif_list: ELSEIF expr THEN stmt .

    $default  reduce using rule 32 (elseif_list)


State 147

   31 if_stmt_multi_line: IF expr THEN stmt_ends stmt elseif_list ELSE stmt END . IF

    IF  shift, and go to state 150


State 148

   33 elseif_list: elseif_list ELSEIF expr THEN . stmt

    IDENTIFIER  shift, and go to state 1
    ACCESS      shift, and go to state 2
    CONST       shift, and go to state 3
    DIM         shift, and go to state 4
    WHILE       shift, and go to state 5
    IF          shift, and go to state 6
    SELECT      shift, and go to state 7

    stmt                go to state 151
    multi_line_stmt     go to state 14
    decl_stmt           go to state 15
    assign_stmt         go to state 16
    while_stmt          go to state 17
    if_stmt_multi_line  go to state 18
    select_stmt         go to state 19


State 149

   39 case_stmt: CASE expr TO expr stmt .

    $default  reduce using rule 39 (case_stmt)


State 150

   31 if_stmt_multi_line: IF expr THEN stmt_ends stmt elseif_list ELSE stmt END IF .

    $default  reduce using rule 31 (if_stmt_multi_line)


State 151

   33 elseif_list: elseif_list ELSEIF expr THEN stmt .

    $default  reduce using rule 33 (elseif_list)
